
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08008868  08008868  00018868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d5c  08008d5c  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d64  08008d64  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  08008d70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200009b8  08009728  000209b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a7c  08009728  00020a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f9a  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6f  00000000  00000000  0002a982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a66  00000000  00000000  0002d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a61e  00000000  00000000  00044286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875ee  00000000  00000000  0004e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5e92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f0  00000000  00000000  000d5ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009b8 	.word	0x200009b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800884c 	.word	0x0800884c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009bc 	.word	0x200009bc
 80001dc:	0800884c 	.word	0x0800884c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	0000      	movs	r0, r0
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ec4:	b09e      	sub	sp, #120	; 0x78
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fc6a 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f906 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f99a 	bl	8001208 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ed4:	f000 f96e 	bl	80011b4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ed8:	f000 f960 	bl	800119c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  	uint64_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  	uint64_t ADDR_FLASH_PAGE = 0x08000000 + 24 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00
 8000ee8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	eb12 0a02 	adds.w	sl, r2, r2
 8000ef4:	eb43 0b03 	adc.w	fp, r3, r3
 8000ef8:	4652      	mov	r2, sl
 8000efa:	465b      	mov	r3, fp
 8000efc:	1814      	adds	r4, r2, r0
 8000efe:	eb43 0501 	adc.w	r5, r3, r1
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	00eb      	lsls	r3, r5, #3
 8000f0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f10:	00e2      	lsls	r2, r4, #3
 8000f12:	4614      	mov	r4, r2
 8000f14:	461d      	mov	r5, r3
 8000f16:	4622      	mov	r2, r4
 8000f18:	462b      	mov	r3, r5
 8000f1a:	f112 6800 	adds.w	r8, r2, #134217728	; 0x8000000
 8000f1e:	f143 0900 	adc.w	r9, r3, #0
 8000f22:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68

  	//uint64_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
  	//uint64_t ADDR_FLASH_PAGE = 0x08000000 + 16 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00

  	size_t SIZE_uint64 = sizeof(uint64_t); // 32 біта це 4 байти
 8000f26:	2308      	movs	r3, #8
 8000f28:	667b      	str	r3, [r7, #100]	; 0x64
  	// в одну сторінку розміром 1Кб можна записати 1024/4=256 змінних розміром 4 байти

  	uint64_t val_000 = 0x4567274567276632;
 8000f2a:	a366      	add	r3, pc, #408	; (adr r3, 80010c4 <main+0x204>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  	uint64_t val_004 = 0xCDECDCDDCDECDCDD;
 8000f34:	a365      	add	r3, pc, #404	; (adr r3, 80010cc <main+0x20c>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  	uint64_t val_00C = 0x0304030003040300;
 8000f3e:	a365      	add	r3, pc, #404	; (adr r3, 80010d4 <main+0x214>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  	uint64_t val_3FC = 0xF0F0F0F0F0F0F0F0; //1024-4=1020 == 0x400-0x004=0x3FC
 8000f48:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8000f4c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8000f50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  	uint16_t b = Flash_Read_uint16(ADDR_FLASH_PAGE + 1 * SIZE_uint16);
  	uint16_t c = Flash_Read_uint16(ADDR_FLASH_PAGE + 2 * SIZE_uint16);
  	uint16_t d = Flash_Read_uint16(ADDR_FLASH_PAGE + 3 * SIZE_uint16);
  	 */

  		HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 64!!!\n\r", sizeof("\n\n\r!!!Erase page 64!!!\n\r"), 100);
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	2219      	movs	r2, #25
 8000f58:	4955      	ldr	r1, [pc, #340]	; (80010b0 <main+0x1f0>)
 8000f5a:	4856      	ldr	r0, [pc, #344]	; (80010b4 <main+0x1f4>)
 8000f5c:	f001 ff53 	bl	8002e06 <HAL_UART_Transmit>
  	  	Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 62 сторінки
 8000f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f96a 	bl	800123c <Flash_Erase_One_Page>

  		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	4952      	ldr	r1, [pc, #328]	; (80010b8 <main+0x1f8>)
 8000f6e:	4851      	ldr	r0, [pc, #324]	; (80010b4 <main+0x1f4>)
 8000f70:	f001 ff49 	bl	8002e06 <HAL_UART_Transmit>
  	  	// запис значень на початку і в кінці 127 сторінки
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE + 0 * SIZE_uint64, val_000);
 8000f74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	f000 f9be 	bl	80012fc <Flash_Write_uint64>
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE + 1 * SIZE_uint64, val_004);
 8000f80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f84:	18d1      	adds	r1, r2, r3
 8000f86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	f000 f9b6 	bl	80012fc <Flash_Write_uint64>
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE + 2 * SIZE_uint64, val_00C);
 8000f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f92:	005a      	lsls	r2, r3, #1
 8000f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f96:	18d1      	adds	r1, r2, r3
 8000f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	f000 f9ad 	bl	80012fc <Flash_Write_uint64>
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE + 3 * SIZE_uint64, val_3FC);
 8000fa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	441a      	add	r2, r3
 8000faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fac:	18d1      	adds	r1, r2, r3
 8000fae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	f000 f9a2 	bl	80012fc <Flash_Write_uint64>

  	  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 63!!!\n\r", sizeof("\n!!!Erase page 63!!!\n\r"), 100);
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	2217      	movs	r2, #23
 8000fbc:	493f      	ldr	r1, [pc, #252]	; (80010bc <main+0x1fc>)
 8000fbe:	483d      	ldr	r0, [pc, #244]	; (80010b4 <main+0x1f4>)
 8000fc0:	f001 ff21 	bl	8002e06 <HAL_UART_Transmit>
  	  	Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 63 сторінки
 8000fc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f936 	bl	800123c <Flash_Erase_One_Page>

  	  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	4938      	ldr	r1, [pc, #224]	; (80010b8 <main+0x1f8>)
 8000fd6:	4837      	ldr	r0, [pc, #220]	; (80010b4 <main+0x1f4>)
 8000fd8:	f001 ff15 	bl	8002e06 <HAL_UART_Transmit>
  	  	// запис значень на початку і в кінці 126 сторінки
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, val_000);
 8000fdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fe0:	1ad1      	subs	r1, r2, r3
 8000fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	f000 f988 	bl	80012fc <Flash_Write_uint64>
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x008, val_004);
 8000fec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	f103 0108 	add.w	r1, r3, #8
 8000ff6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	f000 f97e 	bl	80012fc <Flash_Write_uint64>
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x010, val_00C);
 8001000:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	f103 0110 	add.w	r1, r3, #16
 800100a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800100e:	4608      	mov	r0, r1
 8001010:	f000 f974 	bl	80012fc <Flash_Write_uint64>
  	  	Flash_Write_uint64(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x018, val_3FC);
 8001014:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f103 0118 	add.w	r1, r3, #24
 800101e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001022:	4608      	mov	r0, r1
 8001024:	f000 f96a 	bl	80012fc <Flash_Write_uint64>

  	  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	220e      	movs	r2, #14
 800102c:	4924      	ldr	r1, [pc, #144]	; (80010c0 <main+0x200>)
 800102e:	4821      	ldr	r0, [pc, #132]	; (80010b4 <main+0x1f4>)
 8001030:	f001 fee9 	bl	8002e06 <HAL_UART_Transmit>
  	  	// читання значень з 64 сторінки Flash-пам'яті
  	  	uint64_t a = Flash_Read_uint64(ADDR_FLASH_PAGE + 0 * SIZE_uint64);
 8001034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9ba 	bl	80013b0 <Flash_Read_uint64>
 800103c:	4603      	mov	r3, r0
 800103e:	2200      	movs	r2, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	61fa      	str	r2, [r7, #28]
 8001044:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001048:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  	  	uint64_t b = Flash_Read_uint64(ADDR_FLASH_PAGE + 1 * SIZE_uint64);
 800104c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800104e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001050:	4413      	add	r3, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f9ac 	bl	80013b0 <Flash_Read_uint64>
 8001058:	4603      	mov	r3, r0
 800105a:	2200      	movs	r2, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	617a      	str	r2, [r7, #20]
 8001060:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001064:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  	  	uint64_t c = Flash_Read_uint64(ADDR_FLASH_PAGE + 2 * SIZE_uint64);
 8001068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800106a:	005a      	lsls	r2, r3, #1
 800106c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800106e:	4413      	add	r3, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f99d 	bl	80013b0 <Flash_Read_uint64>
 8001076:	4603      	mov	r3, r0
 8001078:	2200      	movs	r2, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	60fa      	str	r2, [r7, #12]
 800107e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001082:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  	  	uint64_t d = Flash_Read_uint64(ADDR_FLASH_PAGE + 3 * SIZE_uint64);
 8001086:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	441a      	add	r2, r3
 800108e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001090:	4413      	add	r3, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f98c 	bl	80013b0 <Flash_Read_uint64>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010a4:	e9c7 3408 	strd	r3, r4, [r7, #32]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <main+0x1e8>
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	08008868 	.word	0x08008868
 80010b4:	200009d4 	.word	0x200009d4
 80010b8:	08008884 	.word	0x08008884
 80010bc:	08008894 	.word	0x08008894
 80010c0:	080088ac 	.word	0x080088ac
 80010c4:	67276632 	.word	0x67276632
 80010c8:	45672745 	.word	0x45672745
 80010cc:	cdecdcdd 	.word	0xcdecdcdd
 80010d0:	cdecdcdd 	.word	0xcdecdcdd
 80010d4:	03040300 	.word	0x03040300
 80010d8:	03040300 	.word	0x03040300

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fe7c 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SystemClock_Config+0xb8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <SystemClock_Config+0xb8>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <SystemClock_Config+0xb8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <SystemClock_Config+0xbc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <SystemClock_Config+0xbc>)
 800112a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SystemClock_Config+0xbc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f001 f9b3 	bl	80024bc <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800115c:	f000 f974 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fc16 	bl	80029ac <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001186:	f000 f95f 	bl	8001448 <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	; 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2025      	movs	r0, #37	; 0x25
 80011a6:	f000 fc48 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011aa:	2025      	movs	r0, #37	; 0x25
 80011ac:	f000 fc61 	bl	8001a72 <HAL_NVIC_EnableIRQ>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART1_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ec:	f001 fdbe 	bl	8002d6c <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 f927 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200009d4 	.word	0x200009d4
 8001204:	40011000 	.word	0x40011000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_GPIO_Init+0x30>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <MX_GPIO_Init+0x30>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_GPIO_Init+0x30>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <Flash_Erase_One_Page>:

/* USER CODE BEGIN 4 */
void Flash_Erase_One_Page(uint32_t MYADDR)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09c      	sub	sp, #112	; 0x70
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct; // структура для очищення флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // очищення сторінками, FLASH_TYPEERASE_MASSERASE - очищення всього флеша
 8001244:	2300      	movs	r3, #0
 8001246:	653b      	str	r3, [r7, #80]	; 0x50
	EraseInitStruct.Sector = MYADDR; // адреса сторінки;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	65bb      	str	r3, [r7, #88]	; 0x58
	EraseInitStruct.NbSectors = 1;          // кількість сторінок для очищення
 800124c:	2301      	movs	r3, #1
 800124e:	65fb      	str	r3, [r7, #92]	; 0x5c
	EraseInitStruct.Banks = FLASH_BANK_1; // для більш потужник МК ніж STM32F103
 8001250:	2301      	movs	r3, #1
 8001252:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t page_error = 0; // змінна в яку запишеться адреса сторінки, при невдалому очищенні
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c

	char str[64] = { 0, };
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	223c      	movs	r2, #60	; 0x3c
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fdbf 	bl	8003de8 <memset>

	//////// ОЧИЩЕННЯ Flash-пам'яті ////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 800126a:	f000 fd03 	bl	8001c74 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 800126e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fe79 	bl	8001f70 <HAL_FLASHEx_Erase>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d017      	beq.n	80012b4 <Flash_Erase_One_Page+0x78>
	{
		// сталась помилка при очищенні сторінки
		uint32_t er = HAL_FLASH_GetError();
 8001284:	f000 fd28 	bl	8001cd8 <HAL_FLASH_GetError>
 8001288:	6678      	str	r0, [r7, #100]	; 0x64
		snprintf(str, 64, "Error Flash_Erase(): %lu\n\r", er);
 800128a:	f107 000c 	add.w	r0, r7, #12
 800128e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <Flash_Erase_One_Page+0xb4>)
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	f002 fdb0 	bl	8003df8 <snprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ff9f 	bl	80001e0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f107 010c 	add.w	r1, r7, #12
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <Flash_Erase_One_Page+0xb8>)
 80012ae:	f001 fdaa 	bl	8002e06 <HAL_UART_Transmit>
		while (1)
 80012b2:	e7fe      	b.n	80012b2 <Flash_Erase_One_Page+0x76>
		{
		}
	}

	// очищення сторінки виконане успішно
	snprintf(str, 64, "Erase Flash from address 0x%08lX to address 0x%08lX OK\n\r", MYADDR, MYADDR+0x400-1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80012ba:	f107 000c 	add.w	r0, r7, #12
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <Flash_Erase_One_Page+0xbc>)
 80012c4:	2140      	movs	r1, #64	; 0x40
 80012c6:	f002 fd97 	bl	8003df8 <snprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ff86 	bl	80001e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 010c 	add.w	r1, r7, #12
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <Flash_Erase_One_Page+0xb8>)
 80012e0:	f001 fd91 	bl	8002e06 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 80012e4:	f000 fce8 	bl	8001cb8 <HAL_FLASH_Lock>
}
 80012e8:	bf00      	nop
 80012ea:	3768      	adds	r7, #104	; 0x68
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	080088bc 	.word	0x080088bc
 80012f4:	200009d4 	.word	0x200009d4
 80012f8:	080088d8 	.word	0x080088d8

080012fc <Flash_Write_uint64>:

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
}
*/
void Flash_Write_uint64(uint32_t MYADDR, uint64_t val)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09a      	sub	sp, #104	; 0x68
 8001300:	af04      	add	r7, sp, #16
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	e9c7 2300 	strd	r2, r3, [r7]
	char str[64] = { 0, };
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	223c      	movs	r2, #60	; 0x3c
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fd67 	bl	8003de8 <memset>

	///////////// ЗАПИС у Flash-пам'ять ///////////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 800131a:	f000 fcab 	bl	8001c74 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MYADDR, val) != HAL_OK)
 800131e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	2003      	movs	r0, #3
 8001326:	f000 fc51 	bl	8001bcc <HAL_FLASH_Program>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01a      	beq.n	8001366 <Flash_Write_uint64+0x6a>
	{
		uint16_t er = HAL_FLASH_GetError();
 8001330:	f000 fcd2 	bl	8001cd8 <HAL_FLASH_GetError>
 8001334:	4603      	mov	r3, r0
 8001336:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		snprintf(str, 64, "Error Flash_Write(): %u\n\r", er);
 800133a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800133e:	f107 0014 	add.w	r0, r7, #20
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <Flash_Write_uint64+0xa8>)
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	f002 fd57 	bl	8003df8 <snprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff46 	bl	80001e0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 0114 	add.w	r1, r7, #20
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <Flash_Write_uint64+0xac>)
 8001360:	f001 fd51 	bl	8002e06 <HAL_UART_Transmit>
		while (1)
 8001364:	e7fe      	b.n	8001364 <Flash_Write_uint64+0x68>
		{
		}
	}
	//uint32_t var32 = val;
	snprintf(str, 64, "Write 64 bits (Hex: 0x%016llX) to address 0x%08lX\n\r", val, MYADDR);
 8001366:	f107 0014 	add.w	r0, r7, #20
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001372:	e9cd 2300 	strd	r2, r3, [sp]
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <Flash_Write_uint64+0xb0>)
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	f002 fd3d 	bl	8003df8 <snprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ff2c 	bl	80001e0 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 0114 	add.w	r1, r7, #20
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <Flash_Write_uint64+0xac>)
 8001394:	f001 fd37 	bl	8002e06 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 8001398:	f000 fc8e 	bl	8001cb8 <HAL_FLASH_Lock>
}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	; 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08008914 	.word	0x08008914
 80013a8:	200009d4 	.word	0x200009d4
 80013ac:	08008930 	.word	0x08008930

080013b0 <Flash_Read_uint64>:

uint32_t Flash_Read_uint64(uint32_t MYADDR)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b098      	sub	sp, #96	; 0x60
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	6078      	str	r0, [r7, #4]
	char str[64] = { 0, };
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	223c      	movs	r2, #60	; 0x3c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fd0f 	bl	8003de8 <memset>

	/////////////// ЧИТАЄМО Flash-пам'ять ///////////////////
	uint64_t dig32 = *(uint64_t*) MYADDR; // читання числа за його адресою
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	snprintf(str, 64, "Read 64 bits (Dec: %lu \tHex: 0x%016llX\n)", dig32, dig32);
 80013d4:	f107 0008 	add.w	r0, r7, #8
 80013d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013e4:	e9cd 2300 	strd	r2, r3, [sp]
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <Flash_Read_uint64+0x8c>)
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	f002 fd04 	bl	8003df8 <snprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe fef3 	bl	80001e0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	f107 0108 	add.w	r1, r7, #8
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <Flash_Read_uint64+0x90>)
 8001406:	f001 fcfe 	bl	8002e06 <HAL_UART_Transmit>
	snprintf(str, 64, " from address 0x%08lX \n\r", MYADDR);
 800140a:	f107 0008 	add.w	r0, r7, #8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <Flash_Read_uint64+0x94>)
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	f002 fcf0 	bl	8003df8 <snprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fedf 	bl	80001e0 <strlen>
 8001422:	4603      	mov	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	f107 0108 	add.w	r1, r7, #8
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <Flash_Read_uint64+0x90>)
 800142e:	f001 fcea 	bl	8002e06 <HAL_UART_Transmit>

	return dig32;
 8001432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001434:	4618      	mov	r0, r3
 8001436:	3750      	adds	r7, #80	; 0x50
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08008964 	.word	0x08008964
 8001440:	200009d4 	.word	0x200009d4
 8001444:	08008990 	.word	0x08008990

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12c      	bne.n	8001520 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x88>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0x88>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_UART_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_UART_MspInit+0x88>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_UART_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001510:	2307      	movs	r3, #7
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_UART_MspInit+0x8c>)
 800151c:	f000 fe4a 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 f960 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <USART1_IRQHandler+0x10>)
 800158e:	f001 fccd 	bl	8002f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200009d4 	.word	0x200009d4

0800159c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	return 1;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_kill>:

int _kill(int pid, int sig)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015b6:	f002 fbed 	bl	8003d94 <__errno>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2216      	movs	r2, #22
 80015be:	601a      	str	r2, [r3, #0]
	return -1;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_exit>:

void _exit (int status)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ffe7 	bl	80015ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80015de:	e7fe      	b.n	80015de <_exit+0x12>

080015e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
	}

return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e009      	b.n	8001640 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf1      	blt.n	800162c <_write+0x12>
	}
	return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_close>:

int _close(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
	return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	605a      	str	r2, [r3, #4]
	return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f002 fb52 	bl	8003d94 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20010000 	.word	0x20010000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000a18 	.word	0x20000a18
 8001724:	20000a80 	.word	0x20000a80

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001768:	4c0b      	ldr	r4, [pc, #44]	; (8001798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001776:	f7ff ffd7 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177a:	f002 fb11 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff fb9f 	bl	8000ec0 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	200009b8 	.word	0x200009b8
  ldr r2, =_sidata
 8001790:	08008d70 	.word	0x08008d70
  ldr r2, =_sbss
 8001794:	200009b8 	.word	0x200009b8
  ldr r4, =_ebss
 8001798:	20000a7c 	.word	0x20000a7c

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_Init+0x40>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_Init+0x40>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x40>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 f92b 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	200f      	movs	r0, #15
 80017d0:	f000 f808 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fe3e 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x54>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f943 	bl	8001a8e <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 f90b 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x5c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000000 	.word	0x20000000
 800183c:	20000008 	.word	0x20000008
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008
 8001868:	20000a1c 	.word	0x20000a1c

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000a1c 	.word	0x20000a1c

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff29 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff3e 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff8e 	bl	8001978 <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff31 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa2 	bl	80019e0 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff feda 	bl	800186c <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d008      	beq.n	8001ad8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e052      	b.n	8001b7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0216 	bic.w	r2, r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <HAL_DMA_Abort+0x62>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0208 	bic.w	r2, r2, #8
 8001b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b28:	e013      	b.n	8001b52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2a:	f7ff fe9f 	bl	800186c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d90c      	bls.n	8001b52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2203      	movs	r2, #3
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e015      	b.n	8001b7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e4      	bne.n	8001b2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	223f      	movs	r2, #63	; 0x3f
 8001b66:	409a      	lsls	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d004      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e00c      	b.n	8001bbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_FLASH_Program+0xa0>)
 8001be0:	7e1b      	ldrb	r3, [r3, #24]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_FLASH_Program+0x1e>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e03b      	b.n	8001c62 <HAL_FLASH_Program+0x96>
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_FLASH_Program+0xa0>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bf4:	f000 f87c 	bl	8001cf0 <FLASH_WaitForLastOperation>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d12b      	bne.n	8001c5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c08:	783b      	ldrb	r3, [r7, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	68b8      	ldr	r0, [r7, #8]
 8001c0e:	f000 f927 	bl	8001e60 <FLASH_Program_Byte>
 8001c12:	e016      	b.n	8001c42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c1a:	883b      	ldrh	r3, [r7, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f000 f8fa 	bl	8001e18 <FLASH_Program_HalfWord>
 8001c24:	e00d      	b.n	8001c42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d105      	bne.n	8001c38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f000 f8cf 	bl	8001dd4 <FLASH_Program_Word>
 8001c36:	e004      	b.n	8001c42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c3c:	68b8      	ldr	r0, [r7, #8]
 8001c3e:	f000 f897 	bl	8001d70 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c46:	f000 f853 	bl	8001cf0 <FLASH_WaitForLastOperation>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_FLASH_Program+0xa4>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_FLASH_Program+0xa4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_FLASH_Program+0xa0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000a20 	.word	0x20000a20
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_FLASH_Unlock+0x38>)
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da0b      	bge.n	8001c9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_FLASH_Unlock+0x38>)
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_FLASH_Unlock+0x3c>)
 8001c8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_FLASH_Unlock+0x38>)
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_FLASH_Unlock+0x40>)
 8001c90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_FLASH_Unlock+0x38>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da01      	bge.n	8001c9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40023c00 	.word	0x40023c00
 8001cb0:	45670123 	.word	0x45670123
 8001cb4:	cdef89ab 	.word	0xcdef89ab

08001cb8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_FLASH_Lock+0x1c>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_FLASH_Lock+0x1c>)
 8001cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cc6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_FLASH_GetError+0x14>)
 8001cde:	69db      	ldr	r3, [r3, #28]
}  
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000a20 	.word	0x20000a20

08001cf0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <FLASH_WaitForLastOperation+0x78>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d02:	f7ff fdb3 	bl	800186c <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d08:	e010      	b.n	8001d2c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d00c      	beq.n	8001d2c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <FLASH_WaitForLastOperation+0x38>
 8001d18:	f7ff fda8 	bl	800186c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d201      	bcs.n	8001d2c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e019      	b.n	8001d60 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <FLASH_WaitForLastOperation+0x7c>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e8      	bne.n	8001d0a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <FLASH_WaitForLastOperation+0x7c>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <FLASH_WaitForLastOperation+0x7c>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <FLASH_WaitForLastOperation+0x7c>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d56:	f000 f8a5 	bl	8001ea4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
  
}  
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000a20 	.word	0x20000a20
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <FLASH_Program_DoubleWord+0x60>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <FLASH_Program_DoubleWord+0x60>)
 8001d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <FLASH_Program_DoubleWord+0x60>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <FLASH_Program_DoubleWord+0x60>)
 8001d8e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <FLASH_Program_DoubleWord+0x60>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <FLASH_Program_DoubleWord+0x60>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001da6:	f3bf 8f6f 	isb	sy
}
 8001daa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	000a      	movs	r2, r1
 8001dba:	2300      	movs	r3, #0
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	3104      	adds	r1, #4
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <FLASH_Program_Word+0x40>)
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <FLASH_Program_Word+0x40>)
 8001de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <FLASH_Program_Word+0x40>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <FLASH_Program_Word+0x40>)
 8001df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <FLASH_Program_Word+0x40>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <FLASH_Program_Word+0x40>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <FLASH_Program_HalfWord+0x44>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <FLASH_Program_HalfWord+0x44>)
 8001e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <FLASH_Program_HalfWord+0x44>)
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <FLASH_Program_HalfWord+0x44>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <FLASH_Program_HalfWord+0x44>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <FLASH_Program_HalfWord+0x44>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	801a      	strh	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023c00 	.word	0x40023c00

08001e60 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <FLASH_Program_Byte+0x40>)
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <FLASH_Program_Byte+0x40>)
 8001e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <FLASH_Program_Byte+0x40>)
 8001e7a:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <FLASH_Program_Byte+0x40>)
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <FLASH_Program_Byte+0x40>)
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <FLASH_Program_Byte+0x40>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	701a      	strb	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001ebe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001edc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001efa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001f18:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001f36:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <FLASH_SetErrorCode+0xc8>)
 8001f56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <FLASH_SetErrorCode+0xc4>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	60da      	str	r2, [r3, #12]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40023c00 	.word	0x40023c00
 8001f6c:	20000a20 	.word	0x20000a20

08001f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_FLASHEx_Erase+0xd8>)
 8001f84:	7e1b      	ldrb	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_FLASHEx_Erase+0x1e>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e058      	b.n	8002040 <HAL_FLASHEx_Erase+0xd0>
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <HAL_FLASHEx_Erase+0xd8>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f98:	f7ff feaa 	bl	8001cf0 <FLASH_WaitForLastOperation>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d148      	bne.n	8002038 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d115      	bne.n	8001fe2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f000 f844 	bl	8002050 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fcc:	f7ff fe90 	bl	8001cf0 <FLASH_WaitForLastOperation>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_FLASHEx_Erase+0xdc>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_FLASHEx_Erase+0xdc>)
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	6113      	str	r3, [r2, #16]
 8001fe0:	e028      	b.n	8002034 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	e01c      	b.n	8002024 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f000 f850 	bl	8002098 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ff8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ffc:	f7ff fe78 	bl	8001cf0 <FLASH_WaitForLastOperation>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_FLASHEx_Erase+0xdc>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_FLASHEx_Erase+0xdc>)
 800200a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800200e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	601a      	str	r2, [r3, #0]
          break;
 800201c:	e00a      	b.n	8002034 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3301      	adds	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4413      	add	r3, r2
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d3da      	bcc.n	8001fea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002034:	f000 f878 	bl	8002128 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_FLASHEx_Erase+0xd8>)
 800203a:	2200      	movs	r2, #0
 800203c:	761a      	strb	r2, [r3, #24]

  return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000a20 	.word	0x20000a20
 800204c:	40023c00 	.word	0x40023c00

08002050 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <FLASH_MassErase+0x44>)
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <FLASH_MassErase+0x44>)
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <FLASH_MassErase+0x44>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4a09      	ldr	r2, [pc, #36]	; (8002094 <FLASH_MassErase+0x44>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <FLASH_MassErase+0x44>)
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4313      	orrs	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <FLASH_MassErase+0x44>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6113      	str	r3, [r2, #16]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e010      	b.n	80020d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d103      	bne.n	80020c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d103      	bne.n	80020d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e002      	b.n	80020d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	490f      	ldr	r1, [pc, #60]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4313      	orrs	r3, r2
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <FLASH_Erase_Sector+0x8c>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6113      	str	r3, [r2, #16]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40023c00 	.word	0x40023c00

08002128 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800213e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002142:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800214a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800215a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d017      	beq.n	80021a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800217a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800217e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <FLASH_FlushCaches+0x88>)
 8002192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <FLASH_FlushCaches+0x88>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a2:	6013      	str	r3, [r2, #0]
  }
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e159      	b.n	8002484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8148 	bne.w	800247e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x202>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1fe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_GPIO_Init+0x2f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1f6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_GPIO_Init+0x300>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1f2>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f aea2 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e267      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d075      	beq.n	80025c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d00c      	beq.n	8002500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b85      	ldr	r3, [pc, #532]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d112      	bne.n	8002518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <HAL_RCC_OscConfig+0x108>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d157      	bne.n	80025c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e242      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x74>
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xb0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x98>
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6f      	ldr	r2, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xb0>
 8002554:	4b69      	ldr	r3, [pc, #420]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a68      	ldr	r2, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f97a 	bl	800186c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff f976 	bl	800186c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e207      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xc0>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff f966 	bl	800186c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f962 	bl	800186c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1f3      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0xe8>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x152>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1c7      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4937      	ldr	r1, [pc, #220]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x244>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff f91b 	bl	800186c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff f917 	bl	800186c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1a8      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4925      	ldr	r1, [pc, #148]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCC_OscConfig+0x244>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7ff f8fa 	bl	800186c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267c:	f7ff f8f6 	bl	800186c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e187      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d036      	beq.n	8002714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_RCC_OscConfig+0x248>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff f8da 	bl	800186c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff f8d6 	bl	800186c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e167      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x240>)
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x200>
 80026da:	e01b      	b.n	8002714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_OscConfig+0x248>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7ff f8c3 	bl	800186c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00e      	b.n	8002708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ea:	f7ff f8bf 	bl	800186c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d907      	bls.n	8002708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e150      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470000 	.word	0x42470000
 8002704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ea      	bne.n	80026ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8097 	beq.w	8002850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a7c      	ldr	r2, [pc, #496]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b7a      	ldr	r3, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a73      	ldr	r2, [pc, #460]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7ff f87f 	bl	800186c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7ff f87b 	bl	800186c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e10c      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_OscConfig+0x474>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2ea>
 8002798:	4b64      	ldr	r3, [pc, #400]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a63      	ldr	r2, [pc, #396]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x324>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x30c>
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a5e      	ldr	r2, [pc, #376]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5b      	ldr	r2, [pc, #364]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0x324>
 80027c8:	4b58      	ldr	r3, [pc, #352]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a57      	ldr	r2, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	4b55      	ldr	r3, [pc, #340]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a54      	ldr	r2, [pc, #336]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff f840 	bl	800186c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7ff f83c 	bl	800186c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0cb      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ee      	beq.n	80027f0 <HAL_RCC_OscConfig+0x334>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002814:	f7ff f82a 	bl	800186c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7ff f826 	bl	800186c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0b5      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ee      	bne.n	800281c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a1 	beq.w	800299c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCC_OscConfig+0x470>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d05c      	beq.n	8002920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d141      	bne.n	80028f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCC_OscConfig+0x478>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fffa 	bl	800186c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fff6 	bl	800186c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e087      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	491b      	ldr	r1, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x478>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe ffcf 	bl	800186c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe ffcb 	bl	800186c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e05c      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_OscConfig+0x470>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x416>
 80028f0:	e054      	b.n	800299c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_OscConfig+0x478>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe ffb8 	bl	800186c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe ffb4 	bl	800186c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e045      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x470>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x444>
 800291e:	e03d      	b.n	800299c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e038      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
 800292c:	40023800 	.word	0x40023800
 8002930:	40007000 	.word	0x40007000
 8002934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4ec>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d028      	beq.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d121      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d11a      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0cc      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d90c      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0b8      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a00:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a58      	ldr	r2, [pc, #352]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a18:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a52      	ldr	r2, [pc, #328]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	494d      	ldr	r1, [pc, #308]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d044      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d119      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e067      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4934      	ldr	r1, [pc, #208]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fee6 	bl	800186c <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe fee2 	bl	800186c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e04f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d20c      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e032      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4916      	ldr	r1, [pc, #88]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	490e      	ldr	r1, [pc, #56]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b32:	f000 f821 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	490a      	ldr	r1, [pc, #40]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	5ccb      	ldrb	r3, [r1, r3]
 8002b46:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fe46 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	080089ac 	.word	0x080089ac
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b7c:	b090      	sub	sp, #64	; 0x40
 8002b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
 8002b84:	2300      	movs	r3, #0
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	f200 80a1 	bhi.w	8002ce4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x34>
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002baa:	e09b      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bb0:	e09b      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb2:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bb6:	e098      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc2:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	627a      	str	r2, [r7, #36]	; 0x24
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002be0:	2100      	movs	r1, #0
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be4:	fb03 f201 	mul.w	r2, r3, r1
 8002be8:	2300      	movs	r3, #0
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf2:	fba0 1202 	umull	r1, r2, r0, r2
 8002bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	4413      	add	r3, r2
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	2200      	movs	r2, #0
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	61fa      	str	r2, [r7, #28]
 8002c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c12:	f7fd ffd1 	bl	8000bb8 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1e:	e053      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	2200      	movs	r2, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	617a      	str	r2, [r7, #20]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c32:	f04f 0b00 	mov.w	fp, #0
 8002c36:	4652      	mov	r2, sl
 8002c38:	465b      	mov	r3, fp
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c52:	eb63 090b 	sbc.w	r9, r3, fp
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	00eb      	lsls	r3, r5, #3
 8002c7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c80:	00e2      	lsls	r2, r4, #3
 8002c82:	4614      	mov	r4, r2
 8002c84:	461d      	mov	r5, r3
 8002c86:	eb14 030a 	adds.w	r3, r4, sl
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	eb45 030b 	adc.w	r3, r5, fp
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	60fa      	str	r2, [r7, #12]
 8002cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbc:	f7fd ff7c 	bl	8000bb8 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3740      	adds	r7, #64	; 0x40
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	017d7840 	.word	0x017d7840

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	080089bc 	.word	0x080089bc

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff ffdc 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0b5b      	lsrs	r3, r3, #13
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	080089bc 	.word	0x080089bc

08002d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e03f      	b.n	8002dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fb86 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fd7b 	bl	80038ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08a      	sub	sp, #40	; 0x28
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d17c      	bne.n	8002f20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_UART_Transmit+0x2c>
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e075      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_UART_Transmit+0x3e>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e06e      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2221      	movs	r2, #33	; 0x21
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe fd07 	bl	800186c <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d108      	bne.n	8002e88 <HAL_UART_Transmit+0x82>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e98:	e02a      	b.n	8002ef0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 faf9 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e036      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e007      	b.n	8002ee2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1cf      	bne.n	8002e9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fac9 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e000      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0ba      	sub	sp, #232	; 0xe8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_UART_IRQHandler+0x66>
 8002f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fbd3 	bl	8003736 <UART_Receive_IT>
      return;
 8002f90:	e256      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80de 	beq.w	8003158 <HAL_UART_IRQHandler+0x22c>
 8002f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80d1 	beq.w	8003158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_UART_IRQHandler+0xae>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xd2>
 8002fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xf6>
 800300a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d011      	beq.n	8003052 <HAL_UART_IRQHandler+0x126>
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800303a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 81ed 	beq.w	8003436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_UART_IRQHandler+0x14e>
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fb5e 	bl	8003736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_UART_IRQHandler+0x17a>
 800309e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d04f      	beq.n	8003146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa66 	bl	8003578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d141      	bne.n	800313e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1d9      	bne.n	80030ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <HAL_UART_IRQHandler+0x3dc>)
 8003114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fd33 	bl	8001b86 <HAL_DMA_Abort_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	e00e      	b.n	8003154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f99a 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e00a      	b.n	8003154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f996 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e006      	b.n	8003154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f992 	bl	8003470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003152:	e170      	b.n	8003436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	bf00      	nop
    return;
 8003156:	e16e      	b.n	8003436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 814a 	bne.w	80033f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8143 	beq.w	80033f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 813c 	beq.w	80033f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	f040 80b4 	bne.w	800330c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8140 	beq.w	800343a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031c2:	429a      	cmp	r2, r3
 80031c4:	f080 8139 	bcs.w	800343a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	f000 8088 	beq.w	80032ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800320a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1d9      	bne.n	80031de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800323a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800324e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e1      	bne.n	800322a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800328a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800328c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e3      	bne.n	8003266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	f023 0310 	bic.w	r3, r3, #16
 80032c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e3      	bne.n	80032ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fbdc 	bl	8001aa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8c0 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003304:	e099      	b.n	800343a <HAL_UART_IRQHandler+0x50e>
 8003306:	bf00      	nop
 8003308:	0800363f 	.word	0x0800363f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003314:	b29b      	uxth	r3, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 808b 	beq.w	800343e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8086 	beq.w	800343e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003356:	647a      	str	r2, [r7, #68]	; 0x44
 8003358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800335c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e3      	bne.n	8003332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	623b      	str	r3, [r7, #32]
   return(result);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800338e:	633a      	str	r2, [r7, #48]	; 0x30
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e3      	bne.n	800336a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	60fb      	str	r3, [r7, #12]
   return(result);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0310 	bic.w	r3, r3, #16
 80033c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033d4:	61fa      	str	r2, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	617b      	str	r3, [r7, #20]
   return(result);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e3      	bne.n	80033b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f848 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033f4:	e023      	b.n	800343e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_UART_IRQHandler+0x4ea>
 8003402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f929 	bl	8003666 <UART_Transmit_IT>
    return;
 8003414:	e014      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <HAL_UART_IRQHandler+0x514>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f969 	bl	8003706 <UART_EndTransmit_IT>
    return;
 8003434:	e004      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
    return;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
      return;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_UART_IRQHandler+0x514>
      return;
 800343e:	bf00      	nop
  }
}
 8003440:	37e8      	adds	r7, #232	; 0xe8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b090      	sub	sp, #64	; 0x40
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ac:	e050      	b.n	8003550 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d04c      	beq.n	8003550 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0x30>
 80034bc:	f7fe f9d6 	bl	800186c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d241      	bcs.n	8003550 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ec:	637a      	str	r2, [r7, #52]	; 0x34
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3314      	adds	r3, #20
 8003506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	613b      	str	r3, [r7, #16]
   return(result);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003520:	623a      	str	r2, [r7, #32]
 8003522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	69f9      	ldr	r1, [r7, #28]
 8003526:	6a3a      	ldr	r2, [r7, #32]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	61bb      	str	r3, [r7, #24]
   return(result);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e00f      	b.n	8003570 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	429a      	cmp	r2, r3
 800356c:	d09f      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3740      	adds	r7, #64	; 0x40
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b095      	sub	sp, #84	; 0x54
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a0:	643a      	str	r2, [r7, #64]	; 0x40
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3314      	adds	r3, #20
 80035ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3314      	adds	r3, #20
 80035d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d119      	bne.n	8003624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f023 0310 	bic.w	r3, r3, #16
 8003606:	647b      	str	r3, [r7, #68]	; 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003610:	61ba      	str	r2, [r7, #24]
 8003612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	613b      	str	r3, [r7, #16]
   return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003632:	bf00      	nop
 8003634:	3754      	adds	r7, #84	; 0x54
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ff09 	bl	8003470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b21      	cmp	r3, #33	; 0x21
 8003678:	d13e      	bne.n	80036f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003682:	d114      	bne.n	80036ae <UART_Transmit_IT+0x48>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d110      	bne.n	80036ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	621a      	str	r2, [r3, #32]
 80036ac:	e008      	b.n	80036c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6211      	str	r1, [r2, #32]
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4619      	mov	r1, r3
 80036ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10f      	bne.n	80036f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fe8e 	bl	8003448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b08c      	sub	sp, #48	; 0x30
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b22      	cmp	r3, #34	; 0x22
 8003748:	f040 80ab 	bne.w	80038a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	d117      	bne.n	8003786 <UART_Receive_IT+0x50>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d113      	bne.n	8003786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	b29a      	uxth	r2, r3
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	1c9a      	adds	r2, r3, #2
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
 8003784:	e026      	b.n	80037d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003798:	d007      	beq.n	80037aa <UART_Receive_IT+0x74>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <UART_Receive_IT+0x82>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e008      	b.n	80037ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4619      	mov	r1, r3
 80037e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d15a      	bne.n	800389e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0220 	bic.w	r2, r2, #32
 80037f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	2b01      	cmp	r3, #1
 8003826:	d135      	bne.n	8003894 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	613b      	str	r3, [r7, #16]
   return(result);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f023 0310 	bic.w	r3, r3, #16
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384e:	623a      	str	r2, [r7, #32]
 8003850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	69f9      	ldr	r1, [r7, #28]
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	61bb      	str	r3, [r7, #24]
   return(result);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e5      	bne.n	800382e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b10      	cmp	r3, #16
 800386e:	d10a      	bne.n	8003886 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fdf9 	bl	8003484 <HAL_UARTEx_RxEventCallback>
 8003892:	e002      	b.n	800389a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fde1 	bl	800345c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e002      	b.n	80038a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
  }
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3730      	adds	r7, #48	; 0x30
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b0:	b0c0      	sub	sp, #256	; 0x100
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	68d9      	ldr	r1, [r3, #12]
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	ea40 0301 	orr.w	r3, r0, r1
 80038d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003904:	f021 010c 	bic.w	r1, r1, #12
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003912:	430b      	orrs	r3, r1
 8003914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003926:	6999      	ldr	r1, [r3, #24]
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	ea40 0301 	orr.w	r3, r0, r1
 8003932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <UART_SetConfig+0x2cc>)
 800393c:	429a      	cmp	r2, r3
 800393e:	d005      	beq.n	800394c <UART_SetConfig+0xa0>
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003948:	429a      	cmp	r2, r3
 800394a:	d104      	bne.n	8003956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7ff f9fa 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 8003950:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003954:	e003      	b.n	800395e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003956:	f7ff f9e1 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 800395a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	f040 810c 	bne.w	8003b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003976:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800397a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800397e:	4622      	mov	r2, r4
 8003980:	462b      	mov	r3, r5
 8003982:	1891      	adds	r1, r2, r2
 8003984:	65b9      	str	r1, [r7, #88]	; 0x58
 8003986:	415b      	adcs	r3, r3
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800398a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800398e:	4621      	mov	r1, r4
 8003990:	eb12 0801 	adds.w	r8, r2, r1
 8003994:	4629      	mov	r1, r5
 8003996:	eb43 0901 	adc.w	r9, r3, r1
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ae:	4690      	mov	r8, r2
 80039b0:	4699      	mov	r9, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	eb18 0303 	adds.w	r3, r8, r3
 80039b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039bc:	462b      	mov	r3, r5
 80039be:	eb49 0303 	adc.w	r3, r9, r3
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039da:	460b      	mov	r3, r1
 80039dc:	18db      	adds	r3, r3, r3
 80039de:	653b      	str	r3, [r7, #80]	; 0x50
 80039e0:	4613      	mov	r3, r2
 80039e2:	eb42 0303 	adc.w	r3, r2, r3
 80039e6:	657b      	str	r3, [r7, #84]	; 0x54
 80039e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039f0:	f7fd f8e2 	bl	8000bb8 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <UART_SetConfig+0x2d4>)
 80039fa:	fba3 2302 	umull	r2, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	011c      	lsls	r4, r3, #4
 8003a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	1891      	adds	r1, r2, r2
 8003a1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a1c:	415b      	adcs	r3, r3
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a24:	4641      	mov	r1, r8
 8003a26:	eb12 0a01 	adds.w	sl, r2, r1
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a44:	4692      	mov	sl, r2
 8003a46:	469b      	mov	fp, r3
 8003a48:	4643      	mov	r3, r8
 8003a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a52:	464b      	mov	r3, r9
 8003a54:	eb4b 0303 	adc.w	r3, fp, r3
 8003a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a70:	460b      	mov	r3, r1
 8003a72:	18db      	adds	r3, r3, r3
 8003a74:	643b      	str	r3, [r7, #64]	; 0x40
 8003a76:	4613      	mov	r3, r2
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a86:	f7fd f897 	bl	8000bb8 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003a92:	fba3 2301 	umull	r2, r3, r3, r1
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2264      	movs	r2, #100	; 0x64
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	1acb      	subs	r3, r1, r3
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab4:	441c      	add	r4, r3
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	1891      	adds	r1, r2, r2
 8003ace:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ad0:	415b      	adcs	r3, r3
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ad8:	4641      	mov	r1, r8
 8003ada:	1851      	adds	r1, r2, r1
 8003adc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ade:	4649      	mov	r1, r9
 8003ae0:	414b      	adcs	r3, r1
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003af0:	4659      	mov	r1, fp
 8003af2:	00cb      	lsls	r3, r1, #3
 8003af4:	4651      	mov	r1, sl
 8003af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afa:	4651      	mov	r1, sl
 8003afc:	00ca      	lsls	r2, r1, #3
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	4642      	mov	r2, r8
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	460a      	mov	r2, r1
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	18db      	adds	r3, r3, r3
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b32:	4613      	mov	r3, r2
 8003b34:	eb42 0303 	adc.w	r3, r2, r3
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b42:	f7fd f839 	bl	8000bb8 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 0207 	and.w	r2, r3, #7
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4422      	add	r2, r4
 8003b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b74:	e105      	b.n	8003d82 <UART_SetConfig+0x4d6>
 8003b76:	bf00      	nop
 8003b78:	40011000 	.word	0x40011000
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b96:	4642      	mov	r2, r8
 8003b98:	464b      	mov	r3, r9
 8003b9a:	1891      	adds	r1, r2, r2
 8003b9c:	6239      	str	r1, [r7, #32]
 8003b9e:	415b      	adcs	r3, r3
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	1854      	adds	r4, r2, r1
 8003baa:	4649      	mov	r1, r9
 8003bac:	eb43 0501 	adc.w	r5, r3, r1
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	00eb      	lsls	r3, r5, #3
 8003bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bbe:	00e2      	lsls	r2, r4, #3
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	4643      	mov	r3, r8
 8003bc6:	18e3      	adds	r3, r4, r3
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bcc:	464b      	mov	r3, r9
 8003bce:	eb45 0303 	adc.w	r3, r5, r3
 8003bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003be2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	008b      	lsls	r3, r1, #2
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	008a      	lsls	r2, r1, #2
 8003c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c04:	f7fc ffd8 	bl	8000bb8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4b60      	ldr	r3, [pc, #384]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	011c      	lsls	r4, r3, #4
 8003c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c28:	4642      	mov	r2, r8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	1891      	adds	r1, r2, r2
 8003c2e:	61b9      	str	r1, [r7, #24]
 8003c30:	415b      	adcs	r3, r3
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c38:	4641      	mov	r1, r8
 8003c3a:	1851      	adds	r1, r2, r1
 8003c3c:	6139      	str	r1, [r7, #16]
 8003c3e:	4649      	mov	r1, r9
 8003c40:	414b      	adcs	r3, r1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c50:	4659      	mov	r1, fp
 8003c52:	00cb      	lsls	r3, r1, #3
 8003c54:	4651      	mov	r1, sl
 8003c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	00ca      	lsls	r2, r1, #3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	4642      	mov	r2, r8
 8003c66:	189b      	adds	r3, r3, r2
 8003c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	460a      	mov	r2, r1
 8003c70:	eb42 0303 	adc.w	r3, r2, r3
 8003c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c90:	4649      	mov	r1, r9
 8003c92:	008b      	lsls	r3, r1, #2
 8003c94:	4641      	mov	r1, r8
 8003c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	008a      	lsls	r2, r1, #2
 8003c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ca2:	f7fc ff89 	bl	8000bb8 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cca:	441c      	add	r4, r3
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd4:	677a      	str	r2, [r7, #116]	; 0x74
 8003cd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cda:	4642      	mov	r2, r8
 8003cdc:	464b      	mov	r3, r9
 8003cde:	1891      	adds	r1, r2, r2
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	415b      	adcs	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cea:	4641      	mov	r1, r8
 8003cec:	1851      	adds	r1, r2, r1
 8003cee:	6039      	str	r1, [r7, #0]
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	414b      	adcs	r3, r1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d02:	4659      	mov	r1, fp
 8003d04:	00cb      	lsls	r3, r1, #3
 8003d06:	4651      	mov	r1, sl
 8003d08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	00ca      	lsls	r2, r1, #3
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	4603      	mov	r3, r0
 8003d16:	4642      	mov	r2, r8
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d30:	667a      	str	r2, [r7, #100]	; 0x64
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d3e:	4649      	mov	r1, r9
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	4641      	mov	r1, r8
 8003d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d48:	4641      	mov	r1, r8
 8003d4a:	008a      	lsls	r2, r1, #2
 8003d4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d50:	f7fc ff32 	bl	8000bb8 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2164      	movs	r1, #100	; 0x64
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	3332      	adds	r3, #50	; 0x32
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4422      	add	r2, r4
 8003d80:	609a      	str	r2, [r3, #8]
}
 8003d82:	bf00      	nop
 8003d84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d8e:	bf00      	nop
 8003d90:	51eb851f 	.word	0x51eb851f

08003d94 <__errno>:
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <__errno+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	4d0d      	ldr	r5, [pc, #52]	; (8003dd8 <__libc_init_array+0x38>)
 8003da4:	4c0d      	ldr	r4, [pc, #52]	; (8003ddc <__libc_init_array+0x3c>)
 8003da6:	1b64      	subs	r4, r4, r5
 8003da8:	10a4      	asrs	r4, r4, #2
 8003daa:	2600      	movs	r6, #0
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	4d0b      	ldr	r5, [pc, #44]	; (8003de0 <__libc_init_array+0x40>)
 8003db2:	4c0c      	ldr	r4, [pc, #48]	; (8003de4 <__libc_init_array+0x44>)
 8003db4:	f004 fd4a 	bl	800884c <_init>
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	08008d64 	.word	0x08008d64
 8003ddc:	08008d64 	.word	0x08008d64
 8003de0:	08008d64 	.word	0x08008d64
 8003de4:	08008d6c 	.word	0x08008d6c

08003de8 <memset>:
 8003de8:	4402      	add	r2, r0
 8003dea:	4603      	mov	r3, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <snprintf>:
 8003df8:	b40c      	push	{r2, r3}
 8003dfa:	b530      	push	{r4, r5, lr}
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <snprintf+0x64>)
 8003dfe:	1e0c      	subs	r4, r1, #0
 8003e00:	681d      	ldr	r5, [r3, #0]
 8003e02:	b09d      	sub	sp, #116	; 0x74
 8003e04:	da08      	bge.n	8003e18 <snprintf+0x20>
 8003e06:	238b      	movs	r3, #139	; 0x8b
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	b01d      	add	sp, #116	; 0x74
 8003e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e14:	b002      	add	sp, #8
 8003e16:	4770      	bx	lr
 8003e18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003e1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e20:	bf14      	ite	ne
 8003e22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e26:	4623      	moveq	r3, r4
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e30:	9002      	str	r0, [sp, #8]
 8003e32:	9006      	str	r0, [sp, #24]
 8003e34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e3a:	ab21      	add	r3, sp, #132	; 0x84
 8003e3c:	a902      	add	r1, sp, #8
 8003e3e:	4628      	mov	r0, r5
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	f000 f80d 	bl	8003e60 <_svfprintf_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	bfbc      	itt	lt
 8003e4a:	238b      	movlt	r3, #139	; 0x8b
 8003e4c:	602b      	strlt	r3, [r5, #0]
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d0dd      	beq.n	8003e0e <snprintf+0x16>
 8003e52:	9b02      	ldr	r3, [sp, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e7d9      	b.n	8003e0e <snprintf+0x16>
 8003e5a:	bf00      	nop
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <_svfprintf_r>:
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	ed2d 8b04 	vpush	{d8-d9}
 8003e68:	b0cf      	sub	sp, #316	; 0x13c
 8003e6a:	4688      	mov	r8, r1
 8003e6c:	4691      	mov	r9, r2
 8003e6e:	461e      	mov	r6, r3
 8003e70:	4682      	mov	sl, r0
 8003e72:	f002 f973 	bl	800615c <_localeconv_r>
 8003e76:	6803      	ldr	r3, [r0, #0]
 8003e78:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc f9b0 	bl	80001e0 <strlen>
 8003e80:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003e84:	900d      	str	r0, [sp, #52]	; 0x34
 8003e86:	0618      	lsls	r0, r3, #24
 8003e88:	d51a      	bpl.n	8003ec0 <_svfprintf_r+0x60>
 8003e8a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003e8e:	b9bb      	cbnz	r3, 8003ec0 <_svfprintf_r+0x60>
 8003e90:	2140      	movs	r1, #64	; 0x40
 8003e92:	4650      	mov	r0, sl
 8003e94:	f002 f96a 	bl	800616c <_malloc_r>
 8003e98:	f8c8 0000 	str.w	r0, [r8]
 8003e9c:	f8c8 0010 	str.w	r0, [r8, #16]
 8003ea0:	b958      	cbnz	r0, 8003eba <_svfprintf_r+0x5a>
 8003ea2:	230c      	movs	r3, #12
 8003ea4:	f8ca 3000 	str.w	r3, [sl]
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	930c      	str	r3, [sp, #48]	; 0x30
 8003eae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003eb0:	b04f      	add	sp, #316	; 0x13c
 8003eb2:	ecbd 8b04 	vpop	{d8-d9}
 8003eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	f8c8 3014 	str.w	r3, [r8, #20]
 8003ec0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8004110 <_svfprintf_r+0x2b0>
 8003ec4:	2500      	movs	r5, #0
 8003ec6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8003eca:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003ece:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8003ed2:	ac25      	add	r4, sp, #148	; 0x94
 8003ed4:	9422      	str	r4, [sp, #136]	; 0x88
 8003ed6:	9505      	str	r5, [sp, #20]
 8003ed8:	950a      	str	r5, [sp, #40]	; 0x28
 8003eda:	9512      	str	r5, [sp, #72]	; 0x48
 8003edc:	9514      	str	r5, [sp, #80]	; 0x50
 8003ede:	950c      	str	r5, [sp, #48]	; 0x30
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ee8:	b10a      	cbz	r2, 8003eee <_svfprintf_r+0x8e>
 8003eea:	2a25      	cmp	r2, #37	; 0x25
 8003eec:	d1f9      	bne.n	8003ee2 <_svfprintf_r+0x82>
 8003eee:	ebb5 0709 	subs.w	r7, r5, r9
 8003ef2:	d00d      	beq.n	8003f10 <_svfprintf_r+0xb0>
 8003ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003ef6:	443b      	add	r3, r7
 8003ef8:	9324      	str	r3, [sp, #144]	; 0x90
 8003efa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003efc:	3301      	adds	r3, #1
 8003efe:	2b07      	cmp	r3, #7
 8003f00:	e9c4 9700 	strd	r9, r7, [r4]
 8003f04:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f06:	dc79      	bgt.n	8003ffc <_svfprintf_r+0x19c>
 8003f08:	3408      	adds	r4, #8
 8003f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f0c:	443b      	add	r3, r7
 8003f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f10:	782b      	ldrb	r3, [r5, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f001 8148 	beq.w	80051a8 <_svfprintf_r+0x1348>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	9204      	str	r2, [sp, #16]
 8003f20:	3501      	adds	r5, #1
 8003f22:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8003f26:	9310      	str	r3, [sp, #64]	; 0x40
 8003f28:	469b      	mov	fp, r3
 8003f2a:	270a      	movs	r7, #10
 8003f2c:	222b      	movs	r2, #43	; 0x2b
 8003f2e:	462b      	mov	r3, r5
 8003f30:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003f34:	9106      	str	r1, [sp, #24]
 8003f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f38:	9b06      	ldr	r3, [sp, #24]
 8003f3a:	3b20      	subs	r3, #32
 8003f3c:	2b5a      	cmp	r3, #90	; 0x5a
 8003f3e:	f200 85bf 	bhi.w	8004ac0 <_svfprintf_r+0xc60>
 8003f42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f46:	007e      	.short	0x007e
 8003f48:	05bd05bd 	.word	0x05bd05bd
 8003f4c:	05bd0086 	.word	0x05bd0086
 8003f50:	05bd05bd 	.word	0x05bd05bd
 8003f54:	05bd0065 	.word	0x05bd0065
 8003f58:	008905bd 	.word	0x008905bd
 8003f5c:	05bd0093 	.word	0x05bd0093
 8003f60:	00960090 	.word	0x00960090
 8003f64:	00b305bd 	.word	0x00b305bd
 8003f68:	00b600b6 	.word	0x00b600b6
 8003f6c:	00b600b6 	.word	0x00b600b6
 8003f70:	00b600b6 	.word	0x00b600b6
 8003f74:	00b600b6 	.word	0x00b600b6
 8003f78:	05bd00b6 	.word	0x05bd00b6
 8003f7c:	05bd05bd 	.word	0x05bd05bd
 8003f80:	05bd05bd 	.word	0x05bd05bd
 8003f84:	05bd05bd 	.word	0x05bd05bd
 8003f88:	05bd012c 	.word	0x05bd012c
 8003f8c:	00fc00e9 	.word	0x00fc00e9
 8003f90:	012c012c 	.word	0x012c012c
 8003f94:	05bd012c 	.word	0x05bd012c
 8003f98:	05bd05bd 	.word	0x05bd05bd
 8003f9c:	00c605bd 	.word	0x00c605bd
 8003fa0:	05bd05bd 	.word	0x05bd05bd
 8003fa4:	05bd0498 	.word	0x05bd0498
 8003fa8:	05bd05bd 	.word	0x05bd05bd
 8003fac:	05bd04e2 	.word	0x05bd04e2
 8003fb0:	05bd0503 	.word	0x05bd0503
 8003fb4:	052505bd 	.word	0x052505bd
 8003fb8:	05bd05bd 	.word	0x05bd05bd
 8003fbc:	05bd05bd 	.word	0x05bd05bd
 8003fc0:	05bd05bd 	.word	0x05bd05bd
 8003fc4:	05bd05bd 	.word	0x05bd05bd
 8003fc8:	05bd012c 	.word	0x05bd012c
 8003fcc:	00fe00e9 	.word	0x00fe00e9
 8003fd0:	012c012c 	.word	0x012c012c
 8003fd4:	00c9012c 	.word	0x00c9012c
 8003fd8:	00dd00fe 	.word	0x00dd00fe
 8003fdc:	00d605bd 	.word	0x00d605bd
 8003fe0:	047305bd 	.word	0x047305bd
 8003fe4:	04d0049a 	.word	0x04d0049a
 8003fe8:	05bd00dd 	.word	0x05bd00dd
 8003fec:	007c04e2 	.word	0x007c04e2
 8003ff0:	05bd0505 	.word	0x05bd0505
 8003ff4:	054405bd 	.word	0x054405bd
 8003ff8:	007c05bd 	.word	0x007c05bd
 8003ffc:	aa22      	add	r2, sp, #136	; 0x88
 8003ffe:	4641      	mov	r1, r8
 8004000:	4650      	mov	r0, sl
 8004002:	f002 fe9a 	bl	8006d3a <__ssprint_r>
 8004006:	2800      	cmp	r0, #0
 8004008:	f040 8137 	bne.w	800427a <_svfprintf_r+0x41a>
 800400c:	ac25      	add	r4, sp, #148	; 0x94
 800400e:	e77c      	b.n	8003f0a <_svfprintf_r+0xaa>
 8004010:	4650      	mov	r0, sl
 8004012:	f002 f8a3 	bl	800615c <_localeconv_r>
 8004016:	6843      	ldr	r3, [r0, #4]
 8004018:	9314      	str	r3, [sp, #80]	; 0x50
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc f8e0 	bl	80001e0 <strlen>
 8004020:	9012      	str	r0, [sp, #72]	; 0x48
 8004022:	4650      	mov	r0, sl
 8004024:	f002 f89a 	bl	800615c <_localeconv_r>
 8004028:	6883      	ldr	r3, [r0, #8]
 800402a:	930a      	str	r3, [sp, #40]	; 0x28
 800402c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800402e:	222b      	movs	r2, #43	; 0x2b
 8004030:	b12b      	cbz	r3, 800403e <_svfprintf_r+0x1de>
 8004032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004034:	b11b      	cbz	r3, 800403e <_svfprintf_r+0x1de>
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b10b      	cbz	r3, 800403e <_svfprintf_r+0x1de>
 800403a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800403e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004040:	e775      	b.n	8003f2e <_svfprintf_r+0xce>
 8004042:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f9      	bne.n	800403e <_svfprintf_r+0x1de>
 800404a:	2320      	movs	r3, #32
 800404c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004050:	e7f5      	b.n	800403e <_svfprintf_r+0x1de>
 8004052:	f04b 0b01 	orr.w	fp, fp, #1
 8004056:	e7f2      	b.n	800403e <_svfprintf_r+0x1de>
 8004058:	f856 3b04 	ldr.w	r3, [r6], #4
 800405c:	9310      	str	r3, [sp, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	daed      	bge.n	800403e <_svfprintf_r+0x1de>
 8004062:	425b      	negs	r3, r3
 8004064:	9310      	str	r3, [sp, #64]	; 0x40
 8004066:	f04b 0b04 	orr.w	fp, fp, #4
 800406a:	e7e8      	b.n	800403e <_svfprintf_r+0x1de>
 800406c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8004070:	e7e5      	b.n	800403e <_svfprintf_r+0x1de>
 8004072:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004074:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004078:	9306      	str	r3, [sp, #24]
 800407a:	2b2a      	cmp	r3, #42	; 0x2a
 800407c:	d113      	bne.n	80040a6 <_svfprintf_r+0x246>
 800407e:	f856 0b04 	ldr.w	r0, [r6], #4
 8004082:	950b      	str	r5, [sp, #44]	; 0x2c
 8004084:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8004088:	9304      	str	r3, [sp, #16]
 800408a:	e7d8      	b.n	800403e <_svfprintf_r+0x1de>
 800408c:	9904      	ldr	r1, [sp, #16]
 800408e:	fb07 3301 	mla	r3, r7, r1, r3
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004098:	9306      	str	r3, [sp, #24]
 800409a:	9b06      	ldr	r3, [sp, #24]
 800409c:	3b30      	subs	r3, #48	; 0x30
 800409e:	2b09      	cmp	r3, #9
 80040a0:	d9f4      	bls.n	800408c <_svfprintf_r+0x22c>
 80040a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80040a4:	e748      	b.n	8003f38 <_svfprintf_r+0xd8>
 80040a6:	2300      	movs	r3, #0
 80040a8:	9304      	str	r3, [sp, #16]
 80040aa:	e7f6      	b.n	800409a <_svfprintf_r+0x23a>
 80040ac:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80040b0:	e7c5      	b.n	800403e <_svfprintf_r+0x1de>
 80040b2:	2300      	movs	r3, #0
 80040b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80040b6:	9310      	str	r3, [sp, #64]	; 0x40
 80040b8:	9b06      	ldr	r3, [sp, #24]
 80040ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040bc:	3b30      	subs	r3, #48	; 0x30
 80040be:	fb07 3301 	mla	r3, r7, r1, r3
 80040c2:	9310      	str	r3, [sp, #64]	; 0x40
 80040c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040c8:	9306      	str	r3, [sp, #24]
 80040ca:	3b30      	subs	r3, #48	; 0x30
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d9f3      	bls.n	80040b8 <_svfprintf_r+0x258>
 80040d0:	e7e7      	b.n	80040a2 <_svfprintf_r+0x242>
 80040d2:	f04b 0b08 	orr.w	fp, fp, #8
 80040d6:	e7b2      	b.n	800403e <_svfprintf_r+0x1de>
 80040d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b68      	cmp	r3, #104	; 0x68
 80040de:	bf01      	itttt	eq
 80040e0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80040e2:	3301      	addeq	r3, #1
 80040e4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80040e6:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80040ea:	bf18      	it	ne
 80040ec:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80040f0:	e7a5      	b.n	800403e <_svfprintf_r+0x1de>
 80040f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b6c      	cmp	r3, #108	; 0x6c
 80040f8:	d105      	bne.n	8004106 <_svfprintf_r+0x2a6>
 80040fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040fc:	3301      	adds	r3, #1
 80040fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004100:	f04b 0b20 	orr.w	fp, fp, #32
 8004104:	e79b      	b.n	800403e <_svfprintf_r+0x1de>
 8004106:	f04b 0b10 	orr.w	fp, fp, #16
 800410a:	e798      	b.n	800403e <_svfprintf_r+0x1de>
 800410c:	f3af 8000 	nop.w
	...
 8004118:	4632      	mov	r2, r6
 800411a:	2000      	movs	r0, #0
 800411c:	f852 3b04 	ldr.w	r3, [r2], #4
 8004120:	9207      	str	r2, [sp, #28]
 8004122:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8004126:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800412a:	2301      	movs	r3, #1
 800412c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8004130:	9003      	str	r0, [sp, #12]
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	4606      	mov	r6, r0
 8004136:	4605      	mov	r5, r0
 8004138:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800413c:	e1bc      	b.n	80044b8 <_svfprintf_r+0x658>
 800413e:	f04b 0b10 	orr.w	fp, fp, #16
 8004142:	f01b 0f20 	tst.w	fp, #32
 8004146:	d012      	beq.n	800416e <_svfprintf_r+0x30e>
 8004148:	1df3      	adds	r3, r6, #7
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	461a      	mov	r2, r3
 8004150:	685d      	ldr	r5, [r3, #4]
 8004152:	f852 6b08 	ldr.w	r6, [r2], #8
 8004156:	9207      	str	r2, [sp, #28]
 8004158:	2d00      	cmp	r5, #0
 800415a:	da06      	bge.n	800416a <_svfprintf_r+0x30a>
 800415c:	4276      	negs	r6, r6
 800415e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004162:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8004166:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800416a:	2301      	movs	r3, #1
 800416c:	e396      	b.n	800489c <_svfprintf_r+0xa3c>
 800416e:	4633      	mov	r3, r6
 8004170:	f01b 0f10 	tst.w	fp, #16
 8004174:	f853 5b04 	ldr.w	r5, [r3], #4
 8004178:	9307      	str	r3, [sp, #28]
 800417a:	d002      	beq.n	8004182 <_svfprintf_r+0x322>
 800417c:	462e      	mov	r6, r5
 800417e:	17ed      	asrs	r5, r5, #31
 8004180:	e7ea      	b.n	8004158 <_svfprintf_r+0x2f8>
 8004182:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004186:	d003      	beq.n	8004190 <_svfprintf_r+0x330>
 8004188:	b22e      	sxth	r6, r5
 800418a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800418e:	e7e3      	b.n	8004158 <_svfprintf_r+0x2f8>
 8004190:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8004194:	d0f2      	beq.n	800417c <_svfprintf_r+0x31c>
 8004196:	b26e      	sxtb	r6, r5
 8004198:	f345 15c0 	sbfx	r5, r5, #7, #1
 800419c:	e7dc      	b.n	8004158 <_svfprintf_r+0x2f8>
 800419e:	3607      	adds	r6, #7
 80041a0:	f026 0307 	bic.w	r3, r6, #7
 80041a4:	ecb3 7b02 	vldmia	r3!, {d7}
 80041a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80041ac:	9307      	str	r3, [sp, #28]
 80041ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b0:	ee09 3a10 	vmov	s18, r3
 80041b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ba:	ee09 3a90 	vmov	s19, r3
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	4b3a      	ldr	r3, [pc, #232]	; (80042ac <_svfprintf_r+0x44c>)
 80041c4:	ec51 0b19 	vmov	r0, r1, d9
 80041c8:	f7fc fcb8 	bl	8000b3c <__aeabi_dcmpun>
 80041cc:	bb10      	cbnz	r0, 8004214 <_svfprintf_r+0x3b4>
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <_svfprintf_r+0x44c>)
 80041d0:	ec51 0b19 	vmov	r0, r1, d9
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	f7fc fc92 	bl	8000b00 <__aeabi_dcmple>
 80041dc:	b9d0      	cbnz	r0, 8004214 <_svfprintf_r+0x3b4>
 80041de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041e2:	2200      	movs	r2, #0
 80041e4:	2300      	movs	r3, #0
 80041e6:	f7fc fc81 	bl	8000aec <__aeabi_dcmplt>
 80041ea:	b110      	cbz	r0, 80041f2 <_svfprintf_r+0x392>
 80041ec:	232d      	movs	r3, #45	; 0x2d
 80041ee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80041f2:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <_svfprintf_r+0x450>)
 80041f4:	482f      	ldr	r0, [pc, #188]	; (80042b4 <_svfprintf_r+0x454>)
 80041f6:	9b06      	ldr	r3, [sp, #24]
 80041f8:	2100      	movs	r1, #0
 80041fa:	2b47      	cmp	r3, #71	; 0x47
 80041fc:	bfd4      	ite	le
 80041fe:	4691      	movle	r9, r2
 8004200:	4681      	movgt	r9, r0
 8004202:	2303      	movs	r3, #3
 8004204:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8004208:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800420c:	2600      	movs	r6, #0
 800420e:	4633      	mov	r3, r6
 8004210:	f001 b800 	b.w	8005214 <_svfprintf_r+0x13b4>
 8004214:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f7fc fc8e 	bl	8000b3c <__aeabi_dcmpun>
 8004220:	b140      	cbz	r0, 8004234 <_svfprintf_r+0x3d4>
 8004222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <_svfprintf_r+0x458>)
 8004226:	4825      	ldr	r0, [pc, #148]	; (80042bc <_svfprintf_r+0x45c>)
 8004228:	2b00      	cmp	r3, #0
 800422a:	bfbc      	itt	lt
 800422c:	232d      	movlt	r3, #45	; 0x2d
 800422e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8004232:	e7e0      	b.n	80041f6 <_svfprintf_r+0x396>
 8004234:	9b06      	ldr	r3, [sp, #24]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	2b41      	cmp	r3, #65	; 0x41
 800423c:	9308      	str	r3, [sp, #32]
 800423e:	d125      	bne.n	800428c <_svfprintf_r+0x42c>
 8004240:	2330      	movs	r3, #48	; 0x30
 8004242:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8004246:	9b06      	ldr	r3, [sp, #24]
 8004248:	2b61      	cmp	r3, #97	; 0x61
 800424a:	bf0c      	ite	eq
 800424c:	2378      	moveq	r3, #120	; 0x78
 800424e:	2358      	movne	r3, #88	; 0x58
 8004250:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8004254:	9b04      	ldr	r3, [sp, #16]
 8004256:	2b63      	cmp	r3, #99	; 0x63
 8004258:	f04b 0b02 	orr.w	fp, fp, #2
 800425c:	dd30      	ble.n	80042c0 <_svfprintf_r+0x460>
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	4650      	mov	r0, sl
 8004262:	f001 ff83 	bl	800616c <_malloc_r>
 8004266:	4681      	mov	r9, r0
 8004268:	2800      	cmp	r0, #0
 800426a:	f040 81fd 	bne.w	8004668 <_svfprintf_r+0x808>
 800426e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004276:	f8a8 300c 	strh.w	r3, [r8, #12]
 800427a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800427e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004284:	bf18      	it	ne
 8004286:	f04f 33ff 	movne.w	r3, #4294967295
 800428a:	e60f      	b.n	8003eac <_svfprintf_r+0x4c>
 800428c:	9b04      	ldr	r3, [sp, #16]
 800428e:	3301      	adds	r3, #1
 8004290:	f000 81ec 	beq.w	800466c <_svfprintf_r+0x80c>
 8004294:	9b08      	ldr	r3, [sp, #32]
 8004296:	2b47      	cmp	r3, #71	; 0x47
 8004298:	f040 81eb 	bne.w	8004672 <_svfprintf_r+0x812>
 800429c:	9b04      	ldr	r3, [sp, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 81e7 	bne.w	8004672 <_svfprintf_r+0x812>
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	2301      	movs	r3, #1
 80042a8:	9304      	str	r3, [sp, #16]
 80042aa:	e00c      	b.n	80042c6 <_svfprintf_r+0x466>
 80042ac:	7fefffff 	.word	0x7fefffff
 80042b0:	080089c8 	.word	0x080089c8
 80042b4:	080089cc 	.word	0x080089cc
 80042b8:	080089d0 	.word	0x080089d0
 80042bc:	080089d4 	.word	0x080089d4
 80042c0:	9003      	str	r0, [sp, #12]
 80042c2:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 80042c6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80042ca:	9311      	str	r3, [sp, #68]	; 0x44
 80042cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f280 81d1 	bge.w	8004676 <_svfprintf_r+0x816>
 80042d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042d6:	ee08 3a10 	vmov	s16, r3
 80042da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80042e0:	ee08 3a90 	vmov	s17, r3
 80042e4:	232d      	movs	r3, #45	; 0x2d
 80042e6:	9318      	str	r3, [sp, #96]	; 0x60
 80042e8:	9b08      	ldr	r3, [sp, #32]
 80042ea:	2b41      	cmp	r3, #65	; 0x41
 80042ec:	f040 81e1 	bne.w	80046b2 <_svfprintf_r+0x852>
 80042f0:	eeb0 0a48 	vmov.f32	s0, s16
 80042f4:	eef0 0a68 	vmov.f32	s1, s17
 80042f8:	a81c      	add	r0, sp, #112	; 0x70
 80042fa:	f002 fcc3 	bl	8006c84 <frexp>
 80042fe:	2200      	movs	r2, #0
 8004300:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004304:	ec51 0b10 	vmov	r0, r1, d0
 8004308:	f7fc f97e 	bl	8000608 <__aeabi_dmul>
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	4606      	mov	r6, r0
 8004312:	460f      	mov	r7, r1
 8004314:	f7fc fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004318:	b108      	cbz	r0, 800431e <_svfprintf_r+0x4be>
 800431a:	2301      	movs	r3, #1
 800431c:	931c      	str	r3, [sp, #112]	; 0x70
 800431e:	4ba7      	ldr	r3, [pc, #668]	; (80045bc <_svfprintf_r+0x75c>)
 8004320:	4aa7      	ldr	r2, [pc, #668]	; (80045c0 <_svfprintf_r+0x760>)
 8004322:	9906      	ldr	r1, [sp, #24]
 8004324:	2961      	cmp	r1, #97	; 0x61
 8004326:	bf18      	it	ne
 8004328:	461a      	movne	r2, r3
 800432a:	9b04      	ldr	r3, [sp, #16]
 800432c:	9217      	str	r2, [sp, #92]	; 0x5c
 800432e:	3b01      	subs	r3, #1
 8004330:	9305      	str	r3, [sp, #20]
 8004332:	464d      	mov	r5, r9
 8004334:	4ba3      	ldr	r3, [pc, #652]	; (80045c4 <_svfprintf_r+0x764>)
 8004336:	2200      	movs	r2, #0
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fc f964 	bl	8000608 <__aeabi_dmul>
 8004340:	460f      	mov	r7, r1
 8004342:	4606      	mov	r6, r0
 8004344:	f7fc fc10 	bl	8000b68 <__aeabi_d2iz>
 8004348:	9019      	str	r0, [sp, #100]	; 0x64
 800434a:	f7fc f8f3 	bl	8000534 <__aeabi_i2d>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4630      	mov	r0, r6
 8004354:	4639      	mov	r1, r7
 8004356:	f7fb ff9f 	bl	8000298 <__aeabi_dsub>
 800435a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800435c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	f805 3b01 	strb.w	r3, [r5], #1
 8004364:	9b05      	ldr	r3, [sp, #20]
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	4606      	mov	r6, r0
 800436c:	460f      	mov	r7, r1
 800436e:	d007      	beq.n	8004380 <_svfprintf_r+0x520>
 8004370:	3b01      	subs	r3, #1
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2300      	movs	r3, #0
 8004378:	f7fc fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800437c:	2800      	cmp	r0, #0
 800437e:	d0d9      	beq.n	8004334 <_svfprintf_r+0x4d4>
 8004380:	4b91      	ldr	r3, [pc, #580]	; (80045c8 <_svfprintf_r+0x768>)
 8004382:	2200      	movs	r2, #0
 8004384:	4630      	mov	r0, r6
 8004386:	4639      	mov	r1, r7
 8004388:	f7fc fbce 	bl	8000b28 <__aeabi_dcmpgt>
 800438c:	b960      	cbnz	r0, 80043a8 <_svfprintf_r+0x548>
 800438e:	4b8e      	ldr	r3, [pc, #568]	; (80045c8 <_svfprintf_r+0x768>)
 8004390:	2200      	movs	r2, #0
 8004392:	4630      	mov	r0, r6
 8004394:	4639      	mov	r1, r7
 8004396:	f7fc fb9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800439a:	2800      	cmp	r0, #0
 800439c:	f000 8184 	beq.w	80046a8 <_svfprintf_r+0x848>
 80043a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043a2:	07db      	lsls	r3, r3, #31
 80043a4:	f140 8180 	bpl.w	80046a8 <_svfprintf_r+0x848>
 80043a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043aa:	9520      	str	r5, [sp, #128]	; 0x80
 80043ac:	7bd9      	ldrb	r1, [r3, #15]
 80043ae:	2030      	movs	r0, #48	; 0x30
 80043b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043b2:	1e53      	subs	r3, r2, #1
 80043b4:	9320      	str	r3, [sp, #128]	; 0x80
 80043b6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80043ba:	428b      	cmp	r3, r1
 80043bc:	f000 8163 	beq.w	8004686 <_svfprintf_r+0x826>
 80043c0:	2b39      	cmp	r3, #57	; 0x39
 80043c2:	bf0b      	itete	eq
 80043c4:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80043c6:	3301      	addne	r3, #1
 80043c8:	7a9b      	ldrbeq	r3, [r3, #10]
 80043ca:	b2db      	uxtbne	r3, r3
 80043cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043d0:	eba5 0309 	sub.w	r3, r5, r9
 80043d4:	9305      	str	r3, [sp, #20]
 80043d6:	9b08      	ldr	r3, [sp, #32]
 80043d8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80043da:	2b47      	cmp	r3, #71	; 0x47
 80043dc:	f040 81b1 	bne.w	8004742 <_svfprintf_r+0x8e2>
 80043e0:	1cef      	adds	r7, r5, #3
 80043e2:	db03      	blt.n	80043ec <_svfprintf_r+0x58c>
 80043e4:	9b04      	ldr	r3, [sp, #16]
 80043e6:	42ab      	cmp	r3, r5
 80043e8:	f280 81d6 	bge.w	8004798 <_svfprintf_r+0x938>
 80043ec:	9b06      	ldr	r3, [sp, #24]
 80043ee:	3b02      	subs	r3, #2
 80043f0:	9306      	str	r3, [sp, #24]
 80043f2:	9906      	ldr	r1, [sp, #24]
 80043f4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80043f8:	f021 0120 	bic.w	r1, r1, #32
 80043fc:	2941      	cmp	r1, #65	; 0x41
 80043fe:	bf08      	it	eq
 8004400:	320f      	addeq	r2, #15
 8004402:	f105 33ff 	add.w	r3, r5, #4294967295
 8004406:	bf06      	itte	eq
 8004408:	b2d2      	uxtbeq	r2, r2
 800440a:	2101      	moveq	r1, #1
 800440c:	2100      	movne	r1, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	931c      	str	r3, [sp, #112]	; 0x70
 8004412:	bfb8      	it	lt
 8004414:	f1c5 0301 	rsblt	r3, r5, #1
 8004418:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800441c:	bfb4      	ite	lt
 800441e:	222d      	movlt	r2, #45	; 0x2d
 8004420:	222b      	movge	r2, #43	; 0x2b
 8004422:	2b09      	cmp	r3, #9
 8004424:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8004428:	f340 81a4 	ble.w	8004774 <_svfprintf_r+0x914>
 800442c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8004430:	260a      	movs	r6, #10
 8004432:	4611      	mov	r1, r2
 8004434:	fb93 f5f6 	sdiv	r5, r3, r6
 8004438:	fb06 3015 	mls	r0, r6, r5, r3
 800443c:	3030      	adds	r0, #48	; 0x30
 800443e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8004442:	4618      	mov	r0, r3
 8004444:	2863      	cmp	r0, #99	; 0x63
 8004446:	f102 32ff 	add.w	r2, r2, #4294967295
 800444a:	462b      	mov	r3, r5
 800444c:	dcf1      	bgt.n	8004432 <_svfprintf_r+0x5d2>
 800444e:	3330      	adds	r3, #48	; 0x30
 8004450:	1e88      	subs	r0, r1, #2
 8004452:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004456:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800445a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800445e:	4603      	mov	r3, r0
 8004460:	42ab      	cmp	r3, r5
 8004462:	f0c0 8182 	bcc.w	800476a <_svfprintf_r+0x90a>
 8004466:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800446a:	1a52      	subs	r2, r2, r1
 800446c:	42a8      	cmp	r0, r5
 800446e:	bf88      	it	hi
 8004470:	2200      	movhi	r2, #0
 8004472:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8004476:	441a      	add	r2, r3
 8004478:	ab1e      	add	r3, sp, #120	; 0x78
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	9a05      	ldr	r2, [sp, #20]
 800447e:	9315      	str	r3, [sp, #84]	; 0x54
 8004480:	2a01      	cmp	r2, #1
 8004482:	4413      	add	r3, r2
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	dc02      	bgt.n	800448e <_svfprintf_r+0x62e>
 8004488:	f01b 0f01 	tst.w	fp, #1
 800448c:	d003      	beq.n	8004496 <_svfprintf_r+0x636>
 800448e:	9b04      	ldr	r3, [sp, #16]
 8004490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004492:	4413      	add	r3, r2
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	9311      	str	r3, [sp, #68]	; 0x44
 80044a0:	2300      	movs	r3, #0
 80044a2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80044a6:	461d      	mov	r5, r3
 80044a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80044aa:	b113      	cbz	r3, 80044b2 <_svfprintf_r+0x652>
 80044ac:	232d      	movs	r3, #45	; 0x2d
 80044ae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80044b2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80044b6:	2600      	movs	r6, #0
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	42b3      	cmp	r3, r6
 80044bc:	bfb8      	it	lt
 80044be:	4633      	movlt	r3, r6
 80044c0:	9311      	str	r3, [sp, #68]	; 0x44
 80044c2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80044c6:	b113      	cbz	r3, 80044ce <_svfprintf_r+0x66e>
 80044c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044ca:	3301      	adds	r3, #1
 80044cc:	9311      	str	r3, [sp, #68]	; 0x44
 80044ce:	f01b 0302 	ands.w	r3, fp, #2
 80044d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80044d4:	bf1e      	ittt	ne
 80044d6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80044d8:	3302      	addne	r3, #2
 80044da:	9311      	strne	r3, [sp, #68]	; 0x44
 80044dc:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80044e0:	9318      	str	r3, [sp, #96]	; 0x60
 80044e2:	d11f      	bne.n	8004524 <_svfprintf_r+0x6c4>
 80044e4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80044e8:	1a9f      	subs	r7, r3, r2
 80044ea:	2f00      	cmp	r7, #0
 80044ec:	dd1a      	ble.n	8004524 <_svfprintf_r+0x6c4>
 80044ee:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80044f2:	4836      	ldr	r0, [pc, #216]	; (80045cc <_svfprintf_r+0x76c>)
 80044f4:	6020      	str	r0, [r4, #0]
 80044f6:	2f10      	cmp	r7, #16
 80044f8:	f103 0301 	add.w	r3, r3, #1
 80044fc:	f104 0108 	add.w	r1, r4, #8
 8004500:	f300 82ed 	bgt.w	8004ade <_svfprintf_r+0xc7e>
 8004504:	6067      	str	r7, [r4, #4]
 8004506:	2b07      	cmp	r3, #7
 8004508:	4417      	add	r7, r2
 800450a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800450e:	f340 82f9 	ble.w	8004b04 <_svfprintf_r+0xca4>
 8004512:	aa22      	add	r2, sp, #136	; 0x88
 8004514:	4641      	mov	r1, r8
 8004516:	4650      	mov	r0, sl
 8004518:	f002 fc0f 	bl	8006d3a <__ssprint_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	f040 8621 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004522:	ac25      	add	r4, sp, #148	; 0x94
 8004524:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004528:	b173      	cbz	r3, 8004548 <_svfprintf_r+0x6e8>
 800452a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	2301      	movs	r3, #1
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004536:	3301      	adds	r3, #1
 8004538:	9324      	str	r3, [sp, #144]	; 0x90
 800453a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800453c:	3301      	adds	r3, #1
 800453e:	2b07      	cmp	r3, #7
 8004540:	9323      	str	r3, [sp, #140]	; 0x8c
 8004542:	f300 82e1 	bgt.w	8004b08 <_svfprintf_r+0xca8>
 8004546:	3408      	adds	r4, #8
 8004548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800454a:	b16b      	cbz	r3, 8004568 <_svfprintf_r+0x708>
 800454c:	ab1b      	add	r3, sp, #108	; 0x6c
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	2302      	movs	r3, #2
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004556:	3302      	adds	r3, #2
 8004558:	9324      	str	r3, [sp, #144]	; 0x90
 800455a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800455c:	3301      	adds	r3, #1
 800455e:	2b07      	cmp	r3, #7
 8004560:	9323      	str	r3, [sp, #140]	; 0x8c
 8004562:	f300 82db 	bgt.w	8004b1c <_svfprintf_r+0xcbc>
 8004566:	3408      	adds	r4, #8
 8004568:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d11f      	bne.n	80045ae <_svfprintf_r+0x74e>
 800456e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8004572:	1a9f      	subs	r7, r3, r2
 8004574:	2f00      	cmp	r7, #0
 8004576:	dd1a      	ble.n	80045ae <_svfprintf_r+0x74e>
 8004578:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800457c:	4814      	ldr	r0, [pc, #80]	; (80045d0 <_svfprintf_r+0x770>)
 800457e:	6020      	str	r0, [r4, #0]
 8004580:	2f10      	cmp	r7, #16
 8004582:	f103 0301 	add.w	r3, r3, #1
 8004586:	f104 0108 	add.w	r1, r4, #8
 800458a:	f300 82d1 	bgt.w	8004b30 <_svfprintf_r+0xcd0>
 800458e:	6067      	str	r7, [r4, #4]
 8004590:	2b07      	cmp	r3, #7
 8004592:	4417      	add	r7, r2
 8004594:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8004598:	f340 82dd 	ble.w	8004b56 <_svfprintf_r+0xcf6>
 800459c:	aa22      	add	r2, sp, #136	; 0x88
 800459e:	4641      	mov	r1, r8
 80045a0:	4650      	mov	r0, sl
 80045a2:	f002 fbca 	bl	8006d3a <__ssprint_r>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f040 85dc 	bne.w	8005164 <_svfprintf_r+0x1304>
 80045ac:	ac25      	add	r4, sp, #148	; 0x94
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	1af6      	subs	r6, r6, r3
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	dd28      	ble.n	8004608 <_svfprintf_r+0x7a8>
 80045b6:	4f06      	ldr	r7, [pc, #24]	; (80045d0 <_svfprintf_r+0x770>)
 80045b8:	e00c      	b.n	80045d4 <_svfprintf_r+0x774>
 80045ba:	bf00      	nop
 80045bc:	080089e9 	.word	0x080089e9
 80045c0:	080089d8 	.word	0x080089d8
 80045c4:	40300000 	.word	0x40300000
 80045c8:	3fe00000 	.word	0x3fe00000
 80045cc:	080089fc 	.word	0x080089fc
 80045d0:	08008a0c 	.word	0x08008a0c
 80045d4:	6027      	str	r7, [r4, #0]
 80045d6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80045da:	2e10      	cmp	r6, #16
 80045dc:	f103 0301 	add.w	r3, r3, #1
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	f300 82b9 	bgt.w	8004b5a <_svfprintf_r+0xcfa>
 80045e8:	6066      	str	r6, [r4, #4]
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	4416      	add	r6, r2
 80045ee:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80045f2:	f340 82c5 	ble.w	8004b80 <_svfprintf_r+0xd20>
 80045f6:	aa22      	add	r2, sp, #136	; 0x88
 80045f8:	4641      	mov	r1, r8
 80045fa:	4650      	mov	r0, sl
 80045fc:	f002 fb9d 	bl	8006d3a <__ssprint_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	f040 85af 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004606:	ac25      	add	r4, sp, #148	; 0x94
 8004608:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800460c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800460e:	f040 82bd 	bne.w	8004b8c <_svfprintf_r+0xd2c>
 8004612:	9b04      	ldr	r3, [sp, #16]
 8004614:	f8c4 9000 	str.w	r9, [r4]
 8004618:	441e      	add	r6, r3
 800461a:	6063      	str	r3, [r4, #4]
 800461c:	9624      	str	r6, [sp, #144]	; 0x90
 800461e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004620:	3301      	adds	r3, #1
 8004622:	2b07      	cmp	r3, #7
 8004624:	9323      	str	r3, [sp, #140]	; 0x8c
 8004626:	f300 82f6 	bgt.w	8004c16 <_svfprintf_r+0xdb6>
 800462a:	3408      	adds	r4, #8
 800462c:	f01b 0f04 	tst.w	fp, #4
 8004630:	f040 857a 	bne.w	8005128 <_svfprintf_r+0x12c8>
 8004634:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8004638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800463a:	428a      	cmp	r2, r1
 800463c:	bfac      	ite	ge
 800463e:	189b      	addge	r3, r3, r2
 8004640:	185b      	addlt	r3, r3, r1
 8004642:	930c      	str	r3, [sp, #48]	; 0x30
 8004644:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004646:	b13b      	cbz	r3, 8004658 <_svfprintf_r+0x7f8>
 8004648:	aa22      	add	r2, sp, #136	; 0x88
 800464a:	4641      	mov	r1, r8
 800464c:	4650      	mov	r0, sl
 800464e:	f002 fb74 	bl	8006d3a <__ssprint_r>
 8004652:	2800      	cmp	r0, #0
 8004654:	f040 8586 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004658:	2300      	movs	r3, #0
 800465a:	9323      	str	r3, [sp, #140]	; 0x8c
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 859c 	bne.w	800519c <_svfprintf_r+0x133c>
 8004664:	ac25      	add	r4, sp, #148	; 0x94
 8004666:	e0ec      	b.n	8004842 <_svfprintf_r+0x9e2>
 8004668:	9003      	str	r0, [sp, #12]
 800466a:	e62c      	b.n	80042c6 <_svfprintf_r+0x466>
 800466c:	9003      	str	r0, [sp, #12]
 800466e:	2306      	movs	r3, #6
 8004670:	e61a      	b.n	80042a8 <_svfprintf_r+0x448>
 8004672:	9003      	str	r0, [sp, #12]
 8004674:	e627      	b.n	80042c6 <_svfprintf_r+0x466>
 8004676:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800467a:	2300      	movs	r3, #0
 800467c:	eeb0 8a47 	vmov.f32	s16, s14
 8004680:	eef0 8a67 	vmov.f32	s17, s15
 8004684:	e62f      	b.n	80042e6 <_svfprintf_r+0x486>
 8004686:	f802 0c01 	strb.w	r0, [r2, #-1]
 800468a:	e691      	b.n	80043b0 <_svfprintf_r+0x550>
 800468c:	f803 0b01 	strb.w	r0, [r3], #1
 8004690:	1aca      	subs	r2, r1, r3
 8004692:	2a00      	cmp	r2, #0
 8004694:	dafa      	bge.n	800468c <_svfprintf_r+0x82c>
 8004696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469a:	3201      	adds	r2, #1
 800469c:	f103 0301 	add.w	r3, r3, #1
 80046a0:	bfb8      	it	lt
 80046a2:	2300      	movlt	r3, #0
 80046a4:	441d      	add	r5, r3
 80046a6:	e693      	b.n	80043d0 <_svfprintf_r+0x570>
 80046a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046aa:	462b      	mov	r3, r5
 80046ac:	18a9      	adds	r1, r5, r2
 80046ae:	2030      	movs	r0, #48	; 0x30
 80046b0:	e7ee      	b.n	8004690 <_svfprintf_r+0x830>
 80046b2:	9b08      	ldr	r3, [sp, #32]
 80046b4:	2b46      	cmp	r3, #70	; 0x46
 80046b6:	d005      	beq.n	80046c4 <_svfprintf_r+0x864>
 80046b8:	2b45      	cmp	r3, #69	; 0x45
 80046ba:	d11b      	bne.n	80046f4 <_svfprintf_r+0x894>
 80046bc:	9b04      	ldr	r3, [sp, #16]
 80046be:	1c5d      	adds	r5, r3, #1
 80046c0:	2102      	movs	r1, #2
 80046c2:	e001      	b.n	80046c8 <_svfprintf_r+0x868>
 80046c4:	9d04      	ldr	r5, [sp, #16]
 80046c6:	2103      	movs	r1, #3
 80046c8:	ab20      	add	r3, sp, #128	; 0x80
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	ab1d      	add	r3, sp, #116	; 0x74
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	462a      	mov	r2, r5
 80046d2:	ab1c      	add	r3, sp, #112	; 0x70
 80046d4:	4650      	mov	r0, sl
 80046d6:	eeb0 0a48 	vmov.f32	s0, s16
 80046da:	eef0 0a68 	vmov.f32	s1, s17
 80046de:	f000 fe3f 	bl	8005360 <_dtoa_r>
 80046e2:	9b08      	ldr	r3, [sp, #32]
 80046e4:	2b47      	cmp	r3, #71	; 0x47
 80046e6:	4681      	mov	r9, r0
 80046e8:	d106      	bne.n	80046f8 <_svfprintf_r+0x898>
 80046ea:	f01b 0f01 	tst.w	fp, #1
 80046ee:	d103      	bne.n	80046f8 <_svfprintf_r+0x898>
 80046f0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80046f2:	e66d      	b.n	80043d0 <_svfprintf_r+0x570>
 80046f4:	9d04      	ldr	r5, [sp, #16]
 80046f6:	e7e3      	b.n	80046c0 <_svfprintf_r+0x860>
 80046f8:	9b08      	ldr	r3, [sp, #32]
 80046fa:	2b46      	cmp	r3, #70	; 0x46
 80046fc:	eb09 0605 	add.w	r6, r9, r5
 8004700:	d10f      	bne.n	8004722 <_svfprintf_r+0x8c2>
 8004702:	f899 3000 	ldrb.w	r3, [r9]
 8004706:	2b30      	cmp	r3, #48	; 0x30
 8004708:	d109      	bne.n	800471e <_svfprintf_r+0x8be>
 800470a:	ec51 0b18 	vmov	r0, r1, d8
 800470e:	2200      	movs	r2, #0
 8004710:	2300      	movs	r3, #0
 8004712:	f7fc f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004716:	b910      	cbnz	r0, 800471e <_svfprintf_r+0x8be>
 8004718:	f1c5 0501 	rsb	r5, r5, #1
 800471c:	951c      	str	r5, [sp, #112]	; 0x70
 800471e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004720:	441e      	add	r6, r3
 8004722:	ec51 0b18 	vmov	r0, r1, d8
 8004726:	2200      	movs	r2, #0
 8004728:	2300      	movs	r3, #0
 800472a:	f7fc f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800472e:	b100      	cbz	r0, 8004732 <_svfprintf_r+0x8d2>
 8004730:	9620      	str	r6, [sp, #128]	; 0x80
 8004732:	2230      	movs	r2, #48	; 0x30
 8004734:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004736:	429e      	cmp	r6, r3
 8004738:	d9da      	bls.n	80046f0 <_svfprintf_r+0x890>
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	9120      	str	r1, [sp, #128]	; 0x80
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e7f8      	b.n	8004734 <_svfprintf_r+0x8d4>
 8004742:	9b08      	ldr	r3, [sp, #32]
 8004744:	2b46      	cmp	r3, #70	; 0x46
 8004746:	f47f ae54 	bne.w	80043f2 <_svfprintf_r+0x592>
 800474a:	9a04      	ldr	r2, [sp, #16]
 800474c:	f00b 0301 	and.w	r3, fp, #1
 8004750:	2d00      	cmp	r5, #0
 8004752:	ea43 0302 	orr.w	r3, r3, r2
 8004756:	dd1a      	ble.n	800478e <_svfprintf_r+0x92e>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d034      	beq.n	80047c6 <_svfprintf_r+0x966>
 800475c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800475e:	18eb      	adds	r3, r5, r3
 8004760:	441a      	add	r2, r3
 8004762:	9204      	str	r2, [sp, #16]
 8004764:	2366      	movs	r3, #102	; 0x66
 8004766:	9306      	str	r3, [sp, #24]
 8004768:	e033      	b.n	80047d2 <_svfprintf_r+0x972>
 800476a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800476e:	f802 6b01 	strb.w	r6, [r2], #1
 8004772:	e675      	b.n	8004460 <_svfprintf_r+0x600>
 8004774:	b941      	cbnz	r1, 8004788 <_svfprintf_r+0x928>
 8004776:	2230      	movs	r2, #48	; 0x30
 8004778:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800477c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004780:	3330      	adds	r3, #48	; 0x30
 8004782:	f802 3b01 	strb.w	r3, [r2], #1
 8004786:	e677      	b.n	8004478 <_svfprintf_r+0x618>
 8004788:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800478c:	e7f8      	b.n	8004780 <_svfprintf_r+0x920>
 800478e:	b1e3      	cbz	r3, 80047ca <_svfprintf_r+0x96a>
 8004790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	3301      	adds	r3, #1
 8004796:	e7e3      	b.n	8004760 <_svfprintf_r+0x900>
 8004798:	9b05      	ldr	r3, [sp, #20]
 800479a:	429d      	cmp	r5, r3
 800479c:	db07      	blt.n	80047ae <_svfprintf_r+0x94e>
 800479e:	f01b 0f01 	tst.w	fp, #1
 80047a2:	d02d      	beq.n	8004800 <_svfprintf_r+0x9a0>
 80047a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a6:	18eb      	adds	r3, r5, r3
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	2367      	movs	r3, #103	; 0x67
 80047ac:	e7db      	b.n	8004766 <_svfprintf_r+0x906>
 80047ae:	9b05      	ldr	r3, [sp, #20]
 80047b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047b2:	2d00      	cmp	r5, #0
 80047b4:	4413      	add	r3, r2
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	dcf7      	bgt.n	80047aa <_svfprintf_r+0x94a>
 80047ba:	9a04      	ldr	r2, [sp, #16]
 80047bc:	f1c5 0301 	rsb	r3, r5, #1
 80047c0:	441a      	add	r2, r3
 80047c2:	9204      	str	r2, [sp, #16]
 80047c4:	e7f1      	b.n	80047aa <_svfprintf_r+0x94a>
 80047c6:	9504      	str	r5, [sp, #16]
 80047c8:	e7cc      	b.n	8004764 <_svfprintf_r+0x904>
 80047ca:	2366      	movs	r3, #102	; 0x66
 80047cc:	9306      	str	r3, [sp, #24]
 80047ce:	2301      	movs	r3, #1
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80047d6:	9309      	str	r3, [sp, #36]	; 0x24
 80047d8:	d025      	beq.n	8004826 <_svfprintf_r+0x9c6>
 80047da:	2300      	movs	r3, #0
 80047dc:	2d00      	cmp	r5, #0
 80047de:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80047e2:	f77f ae61 	ble.w	80044a8 <_svfprintf_r+0x648>
 80047e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2bff      	cmp	r3, #255	; 0xff
 80047ec:	d10a      	bne.n	8004804 <_svfprintf_r+0x9a4>
 80047ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80047f4:	4413      	add	r3, r2
 80047f6:	9a04      	ldr	r2, [sp, #16]
 80047f8:	fb01 2303 	mla	r3, r1, r3, r2
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	e653      	b.n	80044a8 <_svfprintf_r+0x648>
 8004800:	9504      	str	r5, [sp, #16]
 8004802:	e7d2      	b.n	80047aa <_svfprintf_r+0x94a>
 8004804:	42ab      	cmp	r3, r5
 8004806:	daf2      	bge.n	80047ee <_svfprintf_r+0x98e>
 8004808:	1aed      	subs	r5, r5, r3
 800480a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	b133      	cbz	r3, 800481e <_svfprintf_r+0x9be>
 8004810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004812:	3301      	adds	r3, #1
 8004814:	9309      	str	r3, [sp, #36]	; 0x24
 8004816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004818:	3301      	adds	r3, #1
 800481a:	930a      	str	r3, [sp, #40]	; 0x28
 800481c:	e7e3      	b.n	80047e6 <_svfprintf_r+0x986>
 800481e:	9b08      	ldr	r3, [sp, #32]
 8004820:	3301      	adds	r3, #1
 8004822:	9308      	str	r3, [sp, #32]
 8004824:	e7df      	b.n	80047e6 <_svfprintf_r+0x986>
 8004826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004828:	9308      	str	r3, [sp, #32]
 800482a:	e63d      	b.n	80044a8 <_svfprintf_r+0x648>
 800482c:	1d33      	adds	r3, r6, #4
 800482e:	f01b 0f20 	tst.w	fp, #32
 8004832:	9307      	str	r3, [sp, #28]
 8004834:	d00a      	beq.n	800484c <_svfprintf_r+0x9ec>
 8004836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800483c:	17d2      	asrs	r2, r2, #31
 800483e:	e9c3 1200 	strd	r1, r2, [r3]
 8004842:	9e07      	ldr	r6, [sp, #28]
 8004844:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004848:	f7ff bb4a 	b.w	8003ee0 <_svfprintf_r+0x80>
 800484c:	f01b 0f10 	tst.w	fp, #16
 8004850:	d003      	beq.n	800485a <_svfprintf_r+0x9fa>
 8004852:	6833      	ldr	r3, [r6, #0]
 8004854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e7f3      	b.n	8004842 <_svfprintf_r+0x9e2>
 800485a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800485e:	d003      	beq.n	8004868 <_svfprintf_r+0xa08>
 8004860:	6833      	ldr	r3, [r6, #0]
 8004862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	e7ec      	b.n	8004842 <_svfprintf_r+0x9e2>
 8004868:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800486c:	d0f1      	beq.n	8004852 <_svfprintf_r+0x9f2>
 800486e:	6833      	ldr	r3, [r6, #0]
 8004870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e7e5      	b.n	8004842 <_svfprintf_r+0x9e2>
 8004876:	f04b 0b10 	orr.w	fp, fp, #16
 800487a:	f01b 0320 	ands.w	r3, fp, #32
 800487e:	d01f      	beq.n	80048c0 <_svfprintf_r+0xa60>
 8004880:	1df3      	adds	r3, r6, #7
 8004882:	f023 0307 	bic.w	r3, r3, #7
 8004886:	461a      	mov	r2, r3
 8004888:	685d      	ldr	r5, [r3, #4]
 800488a:	f852 6b08 	ldr.w	r6, [r2], #8
 800488e:	9207      	str	r2, [sp, #28]
 8004890:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800489c:	9a04      	ldr	r2, [sp, #16]
 800489e:	3201      	adds	r2, #1
 80048a0:	f000 848d 	beq.w	80051be <_svfprintf_r+0x135e>
 80048a4:	ea56 0205 	orrs.w	r2, r6, r5
 80048a8:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80048ac:	f040 848c 	bne.w	80051c8 <_svfprintf_r+0x1368>
 80048b0:	9a04      	ldr	r2, [sp, #16]
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	f000 80f9 	beq.w	8004aaa <_svfprintf_r+0xc4a>
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 8488 	bne.w	80051ce <_svfprintf_r+0x136e>
 80048be:	e09f      	b.n	8004a00 <_svfprintf_r+0xba0>
 80048c0:	4632      	mov	r2, r6
 80048c2:	f01b 0510 	ands.w	r5, fp, #16
 80048c6:	f852 6b04 	ldr.w	r6, [r2], #4
 80048ca:	9207      	str	r2, [sp, #28]
 80048cc:	d001      	beq.n	80048d2 <_svfprintf_r+0xa72>
 80048ce:	461d      	mov	r5, r3
 80048d0:	e7de      	b.n	8004890 <_svfprintf_r+0xa30>
 80048d2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80048d6:	d001      	beq.n	80048dc <_svfprintf_r+0xa7c>
 80048d8:	b2b6      	uxth	r6, r6
 80048da:	e7d9      	b.n	8004890 <_svfprintf_r+0xa30>
 80048dc:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80048e0:	d0d6      	beq.n	8004890 <_svfprintf_r+0xa30>
 80048e2:	b2f6      	uxtb	r6, r6
 80048e4:	e7f3      	b.n	80048ce <_svfprintf_r+0xa6e>
 80048e6:	4633      	mov	r3, r6
 80048e8:	2278      	movs	r2, #120	; 0x78
 80048ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80048ee:	9307      	str	r3, [sp, #28]
 80048f0:	2330      	movs	r3, #48	; 0x30
 80048f2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80048f6:	4ba3      	ldr	r3, [pc, #652]	; (8004b84 <_svfprintf_r+0xd24>)
 80048f8:	9316      	str	r3, [sp, #88]	; 0x58
 80048fa:	2500      	movs	r5, #0
 80048fc:	f04b 0b02 	orr.w	fp, fp, #2
 8004900:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004904:	2302      	movs	r3, #2
 8004906:	9206      	str	r2, [sp, #24]
 8004908:	e7c5      	b.n	8004896 <_svfprintf_r+0xa36>
 800490a:	4633      	mov	r3, r6
 800490c:	2500      	movs	r5, #0
 800490e:	f853 9b04 	ldr.w	r9, [r3], #4
 8004912:	9307      	str	r3, [sp, #28]
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800491a:	1c58      	adds	r0, r3, #1
 800491c:	d010      	beq.n	8004940 <_svfprintf_r+0xae0>
 800491e:	461a      	mov	r2, r3
 8004920:	4629      	mov	r1, r5
 8004922:	4648      	mov	r0, r9
 8004924:	f7fb fc64 	bl	80001f0 <memchr>
 8004928:	9003      	str	r0, [sp, #12]
 800492a:	2800      	cmp	r0, #0
 800492c:	f000 80d4 	beq.w	8004ad8 <_svfprintf_r+0xc78>
 8004930:	eba0 0309 	sub.w	r3, r0, r9
 8004934:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8004938:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800493c:	462e      	mov	r6, r5
 800493e:	e5bb      	b.n	80044b8 <_svfprintf_r+0x658>
 8004940:	4648      	mov	r0, r9
 8004942:	f7fb fc4d 	bl	80001e0 <strlen>
 8004946:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800494a:	e45f      	b.n	800420c <_svfprintf_r+0x3ac>
 800494c:	f04b 0b10 	orr.w	fp, fp, #16
 8004950:	f01b 0320 	ands.w	r3, fp, #32
 8004954:	d009      	beq.n	800496a <_svfprintf_r+0xb0a>
 8004956:	1df3      	adds	r3, r6, #7
 8004958:	f023 0307 	bic.w	r3, r3, #7
 800495c:	461a      	mov	r2, r3
 800495e:	685d      	ldr	r5, [r3, #4]
 8004960:	f852 6b08 	ldr.w	r6, [r2], #8
 8004964:	9207      	str	r2, [sp, #28]
 8004966:	2301      	movs	r3, #1
 8004968:	e795      	b.n	8004896 <_svfprintf_r+0xa36>
 800496a:	4632      	mov	r2, r6
 800496c:	f01b 0510 	ands.w	r5, fp, #16
 8004970:	f852 6b04 	ldr.w	r6, [r2], #4
 8004974:	9207      	str	r2, [sp, #28]
 8004976:	d001      	beq.n	800497c <_svfprintf_r+0xb1c>
 8004978:	461d      	mov	r5, r3
 800497a:	e7f4      	b.n	8004966 <_svfprintf_r+0xb06>
 800497c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8004980:	d001      	beq.n	8004986 <_svfprintf_r+0xb26>
 8004982:	b2b6      	uxth	r6, r6
 8004984:	e7ef      	b.n	8004966 <_svfprintf_r+0xb06>
 8004986:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800498a:	d0ec      	beq.n	8004966 <_svfprintf_r+0xb06>
 800498c:	b2f6      	uxtb	r6, r6
 800498e:	e7f3      	b.n	8004978 <_svfprintf_r+0xb18>
 8004990:	4b7d      	ldr	r3, [pc, #500]	; (8004b88 <_svfprintf_r+0xd28>)
 8004992:	9316      	str	r3, [sp, #88]	; 0x58
 8004994:	f01b 0320 	ands.w	r3, fp, #32
 8004998:	d01b      	beq.n	80049d2 <_svfprintf_r+0xb72>
 800499a:	1df3      	adds	r3, r6, #7
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	461a      	mov	r2, r3
 80049a2:	685d      	ldr	r5, [r3, #4]
 80049a4:	f852 6b08 	ldr.w	r6, [r2], #8
 80049a8:	9207      	str	r2, [sp, #28]
 80049aa:	f01b 0f01 	tst.w	fp, #1
 80049ae:	d00a      	beq.n	80049c6 <_svfprintf_r+0xb66>
 80049b0:	ea56 0305 	orrs.w	r3, r6, r5
 80049b4:	d007      	beq.n	80049c6 <_svfprintf_r+0xb66>
 80049b6:	2330      	movs	r3, #48	; 0x30
 80049b8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80049bc:	9b06      	ldr	r3, [sp, #24]
 80049be:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80049c2:	f04b 0b02 	orr.w	fp, fp, #2
 80049c6:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80049ca:	2302      	movs	r3, #2
 80049cc:	e763      	b.n	8004896 <_svfprintf_r+0xa36>
 80049ce:	4b6d      	ldr	r3, [pc, #436]	; (8004b84 <_svfprintf_r+0xd24>)
 80049d0:	e7df      	b.n	8004992 <_svfprintf_r+0xb32>
 80049d2:	4632      	mov	r2, r6
 80049d4:	f01b 0510 	ands.w	r5, fp, #16
 80049d8:	f852 6b04 	ldr.w	r6, [r2], #4
 80049dc:	9207      	str	r2, [sp, #28]
 80049de:	d001      	beq.n	80049e4 <_svfprintf_r+0xb84>
 80049e0:	461d      	mov	r5, r3
 80049e2:	e7e2      	b.n	80049aa <_svfprintf_r+0xb4a>
 80049e4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80049e8:	d001      	beq.n	80049ee <_svfprintf_r+0xb8e>
 80049ea:	b2b6      	uxth	r6, r6
 80049ec:	e7dd      	b.n	80049aa <_svfprintf_r+0xb4a>
 80049ee:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80049f2:	d0da      	beq.n	80049aa <_svfprintf_r+0xb4a>
 80049f4:	b2f6      	uxtb	r6, r6
 80049f6:	e7f3      	b.n	80049e0 <_svfprintf_r+0xb80>
 80049f8:	2e0a      	cmp	r6, #10
 80049fa:	f175 0300 	sbcs.w	r3, r5, #0
 80049fe:	d205      	bcs.n	8004a0c <_svfprintf_r+0xbac>
 8004a00:	3630      	adds	r6, #48	; 0x30
 8004a02:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8004a06:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8004a0a:	e3fb      	b.n	8005204 <_svfprintf_r+0x13a4>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9305      	str	r3, [sp, #20]
 8004a10:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8004a14:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	220a      	movs	r2, #10
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4630      	mov	r0, r6
 8004a20:	4629      	mov	r1, r5
 8004a22:	f7fc f8c9 	bl	8000bb8 <__aeabi_uldivmod>
 8004a26:	9b05      	ldr	r3, [sp, #20]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	9305      	str	r3, [sp, #20]
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	3230      	adds	r2, #48	; 0x30
 8004a30:	f10b 39ff 	add.w	r9, fp, #4294967295
 8004a34:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8004a38:	b1d3      	cbz	r3, 8004a70 <_svfprintf_r+0xc10>
 8004a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a3c:	9a05      	ldr	r2, [sp, #20]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d115      	bne.n	8004a70 <_svfprintf_r+0xc10>
 8004a44:	2aff      	cmp	r2, #255	; 0xff
 8004a46:	d013      	beq.n	8004a70 <_svfprintf_r+0xc10>
 8004a48:	2e0a      	cmp	r6, #10
 8004a4a:	f175 0300 	sbcs.w	r3, r5, #0
 8004a4e:	d30f      	bcc.n	8004a70 <_svfprintf_r+0xc10>
 8004a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004a54:	eba9 0903 	sub.w	r9, r9, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4648      	mov	r0, r9
 8004a5c:	f002 f95a 	bl	8006d14 <strncpy>
 8004a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	b11b      	cbz	r3, 8004a6e <_svfprintf_r+0xc0e>
 8004a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a68:	3301      	adds	r3, #1
 8004a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	2300      	movs	r3, #0
 8004a72:	220a      	movs	r2, #10
 8004a74:	4630      	mov	r0, r6
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fc f89e 	bl	8000bb8 <__aeabi_uldivmod>
 8004a7c:	2e0a      	cmp	r6, #10
 8004a7e:	f175 0300 	sbcs.w	r3, r5, #0
 8004a82:	f0c0 83bf 	bcc.w	8005204 <_svfprintf_r+0x13a4>
 8004a86:	4606      	mov	r6, r0
 8004a88:	460d      	mov	r5, r1
 8004a8a:	46cb      	mov	fp, r9
 8004a8c:	e7c5      	b.n	8004a1a <_svfprintf_r+0xbba>
 8004a8e:	f006 030f 	and.w	r3, r6, #15
 8004a92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004a94:	0936      	lsrs	r6, r6, #4
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8004a9c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8004aa0:	092d      	lsrs	r5, r5, #4
 8004aa2:	ea56 0305 	orrs.w	r3, r6, r5
 8004aa6:	d1f2      	bne.n	8004a8e <_svfprintf_r+0xc2e>
 8004aa8:	e3ac      	b.n	8005204 <_svfprintf_r+0x13a4>
 8004aaa:	b933      	cbnz	r3, 8004aba <_svfprintf_r+0xc5a>
 8004aac:	f01b 0f01 	tst.w	fp, #1
 8004ab0:	d003      	beq.n	8004aba <_svfprintf_r+0xc5a>
 8004ab2:	2330      	movs	r3, #48	; 0x30
 8004ab4:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8004ab8:	e7a5      	b.n	8004a06 <_svfprintf_r+0xba6>
 8004aba:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8004abe:	e3a1      	b.n	8005204 <_svfprintf_r+0x13a4>
 8004ac0:	9b06      	ldr	r3, [sp, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8370 	beq.w	80051a8 <_svfprintf_r+0x1348>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8004ace:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8004ad2:	9607      	str	r6, [sp, #28]
 8004ad4:	f7ff bb29 	b.w	800412a <_svfprintf_r+0x2ca>
 8004ad8:	9e03      	ldr	r6, [sp, #12]
 8004ada:	f7ff bb98 	b.w	800420e <_svfprintf_r+0x3ae>
 8004ade:	2010      	movs	r0, #16
 8004ae0:	4402      	add	r2, r0
 8004ae2:	2b07      	cmp	r3, #7
 8004ae4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004ae8:	6060      	str	r0, [r4, #4]
 8004aea:	dd08      	ble.n	8004afe <_svfprintf_r+0xc9e>
 8004aec:	aa22      	add	r2, sp, #136	; 0x88
 8004aee:	4641      	mov	r1, r8
 8004af0:	4650      	mov	r0, sl
 8004af2:	f002 f922 	bl	8006d3a <__ssprint_r>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f040 8334 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004afc:	a925      	add	r1, sp, #148	; 0x94
 8004afe:	3f10      	subs	r7, #16
 8004b00:	460c      	mov	r4, r1
 8004b02:	e4f4      	b.n	80044ee <_svfprintf_r+0x68e>
 8004b04:	460c      	mov	r4, r1
 8004b06:	e50d      	b.n	8004524 <_svfprintf_r+0x6c4>
 8004b08:	aa22      	add	r2, sp, #136	; 0x88
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	f002 f914 	bl	8006d3a <__ssprint_r>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f040 8326 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004b18:	ac25      	add	r4, sp, #148	; 0x94
 8004b1a:	e515      	b.n	8004548 <_svfprintf_r+0x6e8>
 8004b1c:	aa22      	add	r2, sp, #136	; 0x88
 8004b1e:	4641      	mov	r1, r8
 8004b20:	4650      	mov	r0, sl
 8004b22:	f002 f90a 	bl	8006d3a <__ssprint_r>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f040 831c 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004b2c:	ac25      	add	r4, sp, #148	; 0x94
 8004b2e:	e51b      	b.n	8004568 <_svfprintf_r+0x708>
 8004b30:	2010      	movs	r0, #16
 8004b32:	4402      	add	r2, r0
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004b3a:	6060      	str	r0, [r4, #4]
 8004b3c:	dd08      	ble.n	8004b50 <_svfprintf_r+0xcf0>
 8004b3e:	aa22      	add	r2, sp, #136	; 0x88
 8004b40:	4641      	mov	r1, r8
 8004b42:	4650      	mov	r0, sl
 8004b44:	f002 f8f9 	bl	8006d3a <__ssprint_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f040 830b 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004b4e:	a925      	add	r1, sp, #148	; 0x94
 8004b50:	3f10      	subs	r7, #16
 8004b52:	460c      	mov	r4, r1
 8004b54:	e510      	b.n	8004578 <_svfprintf_r+0x718>
 8004b56:	460c      	mov	r4, r1
 8004b58:	e529      	b.n	80045ae <_svfprintf_r+0x74e>
 8004b5a:	2010      	movs	r0, #16
 8004b5c:	4402      	add	r2, r0
 8004b5e:	2b07      	cmp	r3, #7
 8004b60:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004b64:	6060      	str	r0, [r4, #4]
 8004b66:	dd08      	ble.n	8004b7a <_svfprintf_r+0xd1a>
 8004b68:	aa22      	add	r2, sp, #136	; 0x88
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	f002 f8e4 	bl	8006d3a <__ssprint_r>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f040 82f6 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004b78:	a925      	add	r1, sp, #148	; 0x94
 8004b7a:	3e10      	subs	r6, #16
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	e529      	b.n	80045d4 <_svfprintf_r+0x774>
 8004b80:	460c      	mov	r4, r1
 8004b82:	e541      	b.n	8004608 <_svfprintf_r+0x7a8>
 8004b84:	080089d8 	.word	0x080089d8
 8004b88:	080089e9 	.word	0x080089e9
 8004b8c:	9b06      	ldr	r3, [sp, #24]
 8004b8e:	2b65      	cmp	r3, #101	; 0x65
 8004b90:	f340 8230 	ble.w	8004ff4 <_svfprintf_r+0x1194>
 8004b94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d068      	beq.n	8004c76 <_svfprintf_r+0xe16>
 8004ba4:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <_svfprintf_r+0xefc>)
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	441e      	add	r6, r3
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bb0:	9624      	str	r6, [sp, #144]	; 0x90
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	2b07      	cmp	r3, #7
 8004bb6:	9323      	str	r3, [sp, #140]	; 0x8c
 8004bb8:	dc37      	bgt.n	8004c2a <_svfprintf_r+0xdca>
 8004bba:	3408      	adds	r4, #8
 8004bbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004bbe:	9a05      	ldr	r2, [sp, #20]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	db03      	blt.n	8004bcc <_svfprintf_r+0xd6c>
 8004bc4:	f01b 0f01 	tst.w	fp, #1
 8004bc8:	f43f ad30 	beq.w	800462c <_svfprintf_r+0x7cc>
 8004bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004bd8:	4413      	add	r3, r2
 8004bda:	9324      	str	r3, [sp, #144]	; 0x90
 8004bdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bde:	3301      	adds	r3, #1
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	9323      	str	r3, [sp, #140]	; 0x8c
 8004be4:	dc2b      	bgt.n	8004c3e <_svfprintf_r+0xdde>
 8004be6:	3408      	adds	r4, #8
 8004be8:	9b05      	ldr	r3, [sp, #20]
 8004bea:	1e5d      	subs	r5, r3, #1
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	f77f ad1d 	ble.w	800462c <_svfprintf_r+0x7cc>
 8004bf2:	4e5b      	ldr	r6, [pc, #364]	; (8004d60 <_svfprintf_r+0xf00>)
 8004bf4:	2710      	movs	r7, #16
 8004bf6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004bfa:	2d10      	cmp	r5, #16
 8004bfc:	f103 0301 	add.w	r3, r3, #1
 8004c00:	f104 0108 	add.w	r1, r4, #8
 8004c04:	6026      	str	r6, [r4, #0]
 8004c06:	dc24      	bgt.n	8004c52 <_svfprintf_r+0xdf2>
 8004c08:	6065      	str	r5, [r4, #4]
 8004c0a:	2b07      	cmp	r3, #7
 8004c0c:	4415      	add	r5, r2
 8004c0e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8004c12:	f340 8286 	ble.w	8005122 <_svfprintf_r+0x12c2>
 8004c16:	aa22      	add	r2, sp, #136	; 0x88
 8004c18:	4641      	mov	r1, r8
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f002 f88d 	bl	8006d3a <__ssprint_r>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	f040 829f 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004c26:	ac25      	add	r4, sp, #148	; 0x94
 8004c28:	e500      	b.n	800462c <_svfprintf_r+0x7cc>
 8004c2a:	aa22      	add	r2, sp, #136	; 0x88
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	4650      	mov	r0, sl
 8004c30:	f002 f883 	bl	8006d3a <__ssprint_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f040 8295 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004c3a:	ac25      	add	r4, sp, #148	; 0x94
 8004c3c:	e7be      	b.n	8004bbc <_svfprintf_r+0xd5c>
 8004c3e:	aa22      	add	r2, sp, #136	; 0x88
 8004c40:	4641      	mov	r1, r8
 8004c42:	4650      	mov	r0, sl
 8004c44:	f002 f879 	bl	8006d3a <__ssprint_r>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f040 828b 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004c4e:	ac25      	add	r4, sp, #148	; 0x94
 8004c50:	e7ca      	b.n	8004be8 <_svfprintf_r+0xd88>
 8004c52:	3210      	adds	r2, #16
 8004c54:	2b07      	cmp	r3, #7
 8004c56:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004c5a:	6067      	str	r7, [r4, #4]
 8004c5c:	dd08      	ble.n	8004c70 <_svfprintf_r+0xe10>
 8004c5e:	aa22      	add	r2, sp, #136	; 0x88
 8004c60:	4641      	mov	r1, r8
 8004c62:	4650      	mov	r0, sl
 8004c64:	f002 f869 	bl	8006d3a <__ssprint_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f040 827b 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004c6e:	a925      	add	r1, sp, #148	; 0x94
 8004c70:	3d10      	subs	r5, #16
 8004c72:	460c      	mov	r4, r1
 8004c74:	e7bf      	b.n	8004bf6 <_svfprintf_r+0xd96>
 8004c76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dc73      	bgt.n	8004d64 <_svfprintf_r+0xf04>
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <_svfprintf_r+0xefc>)
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	441e      	add	r6, r3
 8004c84:	6063      	str	r3, [r4, #4]
 8004c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c88:	9624      	str	r6, [sp, #144]	; 0x90
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	2b07      	cmp	r3, #7
 8004c8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004c90:	dc3d      	bgt.n	8004d0e <_svfprintf_r+0xeae>
 8004c92:	3408      	adds	r4, #8
 8004c94:	9905      	ldr	r1, [sp, #20]
 8004c96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	f00b 0101 	and.w	r1, fp, #1
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	f43f acc3 	beq.w	800462c <_svfprintf_r+0x7cc>
 8004ca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cac:	6062      	str	r2, [r4, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	9324      	str	r3, [sp, #144]	; 0x90
 8004cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	2b07      	cmp	r3, #7
 8004cb8:	9323      	str	r3, [sp, #140]	; 0x8c
 8004cba:	dc32      	bgt.n	8004d22 <_svfprintf_r+0xec2>
 8004cbc:	3408      	adds	r4, #8
 8004cbe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004cc0:	2d00      	cmp	r5, #0
 8004cc2:	da1b      	bge.n	8004cfc <_svfprintf_r+0xe9c>
 8004cc4:	4e26      	ldr	r6, [pc, #152]	; (8004d60 <_svfprintf_r+0xf00>)
 8004cc6:	426d      	negs	r5, r5
 8004cc8:	4623      	mov	r3, r4
 8004cca:	2710      	movs	r7, #16
 8004ccc:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8004cd0:	2d10      	cmp	r5, #16
 8004cd2:	f102 0201 	add.w	r2, r2, #1
 8004cd6:	f104 0408 	add.w	r4, r4, #8
 8004cda:	601e      	str	r6, [r3, #0]
 8004cdc:	dc2b      	bgt.n	8004d36 <_svfprintf_r+0xed6>
 8004cde:	605d      	str	r5, [r3, #4]
 8004ce0:	2a07      	cmp	r2, #7
 8004ce2:	440d      	add	r5, r1
 8004ce4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8004ce8:	dd08      	ble.n	8004cfc <_svfprintf_r+0xe9c>
 8004cea:	aa22      	add	r2, sp, #136	; 0x88
 8004cec:	4641      	mov	r1, r8
 8004cee:	4650      	mov	r0, sl
 8004cf0:	f002 f823 	bl	8006d3a <__ssprint_r>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	f040 8235 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004cfa:	ac25      	add	r4, sp, #148	; 0x94
 8004cfc:	9b05      	ldr	r3, [sp, #20]
 8004cfe:	9a05      	ldr	r2, [sp, #20]
 8004d00:	6063      	str	r3, [r4, #4]
 8004d02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004d04:	f8c4 9000 	str.w	r9, [r4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	9324      	str	r3, [sp, #144]	; 0x90
 8004d0c:	e487      	b.n	800461e <_svfprintf_r+0x7be>
 8004d0e:	aa22      	add	r2, sp, #136	; 0x88
 8004d10:	4641      	mov	r1, r8
 8004d12:	4650      	mov	r0, sl
 8004d14:	f002 f811 	bl	8006d3a <__ssprint_r>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f040 8223 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004d1e:	ac25      	add	r4, sp, #148	; 0x94
 8004d20:	e7b8      	b.n	8004c94 <_svfprintf_r+0xe34>
 8004d22:	aa22      	add	r2, sp, #136	; 0x88
 8004d24:	4641      	mov	r1, r8
 8004d26:	4650      	mov	r0, sl
 8004d28:	f002 f807 	bl	8006d3a <__ssprint_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 8219 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004d32:	ac25      	add	r4, sp, #148	; 0x94
 8004d34:	e7c3      	b.n	8004cbe <_svfprintf_r+0xe5e>
 8004d36:	3110      	adds	r1, #16
 8004d38:	2a07      	cmp	r2, #7
 8004d3a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8004d3e:	605f      	str	r7, [r3, #4]
 8004d40:	dd08      	ble.n	8004d54 <_svfprintf_r+0xef4>
 8004d42:	aa22      	add	r2, sp, #136	; 0x88
 8004d44:	4641      	mov	r1, r8
 8004d46:	4650      	mov	r0, sl
 8004d48:	f001 fff7 	bl	8006d3a <__ssprint_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f040 8209 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004d52:	ac25      	add	r4, sp, #148	; 0x94
 8004d54:	3d10      	subs	r5, #16
 8004d56:	4623      	mov	r3, r4
 8004d58:	e7b8      	b.n	8004ccc <_svfprintf_r+0xe6c>
 8004d5a:	bf00      	nop
 8004d5c:	080089fa 	.word	0x080089fa
 8004d60:	08008a0c 	.word	0x08008a0c
 8004d64:	9f05      	ldr	r7, [sp, #20]
 8004d66:	42af      	cmp	r7, r5
 8004d68:	bfa8      	it	ge
 8004d6a:	462f      	movge	r7, r5
 8004d6c:	2f00      	cmp	r7, #0
 8004d6e:	dd0a      	ble.n	8004d86 <_svfprintf_r+0xf26>
 8004d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d72:	3301      	adds	r3, #1
 8004d74:	443e      	add	r6, r7
 8004d76:	2b07      	cmp	r3, #7
 8004d78:	e9c4 9700 	strd	r9, r7, [r4]
 8004d7c:	9624      	str	r6, [sp, #144]	; 0x90
 8004d7e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d80:	f300 8085 	bgt.w	8004e8e <_svfprintf_r+0x102e>
 8004d84:	3408      	adds	r4, #8
 8004d86:	2f00      	cmp	r7, #0
 8004d88:	bfac      	ite	ge
 8004d8a:	1bee      	subge	r6, r5, r7
 8004d8c:	462e      	movlt	r6, r5
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	dd19      	ble.n	8004dc6 <_svfprintf_r+0xf66>
 8004d92:	4f97      	ldr	r7, [pc, #604]	; (8004ff0 <_svfprintf_r+0x1190>)
 8004d94:	6027      	str	r7, [r4, #0]
 8004d96:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004d9a:	2e10      	cmp	r6, #16
 8004d9c:	f103 0301 	add.w	r3, r3, #1
 8004da0:	f104 0108 	add.w	r1, r4, #8
 8004da4:	dc7d      	bgt.n	8004ea2 <_svfprintf_r+0x1042>
 8004da6:	6066      	str	r6, [r4, #4]
 8004da8:	2b07      	cmp	r3, #7
 8004daa:	4416      	add	r6, r2
 8004dac:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8004db0:	f340 808a 	ble.w	8004ec8 <_svfprintf_r+0x1068>
 8004db4:	aa22      	add	r2, sp, #136	; 0x88
 8004db6:	4641      	mov	r1, r8
 8004db8:	4650      	mov	r0, sl
 8004dba:	f001 ffbe 	bl	8006d3a <__ssprint_r>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f040 81d0 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004dc4:	ac25      	add	r4, sp, #148	; 0x94
 8004dc6:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8004dca:	444d      	add	r5, r9
 8004dcc:	d00a      	beq.n	8004de4 <_svfprintf_r+0xf84>
 8004dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d17b      	bne.n	8004ecc <_svfprintf_r+0x106c>
 8004dd4:	9b08      	ldr	r3, [sp, #32]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d17b      	bne.n	8004ed2 <_svfprintf_r+0x1072>
 8004dda:	9b05      	ldr	r3, [sp, #20]
 8004ddc:	444b      	add	r3, r9
 8004dde:	429d      	cmp	r5, r3
 8004de0:	bf28      	it	cs
 8004de2:	461d      	movcs	r5, r3
 8004de4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004de6:	9a05      	ldr	r2, [sp, #20]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	db02      	blt.n	8004df2 <_svfprintf_r+0xf92>
 8004dec:	f01b 0f01 	tst.w	fp, #1
 8004df0:	d00e      	beq.n	8004e10 <_svfprintf_r+0xfb0>
 8004df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004dfe:	4413      	add	r3, r2
 8004e00:	9324      	str	r3, [sp, #144]	; 0x90
 8004e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e04:	3301      	adds	r3, #1
 8004e06:	2b07      	cmp	r3, #7
 8004e08:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e0a:	f300 80dd 	bgt.w	8004fc8 <_svfprintf_r+0x1168>
 8004e0e:	3408      	adds	r4, #8
 8004e10:	9b05      	ldr	r3, [sp, #20]
 8004e12:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8004e14:	eb09 0203 	add.w	r2, r9, r3
 8004e18:	1b9e      	subs	r6, r3, r6
 8004e1a:	1b52      	subs	r2, r2, r5
 8004e1c:	4296      	cmp	r6, r2
 8004e1e:	bfa8      	it	ge
 8004e20:	4616      	movge	r6, r2
 8004e22:	2e00      	cmp	r6, #0
 8004e24:	dd0b      	ble.n	8004e3e <_svfprintf_r+0xfde>
 8004e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e28:	4433      	add	r3, r6
 8004e2a:	9324      	str	r3, [sp, #144]	; 0x90
 8004e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e2e:	3301      	adds	r3, #1
 8004e30:	2b07      	cmp	r3, #7
 8004e32:	e9c4 5600 	strd	r5, r6, [r4]
 8004e36:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e38:	f300 80d0 	bgt.w	8004fdc <_svfprintf_r+0x117c>
 8004e3c:	3408      	adds	r4, #8
 8004e3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004e40:	9b05      	ldr	r3, [sp, #20]
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	eba3 0505 	sub.w	r5, r3, r5
 8004e48:	bfa8      	it	ge
 8004e4a:	1bad      	subge	r5, r5, r6
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	f77f abed 	ble.w	800462c <_svfprintf_r+0x7cc>
 8004e52:	4e67      	ldr	r6, [pc, #412]	; (8004ff0 <_svfprintf_r+0x1190>)
 8004e54:	2710      	movs	r7, #16
 8004e56:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004e5a:	2d10      	cmp	r5, #16
 8004e5c:	f103 0301 	add.w	r3, r3, #1
 8004e60:	f104 0108 	add.w	r1, r4, #8
 8004e64:	6026      	str	r6, [r4, #0]
 8004e66:	f77f aecf 	ble.w	8004c08 <_svfprintf_r+0xda8>
 8004e6a:	3210      	adds	r2, #16
 8004e6c:	2b07      	cmp	r3, #7
 8004e6e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004e72:	6067      	str	r7, [r4, #4]
 8004e74:	dd08      	ble.n	8004e88 <_svfprintf_r+0x1028>
 8004e76:	aa22      	add	r2, sp, #136	; 0x88
 8004e78:	4641      	mov	r1, r8
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	f001 ff5d 	bl	8006d3a <__ssprint_r>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f040 816f 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004e86:	a925      	add	r1, sp, #148	; 0x94
 8004e88:	3d10      	subs	r5, #16
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	e7e3      	b.n	8004e56 <_svfprintf_r+0xff6>
 8004e8e:	aa22      	add	r2, sp, #136	; 0x88
 8004e90:	4641      	mov	r1, r8
 8004e92:	4650      	mov	r0, sl
 8004e94:	f001 ff51 	bl	8006d3a <__ssprint_r>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f040 8163 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004e9e:	ac25      	add	r4, sp, #148	; 0x94
 8004ea0:	e771      	b.n	8004d86 <_svfprintf_r+0xf26>
 8004ea2:	2010      	movs	r0, #16
 8004ea4:	4402      	add	r2, r0
 8004ea6:	2b07      	cmp	r3, #7
 8004ea8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004eac:	6060      	str	r0, [r4, #4]
 8004eae:	dd08      	ble.n	8004ec2 <_svfprintf_r+0x1062>
 8004eb0:	aa22      	add	r2, sp, #136	; 0x88
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	f001 ff40 	bl	8006d3a <__ssprint_r>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	f040 8152 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004ec0:	a925      	add	r1, sp, #148	; 0x94
 8004ec2:	3e10      	subs	r6, #16
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	e765      	b.n	8004d94 <_svfprintf_r+0xf34>
 8004ec8:	460c      	mov	r4, r1
 8004eca:	e77c      	b.n	8004dc6 <_svfprintf_r+0xf66>
 8004ecc:	9b08      	ldr	r3, [sp, #32]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04a      	beq.n	8004f68 <_svfprintf_r+0x1108>
 8004ed2:	9b08      	ldr	r3, [sp, #32]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	9308      	str	r3, [sp, #32]
 8004ed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ee4:	4413      	add	r3, r2
 8004ee6:	9324      	str	r3, [sp, #144]	; 0x90
 8004ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004eea:	3301      	adds	r3, #1
 8004eec:	2b07      	cmp	r3, #7
 8004eee:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ef0:	dc41      	bgt.n	8004f76 <_svfprintf_r+0x1116>
 8004ef2:	3408      	adds	r4, #8
 8004ef4:	9b05      	ldr	r3, [sp, #20]
 8004ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ef8:	eb09 0703 	add.w	r7, r9, r3
 8004efc:	1b7b      	subs	r3, r7, r5
 8004efe:	7817      	ldrb	r7, [r2, #0]
 8004f00:	429f      	cmp	r7, r3
 8004f02:	bfa8      	it	ge
 8004f04:	461f      	movge	r7, r3
 8004f06:	2f00      	cmp	r7, #0
 8004f08:	dd0a      	ble.n	8004f20 <_svfprintf_r+0x10c0>
 8004f0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f0c:	443b      	add	r3, r7
 8004f0e:	9324      	str	r3, [sp, #144]	; 0x90
 8004f10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f12:	3301      	adds	r3, #1
 8004f14:	2b07      	cmp	r3, #7
 8004f16:	e9c4 5700 	strd	r5, r7, [r4]
 8004f1a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f1c:	dc35      	bgt.n	8004f8a <_svfprintf_r+0x112a>
 8004f1e:	3408      	adds	r4, #8
 8004f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f22:	781e      	ldrb	r6, [r3, #0]
 8004f24:	2f00      	cmp	r7, #0
 8004f26:	bfa8      	it	ge
 8004f28:	1bf6      	subge	r6, r6, r7
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	dd18      	ble.n	8004f60 <_svfprintf_r+0x1100>
 8004f2e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004f32:	482f      	ldr	r0, [pc, #188]	; (8004ff0 <_svfprintf_r+0x1190>)
 8004f34:	6020      	str	r0, [r4, #0]
 8004f36:	2e10      	cmp	r6, #16
 8004f38:	f103 0301 	add.w	r3, r3, #1
 8004f3c:	f104 0108 	add.w	r1, r4, #8
 8004f40:	dc2d      	bgt.n	8004f9e <_svfprintf_r+0x113e>
 8004f42:	4432      	add	r2, r6
 8004f44:	2b07      	cmp	r3, #7
 8004f46:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004f4a:	6066      	str	r6, [r4, #4]
 8004f4c:	dd3a      	ble.n	8004fc4 <_svfprintf_r+0x1164>
 8004f4e:	aa22      	add	r2, sp, #136	; 0x88
 8004f50:	4641      	mov	r1, r8
 8004f52:	4650      	mov	r0, sl
 8004f54:	f001 fef1 	bl	8006d3a <__ssprint_r>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	f040 8103 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004f5e:	ac25      	add	r4, sp, #148	; 0x94
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	441d      	add	r5, r3
 8004f66:	e732      	b.n	8004dce <_svfprintf_r+0xf6e>
 8004f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f70:	3b01      	subs	r3, #1
 8004f72:	9309      	str	r3, [sp, #36]	; 0x24
 8004f74:	e7b0      	b.n	8004ed8 <_svfprintf_r+0x1078>
 8004f76:	aa22      	add	r2, sp, #136	; 0x88
 8004f78:	4641      	mov	r1, r8
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	f001 fedd 	bl	8006d3a <__ssprint_r>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	f040 80ef 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004f86:	ac25      	add	r4, sp, #148	; 0x94
 8004f88:	e7b4      	b.n	8004ef4 <_svfprintf_r+0x1094>
 8004f8a:	aa22      	add	r2, sp, #136	; 0x88
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	4650      	mov	r0, sl
 8004f90:	f001 fed3 	bl	8006d3a <__ssprint_r>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f040 80e5 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004f9a:	ac25      	add	r4, sp, #148	; 0x94
 8004f9c:	e7c0      	b.n	8004f20 <_svfprintf_r+0x10c0>
 8004f9e:	2010      	movs	r0, #16
 8004fa0:	4402      	add	r2, r0
 8004fa2:	2b07      	cmp	r3, #7
 8004fa4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004fa8:	6060      	str	r0, [r4, #4]
 8004faa:	dd08      	ble.n	8004fbe <_svfprintf_r+0x115e>
 8004fac:	aa22      	add	r2, sp, #136	; 0x88
 8004fae:	4641      	mov	r1, r8
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	f001 fec2 	bl	8006d3a <__ssprint_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f040 80d4 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004fbc:	a925      	add	r1, sp, #148	; 0x94
 8004fbe:	3e10      	subs	r6, #16
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	e7b4      	b.n	8004f2e <_svfprintf_r+0x10ce>
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	e7cb      	b.n	8004f60 <_svfprintf_r+0x1100>
 8004fc8:	aa22      	add	r2, sp, #136	; 0x88
 8004fca:	4641      	mov	r1, r8
 8004fcc:	4650      	mov	r0, sl
 8004fce:	f001 feb4 	bl	8006d3a <__ssprint_r>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f040 80c6 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004fd8:	ac25      	add	r4, sp, #148	; 0x94
 8004fda:	e719      	b.n	8004e10 <_svfprintf_r+0xfb0>
 8004fdc:	aa22      	add	r2, sp, #136	; 0x88
 8004fde:	4641      	mov	r1, r8
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	f001 feaa 	bl	8006d3a <__ssprint_r>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f040 80bc 	bne.w	8005164 <_svfprintf_r+0x1304>
 8004fec:	ac25      	add	r4, sp, #148	; 0x94
 8004fee:	e726      	b.n	8004e3e <_svfprintf_r+0xfde>
 8004ff0:	08008a0c 	.word	0x08008a0c
 8004ff4:	9a05      	ldr	r2, [sp, #20]
 8004ff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ff8:	2a01      	cmp	r2, #1
 8004ffa:	f106 0601 	add.w	r6, r6, #1
 8004ffe:	f103 0301 	add.w	r3, r3, #1
 8005002:	f104 0508 	add.w	r5, r4, #8
 8005006:	dc02      	bgt.n	800500e <_svfprintf_r+0x11ae>
 8005008:	f01b 0f01 	tst.w	fp, #1
 800500c:	d07e      	beq.n	800510c <_svfprintf_r+0x12ac>
 800500e:	2201      	movs	r2, #1
 8005010:	2b07      	cmp	r3, #7
 8005012:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8005016:	f8c4 9000 	str.w	r9, [r4]
 800501a:	6062      	str	r2, [r4, #4]
 800501c:	dd08      	ble.n	8005030 <_svfprintf_r+0x11d0>
 800501e:	aa22      	add	r2, sp, #136	; 0x88
 8005020:	4641      	mov	r1, r8
 8005022:	4650      	mov	r0, sl
 8005024:	f001 fe89 	bl	8006d3a <__ssprint_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	f040 809b 	bne.w	8005164 <_svfprintf_r+0x1304>
 800502e:	ad25      	add	r5, sp, #148	; 0x94
 8005030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005038:	606b      	str	r3, [r5, #4]
 800503a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800503c:	4413      	add	r3, r2
 800503e:	9324      	str	r3, [sp, #144]	; 0x90
 8005040:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005042:	3301      	adds	r3, #1
 8005044:	2b07      	cmp	r3, #7
 8005046:	9323      	str	r3, [sp, #140]	; 0x8c
 8005048:	dc32      	bgt.n	80050b0 <_svfprintf_r+0x1250>
 800504a:	3508      	adds	r5, #8
 800504c:	9b05      	ldr	r3, [sp, #20]
 800504e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005052:	1e5c      	subs	r4, r3, #1
 8005054:	2200      	movs	r2, #0
 8005056:	2300      	movs	r3, #0
 8005058:	f7fb fd3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800505c:	2800      	cmp	r0, #0
 800505e:	d130      	bne.n	80050c2 <_svfprintf_r+0x1262>
 8005060:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005062:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005064:	9a05      	ldr	r2, [sp, #20]
 8005066:	3101      	adds	r1, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	f109 0001 	add.w	r0, r9, #1
 800506e:	4413      	add	r3, r2
 8005070:	2907      	cmp	r1, #7
 8005072:	e9c5 0400 	strd	r0, r4, [r5]
 8005076:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800507a:	dd50      	ble.n	800511e <_svfprintf_r+0x12be>
 800507c:	aa22      	add	r2, sp, #136	; 0x88
 800507e:	4641      	mov	r1, r8
 8005080:	4650      	mov	r0, sl
 8005082:	f001 fe5a 	bl	8006d3a <__ssprint_r>
 8005086:	2800      	cmp	r0, #0
 8005088:	d16c      	bne.n	8005164 <_svfprintf_r+0x1304>
 800508a:	ad25      	add	r5, sp, #148	; 0x94
 800508c:	ab1e      	add	r3, sp, #120	; 0x78
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005092:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005094:	606b      	str	r3, [r5, #4]
 8005096:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005098:	4413      	add	r3, r2
 800509a:	9324      	str	r3, [sp, #144]	; 0x90
 800509c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800509e:	3301      	adds	r3, #1
 80050a0:	2b07      	cmp	r3, #7
 80050a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80050a4:	f73f adb7 	bgt.w	8004c16 <_svfprintf_r+0xdb6>
 80050a8:	f105 0408 	add.w	r4, r5, #8
 80050ac:	f7ff babe 	b.w	800462c <_svfprintf_r+0x7cc>
 80050b0:	aa22      	add	r2, sp, #136	; 0x88
 80050b2:	4641      	mov	r1, r8
 80050b4:	4650      	mov	r0, sl
 80050b6:	f001 fe40 	bl	8006d3a <__ssprint_r>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d152      	bne.n	8005164 <_svfprintf_r+0x1304>
 80050be:	ad25      	add	r5, sp, #148	; 0x94
 80050c0:	e7c4      	b.n	800504c <_svfprintf_r+0x11ec>
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	dde2      	ble.n	800508c <_svfprintf_r+0x122c>
 80050c6:	4e56      	ldr	r6, [pc, #344]	; (8005220 <_svfprintf_r+0x13c0>)
 80050c8:	2710      	movs	r7, #16
 80050ca:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80050ce:	2c10      	cmp	r4, #16
 80050d0:	f103 0301 	add.w	r3, r3, #1
 80050d4:	f105 0108 	add.w	r1, r5, #8
 80050d8:	602e      	str	r6, [r5, #0]
 80050da:	dc07      	bgt.n	80050ec <_svfprintf_r+0x128c>
 80050dc:	606c      	str	r4, [r5, #4]
 80050de:	2b07      	cmp	r3, #7
 80050e0:	4414      	add	r4, r2
 80050e2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80050e6:	dcc9      	bgt.n	800507c <_svfprintf_r+0x121c>
 80050e8:	460d      	mov	r5, r1
 80050ea:	e7cf      	b.n	800508c <_svfprintf_r+0x122c>
 80050ec:	3210      	adds	r2, #16
 80050ee:	2b07      	cmp	r3, #7
 80050f0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80050f4:	606f      	str	r7, [r5, #4]
 80050f6:	dd06      	ble.n	8005106 <_svfprintf_r+0x12a6>
 80050f8:	aa22      	add	r2, sp, #136	; 0x88
 80050fa:	4641      	mov	r1, r8
 80050fc:	4650      	mov	r0, sl
 80050fe:	f001 fe1c 	bl	8006d3a <__ssprint_r>
 8005102:	bb78      	cbnz	r0, 8005164 <_svfprintf_r+0x1304>
 8005104:	a925      	add	r1, sp, #148	; 0x94
 8005106:	3c10      	subs	r4, #16
 8005108:	460d      	mov	r5, r1
 800510a:	e7de      	b.n	80050ca <_svfprintf_r+0x126a>
 800510c:	2201      	movs	r2, #1
 800510e:	2b07      	cmp	r3, #7
 8005110:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8005114:	f8c4 9000 	str.w	r9, [r4]
 8005118:	6062      	str	r2, [r4, #4]
 800511a:	ddb7      	ble.n	800508c <_svfprintf_r+0x122c>
 800511c:	e7ae      	b.n	800507c <_svfprintf_r+0x121c>
 800511e:	3508      	adds	r5, #8
 8005120:	e7b4      	b.n	800508c <_svfprintf_r+0x122c>
 8005122:	460c      	mov	r4, r1
 8005124:	f7ff ba82 	b.w	800462c <_svfprintf_r+0x7cc>
 8005128:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800512c:	1a9d      	subs	r5, r3, r2
 800512e:	2d00      	cmp	r5, #0
 8005130:	f77f aa80 	ble.w	8004634 <_svfprintf_r+0x7d4>
 8005134:	4e3b      	ldr	r6, [pc, #236]	; (8005224 <_svfprintf_r+0x13c4>)
 8005136:	2710      	movs	r7, #16
 8005138:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800513c:	2d10      	cmp	r5, #16
 800513e:	f103 0301 	add.w	r3, r3, #1
 8005142:	6026      	str	r6, [r4, #0]
 8005144:	dc18      	bgt.n	8005178 <_svfprintf_r+0x1318>
 8005146:	6065      	str	r5, [r4, #4]
 8005148:	2b07      	cmp	r3, #7
 800514a:	4415      	add	r5, r2
 800514c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8005150:	f77f aa70 	ble.w	8004634 <_svfprintf_r+0x7d4>
 8005154:	aa22      	add	r2, sp, #136	; 0x88
 8005156:	4641      	mov	r1, r8
 8005158:	4650      	mov	r0, sl
 800515a:	f001 fdee 	bl	8006d3a <__ssprint_r>
 800515e:	2800      	cmp	r0, #0
 8005160:	f43f aa68 	beq.w	8004634 <_svfprintf_r+0x7d4>
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f43f a887 	beq.w	800427a <_svfprintf_r+0x41a>
 800516c:	4619      	mov	r1, r3
 800516e:	4650      	mov	r0, sl
 8005170:	f000 ff34 	bl	8005fdc <_free_r>
 8005174:	f7ff b881 	b.w	800427a <_svfprintf_r+0x41a>
 8005178:	3210      	adds	r2, #16
 800517a:	2b07      	cmp	r3, #7
 800517c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005180:	6067      	str	r7, [r4, #4]
 8005182:	dc02      	bgt.n	800518a <_svfprintf_r+0x132a>
 8005184:	3408      	adds	r4, #8
 8005186:	3d10      	subs	r5, #16
 8005188:	e7d6      	b.n	8005138 <_svfprintf_r+0x12d8>
 800518a:	aa22      	add	r2, sp, #136	; 0x88
 800518c:	4641      	mov	r1, r8
 800518e:	4650      	mov	r0, sl
 8005190:	f001 fdd3 	bl	8006d3a <__ssprint_r>
 8005194:	2800      	cmp	r0, #0
 8005196:	d1e5      	bne.n	8005164 <_svfprintf_r+0x1304>
 8005198:	ac25      	add	r4, sp, #148	; 0x94
 800519a:	e7f4      	b.n	8005186 <_svfprintf_r+0x1326>
 800519c:	9903      	ldr	r1, [sp, #12]
 800519e:	4650      	mov	r0, sl
 80051a0:	f000 ff1c 	bl	8005fdc <_free_r>
 80051a4:	f7ff ba5e 	b.w	8004664 <_svfprintf_r+0x804>
 80051a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f43f a865 	beq.w	800427a <_svfprintf_r+0x41a>
 80051b0:	aa22      	add	r2, sp, #136	; 0x88
 80051b2:	4641      	mov	r1, r8
 80051b4:	4650      	mov	r0, sl
 80051b6:	f001 fdc0 	bl	8006d3a <__ssprint_r>
 80051ba:	f7ff b85e 	b.w	800427a <_svfprintf_r+0x41a>
 80051be:	ea56 0205 	orrs.w	r2, r6, r5
 80051c2:	465f      	mov	r7, fp
 80051c4:	f43f ab78 	beq.w	80048b8 <_svfprintf_r+0xa58>
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f43f ac15 	beq.w	80049f8 <_svfprintf_r+0xb98>
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 80051d4:	f43f ac5b 	beq.w	8004a8e <_svfprintf_r+0xc2e>
 80051d8:	f006 0307 	and.w	r3, r6, #7
 80051dc:	08f6      	lsrs	r6, r6, #3
 80051de:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 80051e2:	08ed      	lsrs	r5, r5, #3
 80051e4:	3330      	adds	r3, #48	; 0x30
 80051e6:	ea56 0105 	orrs.w	r1, r6, r5
 80051ea:	464a      	mov	r2, r9
 80051ec:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80051f0:	d1f2      	bne.n	80051d8 <_svfprintf_r+0x1378>
 80051f2:	07f9      	lsls	r1, r7, #31
 80051f4:	d506      	bpl.n	8005204 <_svfprintf_r+0x13a4>
 80051f6:	2b30      	cmp	r3, #48	; 0x30
 80051f8:	d004      	beq.n	8005204 <_svfprintf_r+0x13a4>
 80051fa:	2330      	movs	r3, #48	; 0x30
 80051fc:	f809 3c01 	strb.w	r3, [r9, #-1]
 8005200:	f1a2 0902 	sub.w	r9, r2, #2
 8005204:	ab4e      	add	r3, sp, #312	; 0x138
 8005206:	eba3 0309 	sub.w	r3, r3, r9
 800520a:	9e04      	ldr	r6, [sp, #16]
 800520c:	9304      	str	r3, [sp, #16]
 800520e:	2300      	movs	r3, #0
 8005210:	46bb      	mov	fp, r7
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8005218:	461d      	mov	r5, r3
 800521a:	f7ff b94d 	b.w	80044b8 <_svfprintf_r+0x658>
 800521e:	bf00      	nop
 8005220:	08008a0c 	.word	0x08008a0c
 8005224:	080089fc 	.word	0x080089fc

08005228 <register_fini>:
 8005228:	4b02      	ldr	r3, [pc, #8]	; (8005234 <register_fini+0xc>)
 800522a:	b113      	cbz	r3, 8005232 <register_fini+0xa>
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <register_fini+0x10>)
 800522e:	f000 b805 	b.w	800523c <atexit>
 8005232:	4770      	bx	lr
 8005234:	00000000 	.word	0x00000000
 8005238:	08005f0d 	.word	0x08005f0d

0800523c <atexit>:
 800523c:	2300      	movs	r3, #0
 800523e:	4601      	mov	r1, r0
 8005240:	461a      	mov	r2, r3
 8005242:	4618      	mov	r0, r3
 8005244:	f001 be02 	b.w	8006e4c <__register_exitproc>

08005248 <quorem>:
 8005248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	6903      	ldr	r3, [r0, #16]
 800524e:	690c      	ldr	r4, [r1, #16]
 8005250:	42a3      	cmp	r3, r4
 8005252:	4607      	mov	r7, r0
 8005254:	f2c0 8081 	blt.w	800535a <quorem+0x112>
 8005258:	3c01      	subs	r4, #1
 800525a:	f101 0814 	add.w	r8, r1, #20
 800525e:	f100 0514 	add.w	r5, r0, #20
 8005262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800526c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005270:	3301      	adds	r3, #1
 8005272:	429a      	cmp	r2, r3
 8005274:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800527c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005280:	d331      	bcc.n	80052e6 <quorem+0x9e>
 8005282:	f04f 0e00 	mov.w	lr, #0
 8005286:	4640      	mov	r0, r8
 8005288:	46ac      	mov	ip, r5
 800528a:	46f2      	mov	sl, lr
 800528c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005290:	b293      	uxth	r3, r2
 8005292:	fb06 e303 	mla	r3, r6, r3, lr
 8005296:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800529a:	b29b      	uxth	r3, r3
 800529c:	ebaa 0303 	sub.w	r3, sl, r3
 80052a0:	f8dc a000 	ldr.w	sl, [ip]
 80052a4:	0c12      	lsrs	r2, r2, #16
 80052a6:	fa13 f38a 	uxtah	r3, r3, sl
 80052aa:	fb06 e202 	mla	r2, r6, r2, lr
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	9b00      	ldr	r3, [sp, #0]
 80052b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052b6:	b292      	uxth	r2, r2
 80052b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80052c4:	4581      	cmp	r9, r0
 80052c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ca:	f84c 3b04 	str.w	r3, [ip], #4
 80052ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052d2:	d2db      	bcs.n	800528c <quorem+0x44>
 80052d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80052d8:	b92b      	cbnz	r3, 80052e6 <quorem+0x9e>
 80052da:	9b01      	ldr	r3, [sp, #4]
 80052dc:	3b04      	subs	r3, #4
 80052de:	429d      	cmp	r5, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	d32e      	bcc.n	8005342 <quorem+0xfa>
 80052e4:	613c      	str	r4, [r7, #16]
 80052e6:	4638      	mov	r0, r7
 80052e8:	f001 fbca 	bl	8006a80 <__mcmp>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	db24      	blt.n	800533a <quorem+0xf2>
 80052f0:	3601      	adds	r6, #1
 80052f2:	4628      	mov	r0, r5
 80052f4:	f04f 0c00 	mov.w	ip, #0
 80052f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80052fc:	f8d0 e000 	ldr.w	lr, [r0]
 8005300:	b293      	uxth	r3, r2
 8005302:	ebac 0303 	sub.w	r3, ip, r3
 8005306:	0c12      	lsrs	r2, r2, #16
 8005308:	fa13 f38e 	uxtah	r3, r3, lr
 800530c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005314:	b29b      	uxth	r3, r3
 8005316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800531a:	45c1      	cmp	r9, r8
 800531c:	f840 3b04 	str.w	r3, [r0], #4
 8005320:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005324:	d2e8      	bcs.n	80052f8 <quorem+0xb0>
 8005326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800532a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800532e:	b922      	cbnz	r2, 800533a <quorem+0xf2>
 8005330:	3b04      	subs	r3, #4
 8005332:	429d      	cmp	r5, r3
 8005334:	461a      	mov	r2, r3
 8005336:	d30a      	bcc.n	800534e <quorem+0x106>
 8005338:	613c      	str	r4, [r7, #16]
 800533a:	4630      	mov	r0, r6
 800533c:	b003      	add	sp, #12
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	3b04      	subs	r3, #4
 8005346:	2a00      	cmp	r2, #0
 8005348:	d1cc      	bne.n	80052e4 <quorem+0x9c>
 800534a:	3c01      	subs	r4, #1
 800534c:	e7c7      	b.n	80052de <quorem+0x96>
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	3b04      	subs	r3, #4
 8005352:	2a00      	cmp	r2, #0
 8005354:	d1f0      	bne.n	8005338 <quorem+0xf0>
 8005356:	3c01      	subs	r4, #1
 8005358:	e7eb      	b.n	8005332 <quorem+0xea>
 800535a:	2000      	movs	r0, #0
 800535c:	e7ee      	b.n	800533c <quorem+0xf4>
	...

08005360 <_dtoa_r>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	ed2d 8b04 	vpush	{d8-d9}
 8005368:	b093      	sub	sp, #76	; 0x4c
 800536a:	ec57 6b10 	vmov	r6, r7, d0
 800536e:	9106      	str	r1, [sp, #24]
 8005370:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005372:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005374:	9209      	str	r2, [sp, #36]	; 0x24
 8005376:	ee10 aa10 	vmov	sl, s0
 800537a:	4604      	mov	r4, r0
 800537c:	930c      	str	r3, [sp, #48]	; 0x30
 800537e:	46bb      	mov	fp, r7
 8005380:	b141      	cbz	r1, 8005394 <_dtoa_r+0x34>
 8005382:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005384:	604a      	str	r2, [r1, #4]
 8005386:	2301      	movs	r3, #1
 8005388:	4093      	lsls	r3, r2
 800538a:	608b      	str	r3, [r1, #8]
 800538c:	f001 f969 	bl	8006662 <_Bfree>
 8005390:	2300      	movs	r3, #0
 8005392:	6423      	str	r3, [r4, #64]	; 0x40
 8005394:	1e3b      	subs	r3, r7, #0
 8005396:	bfaa      	itet	ge
 8005398:	2300      	movge	r3, #0
 800539a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800539e:	602b      	strge	r3, [r5, #0]
 80053a0:	4ba3      	ldr	r3, [pc, #652]	; (8005630 <_dtoa_r+0x2d0>)
 80053a2:	bfbc      	itt	lt
 80053a4:	2201      	movlt	r2, #1
 80053a6:	602a      	strlt	r2, [r5, #0]
 80053a8:	ea33 030b 	bics.w	r3, r3, fp
 80053ac:	d11b      	bne.n	80053e6 <_dtoa_r+0x86>
 80053ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053ba:	4333      	orrs	r3, r6
 80053bc:	f000 8590 	beq.w	8005ee0 <_dtoa_r+0xb80>
 80053c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c2:	b90b      	cbnz	r3, 80053c8 <_dtoa_r+0x68>
 80053c4:	4b9b      	ldr	r3, [pc, #620]	; (8005634 <_dtoa_r+0x2d4>)
 80053c6:	e022      	b.n	800540e <_dtoa_r+0xae>
 80053c8:	4b9a      	ldr	r3, [pc, #616]	; (8005634 <_dtoa_r+0x2d4>)
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	3303      	adds	r3, #3
 80053ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	9801      	ldr	r0, [sp, #4]
 80053d4:	b013      	add	sp, #76	; 0x4c
 80053d6:	ecbd 8b04 	vpop	{d8-d9}
 80053da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053de:	4b96      	ldr	r3, [pc, #600]	; (8005638 <_dtoa_r+0x2d8>)
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	3308      	adds	r3, #8
 80053e4:	e7f3      	b.n	80053ce <_dtoa_r+0x6e>
 80053e6:	2200      	movs	r2, #0
 80053e8:	2300      	movs	r3, #0
 80053ea:	4650      	mov	r0, sl
 80053ec:	4659      	mov	r1, fp
 80053ee:	f7fb fb73 	bl	8000ad8 <__aeabi_dcmpeq>
 80053f2:	ec4b ab19 	vmov	d9, sl, fp
 80053f6:	4680      	mov	r8, r0
 80053f8:	b158      	cbz	r0, 8005412 <_dtoa_r+0xb2>
 80053fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053fc:	2301      	movs	r3, #1
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8569 	beq.w	8005eda <_dtoa_r+0xb7a>
 8005408:	488c      	ldr	r0, [pc, #560]	; (800563c <_dtoa_r+0x2dc>)
 800540a:	6018      	str	r0, [r3, #0]
 800540c:	1e43      	subs	r3, r0, #1
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	e7df      	b.n	80053d2 <_dtoa_r+0x72>
 8005412:	ec4b ab10 	vmov	d0, sl, fp
 8005416:	aa10      	add	r2, sp, #64	; 0x40
 8005418:	a911      	add	r1, sp, #68	; 0x44
 800541a:	4620      	mov	r0, r4
 800541c:	f001 fbd6 	bl	8006bcc <__d2b>
 8005420:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005424:	ee08 0a10 	vmov	s16, r0
 8005428:	2d00      	cmp	r5, #0
 800542a:	f000 8082 	beq.w	8005532 <_dtoa_r+0x1d2>
 800542e:	ee19 3a90 	vmov	r3, s19
 8005432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005436:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800543a:	4656      	mov	r6, sl
 800543c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005440:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005444:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005448:	4b7d      	ldr	r3, [pc, #500]	; (8005640 <_dtoa_r+0x2e0>)
 800544a:	2200      	movs	r2, #0
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fa ff22 	bl	8000298 <__aeabi_dsub>
 8005454:	a370      	add	r3, pc, #448	; (adr r3, 8005618 <_dtoa_r+0x2b8>)
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	f7fb f8d5 	bl	8000608 <__aeabi_dmul>
 800545e:	a370      	add	r3, pc, #448	; (adr r3, 8005620 <_dtoa_r+0x2c0>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fa ff1a 	bl	800029c <__adddf3>
 8005468:	4606      	mov	r6, r0
 800546a:	4628      	mov	r0, r5
 800546c:	460f      	mov	r7, r1
 800546e:	f7fb f861 	bl	8000534 <__aeabi_i2d>
 8005472:	a36d      	add	r3, pc, #436	; (adr r3, 8005628 <_dtoa_r+0x2c8>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fb f8c6 	bl	8000608 <__aeabi_dmul>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f7fa ff0a 	bl	800029c <__adddf3>
 8005488:	4606      	mov	r6, r0
 800548a:	460f      	mov	r7, r1
 800548c:	f7fb fb6c 	bl	8000b68 <__aeabi_d2iz>
 8005490:	2200      	movs	r2, #0
 8005492:	9000      	str	r0, [sp, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	f7fb fb27 	bl	8000aec <__aeabi_dcmplt>
 800549e:	b150      	cbz	r0, 80054b6 <_dtoa_r+0x156>
 80054a0:	9800      	ldr	r0, [sp, #0]
 80054a2:	f7fb f847 	bl	8000534 <__aeabi_i2d>
 80054a6:	4632      	mov	r2, r6
 80054a8:	463b      	mov	r3, r7
 80054aa:	f7fb fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 80054ae:	b910      	cbnz	r0, 80054b6 <_dtoa_r+0x156>
 80054b0:	9b00      	ldr	r3, [sp, #0]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	9b00      	ldr	r3, [sp, #0]
 80054b8:	2b16      	cmp	r3, #22
 80054ba:	d858      	bhi.n	800556e <_dtoa_r+0x20e>
 80054bc:	9a00      	ldr	r2, [sp, #0]
 80054be:	4b61      	ldr	r3, [pc, #388]	; (8005644 <_dtoa_r+0x2e4>)
 80054c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	ec51 0b19 	vmov	r0, r1, d9
 80054cc:	f7fb fb0e 	bl	8000aec <__aeabi_dcmplt>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d04e      	beq.n	8005572 <_dtoa_r+0x212>
 80054d4:	9b00      	ldr	r3, [sp, #0]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054e0:	1b5d      	subs	r5, r3, r5
 80054e2:	1e6b      	subs	r3, r5, #1
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	bf45      	ittet	mi
 80054e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80054ec:	9304      	strmi	r3, [sp, #16]
 80054ee:	2300      	movpl	r3, #0
 80054f0:	2300      	movmi	r3, #0
 80054f2:	bf4c      	ite	mi
 80054f4:	9305      	strmi	r3, [sp, #20]
 80054f6:	9304      	strpl	r3, [sp, #16]
 80054f8:	9b00      	ldr	r3, [sp, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	db3b      	blt.n	8005576 <_dtoa_r+0x216>
 80054fe:	9b05      	ldr	r3, [sp, #20]
 8005500:	9a00      	ldr	r2, [sp, #0]
 8005502:	920a      	str	r2, [sp, #40]	; 0x28
 8005504:	4413      	add	r3, r2
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	2300      	movs	r3, #0
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	2b09      	cmp	r3, #9
 8005510:	d869      	bhi.n	80055e6 <_dtoa_r+0x286>
 8005512:	2b05      	cmp	r3, #5
 8005514:	bfc4      	itt	gt
 8005516:	3b04      	subgt	r3, #4
 8005518:	9306      	strgt	r3, [sp, #24]
 800551a:	9b06      	ldr	r3, [sp, #24]
 800551c:	f1a3 0302 	sub.w	r3, r3, #2
 8005520:	bfcc      	ite	gt
 8005522:	2500      	movgt	r5, #0
 8005524:	2501      	movle	r5, #1
 8005526:	2b03      	cmp	r3, #3
 8005528:	d868      	bhi.n	80055fc <_dtoa_r+0x29c>
 800552a:	e8df f003 	tbb	[pc, r3]
 800552e:	3a2d      	.short	0x3a2d
 8005530:	5a38      	.short	0x5a38
 8005532:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005536:	441d      	add	r5, r3
 8005538:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800553c:	2b20      	cmp	r3, #32
 800553e:	bfc1      	itttt	gt
 8005540:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005544:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005548:	fa0b f303 	lslgt.w	r3, fp, r3
 800554c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005550:	bfda      	itte	le
 8005552:	f1c3 0320 	rsble	r3, r3, #32
 8005556:	fa06 f003 	lslle.w	r0, r6, r3
 800555a:	4318      	orrgt	r0, r3
 800555c:	f7fa ffda 	bl	8000514 <__aeabi_ui2d>
 8005560:	2301      	movs	r3, #1
 8005562:	4606      	mov	r6, r0
 8005564:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005568:	3d01      	subs	r5, #1
 800556a:	930e      	str	r3, [sp, #56]	; 0x38
 800556c:	e76c      	b.n	8005448 <_dtoa_r+0xe8>
 800556e:	2301      	movs	r3, #1
 8005570:	e7b4      	b.n	80054dc <_dtoa_r+0x17c>
 8005572:	900b      	str	r0, [sp, #44]	; 0x2c
 8005574:	e7b3      	b.n	80054de <_dtoa_r+0x17e>
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	9a00      	ldr	r2, [sp, #0]
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	9304      	str	r3, [sp, #16]
 800557e:	4253      	negs	r3, r2
 8005580:	9307      	str	r3, [sp, #28]
 8005582:	2300      	movs	r3, #0
 8005584:	930a      	str	r3, [sp, #40]	; 0x28
 8005586:	e7c1      	b.n	800550c <_dtoa_r+0x1ac>
 8005588:	2300      	movs	r3, #0
 800558a:	9308      	str	r3, [sp, #32]
 800558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	dc37      	bgt.n	8005602 <_dtoa_r+0x2a2>
 8005592:	2301      	movs	r3, #1
 8005594:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005598:	461a      	mov	r2, r3
 800559a:	9209      	str	r2, [sp, #36]	; 0x24
 800559c:	e00c      	b.n	80055b8 <_dtoa_r+0x258>
 800559e:	2301      	movs	r3, #1
 80055a0:	e7f3      	b.n	800558a <_dtoa_r+0x22a>
 80055a2:	2300      	movs	r3, #0
 80055a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a6:	9308      	str	r3, [sp, #32]
 80055a8:	9b00      	ldr	r3, [sp, #0]
 80055aa:	4413      	add	r3, r2
 80055ac:	9302      	str	r3, [sp, #8]
 80055ae:	3301      	adds	r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	bfb8      	it	lt
 80055b6:	2301      	movlt	r3, #1
 80055b8:	2200      	movs	r2, #0
 80055ba:	6462      	str	r2, [r4, #68]	; 0x44
 80055bc:	2204      	movs	r2, #4
 80055be:	f102 0014 	add.w	r0, r2, #20
 80055c2:	4298      	cmp	r0, r3
 80055c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80055c6:	d920      	bls.n	800560a <_dtoa_r+0x2aa>
 80055c8:	4620      	mov	r0, r4
 80055ca:	f001 f825 	bl	8006618 <_Balloc>
 80055ce:	9001      	str	r0, [sp, #4]
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d13d      	bne.n	8005650 <_dtoa_r+0x2f0>
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <_dtoa_r+0x2e8>)
 80055d6:	4602      	mov	r2, r0
 80055d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055dc:	481b      	ldr	r0, [pc, #108]	; (800564c <_dtoa_r+0x2ec>)
 80055de:	f001 fc77 	bl	8006ed0 <__assert_func>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e7de      	b.n	80055a4 <_dtoa_r+0x244>
 80055e6:	2501      	movs	r5, #1
 80055e8:	2300      	movs	r3, #0
 80055ea:	9306      	str	r3, [sp, #24]
 80055ec:	9508      	str	r5, [sp, #32]
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
 80055f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2312      	movs	r3, #18
 80055fa:	e7ce      	b.n	800559a <_dtoa_r+0x23a>
 80055fc:	2301      	movs	r3, #1
 80055fe:	9308      	str	r3, [sp, #32]
 8005600:	e7f5      	b.n	80055ee <_dtoa_r+0x28e>
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005608:	e7d6      	b.n	80055b8 <_dtoa_r+0x258>
 800560a:	3101      	adds	r1, #1
 800560c:	6461      	str	r1, [r4, #68]	; 0x44
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	e7d5      	b.n	80055be <_dtoa_r+0x25e>
 8005612:	bf00      	nop
 8005614:	f3af 8000 	nop.w
 8005618:	636f4361 	.word	0x636f4361
 800561c:	3fd287a7 	.word	0x3fd287a7
 8005620:	8b60c8b3 	.word	0x8b60c8b3
 8005624:	3fc68a28 	.word	0x3fc68a28
 8005628:	509f79fb 	.word	0x509f79fb
 800562c:	3fd34413 	.word	0x3fd34413
 8005630:	7ff00000 	.word	0x7ff00000
 8005634:	08008a1c 	.word	0x08008a1c
 8005638:	08008a20 	.word	0x08008a20
 800563c:	080089fb 	.word	0x080089fb
 8005640:	3ff80000 	.word	0x3ff80000
 8005644:	08008b20 	.word	0x08008b20
 8005648:	08008a29 	.word	0x08008a29
 800564c:	08008a3a 	.word	0x08008a3a
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	6423      	str	r3, [r4, #64]	; 0x40
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	2b0e      	cmp	r3, #14
 8005658:	f200 809d 	bhi.w	8005796 <_dtoa_r+0x436>
 800565c:	2d00      	cmp	r5, #0
 800565e:	f000 809a 	beq.w	8005796 <_dtoa_r+0x436>
 8005662:	9b00      	ldr	r3, [sp, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd32      	ble.n	80056ce <_dtoa_r+0x36e>
 8005668:	4ab7      	ldr	r2, [pc, #732]	; (8005948 <_dtoa_r+0x5e8>)
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005672:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005676:	9b00      	ldr	r3, [sp, #0]
 8005678:	05d8      	lsls	r0, r3, #23
 800567a:	ea4f 1723 	mov.w	r7, r3, asr #4
 800567e:	d516      	bpl.n	80056ae <_dtoa_r+0x34e>
 8005680:	4bb2      	ldr	r3, [pc, #712]	; (800594c <_dtoa_r+0x5ec>)
 8005682:	ec51 0b19 	vmov	r0, r1, d9
 8005686:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800568a:	f7fb f8e7 	bl	800085c <__aeabi_ddiv>
 800568e:	f007 070f 	and.w	r7, r7, #15
 8005692:	4682      	mov	sl, r0
 8005694:	468b      	mov	fp, r1
 8005696:	2503      	movs	r5, #3
 8005698:	4eac      	ldr	r6, [pc, #688]	; (800594c <_dtoa_r+0x5ec>)
 800569a:	b957      	cbnz	r7, 80056b2 <_dtoa_r+0x352>
 800569c:	4642      	mov	r2, r8
 800569e:	464b      	mov	r3, r9
 80056a0:	4650      	mov	r0, sl
 80056a2:	4659      	mov	r1, fp
 80056a4:	f7fb f8da 	bl	800085c <__aeabi_ddiv>
 80056a8:	4682      	mov	sl, r0
 80056aa:	468b      	mov	fp, r1
 80056ac:	e028      	b.n	8005700 <_dtoa_r+0x3a0>
 80056ae:	2502      	movs	r5, #2
 80056b0:	e7f2      	b.n	8005698 <_dtoa_r+0x338>
 80056b2:	07f9      	lsls	r1, r7, #31
 80056b4:	d508      	bpl.n	80056c8 <_dtoa_r+0x368>
 80056b6:	4640      	mov	r0, r8
 80056b8:	4649      	mov	r1, r9
 80056ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056be:	f7fa ffa3 	bl	8000608 <__aeabi_dmul>
 80056c2:	3501      	adds	r5, #1
 80056c4:	4680      	mov	r8, r0
 80056c6:	4689      	mov	r9, r1
 80056c8:	107f      	asrs	r7, r7, #1
 80056ca:	3608      	adds	r6, #8
 80056cc:	e7e5      	b.n	800569a <_dtoa_r+0x33a>
 80056ce:	f000 809b 	beq.w	8005808 <_dtoa_r+0x4a8>
 80056d2:	9b00      	ldr	r3, [sp, #0]
 80056d4:	4f9d      	ldr	r7, [pc, #628]	; (800594c <_dtoa_r+0x5ec>)
 80056d6:	425e      	negs	r6, r3
 80056d8:	4b9b      	ldr	r3, [pc, #620]	; (8005948 <_dtoa_r+0x5e8>)
 80056da:	f006 020f 	and.w	r2, r6, #15
 80056de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	ec51 0b19 	vmov	r0, r1, d9
 80056ea:	f7fa ff8d 	bl	8000608 <__aeabi_dmul>
 80056ee:	1136      	asrs	r6, r6, #4
 80056f0:	4682      	mov	sl, r0
 80056f2:	468b      	mov	fp, r1
 80056f4:	2300      	movs	r3, #0
 80056f6:	2502      	movs	r5, #2
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	d17a      	bne.n	80057f2 <_dtoa_r+0x492>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1d3      	bne.n	80056a8 <_dtoa_r+0x348>
 8005700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8082 	beq.w	800580c <_dtoa_r+0x4ac>
 8005708:	4b91      	ldr	r3, [pc, #580]	; (8005950 <_dtoa_r+0x5f0>)
 800570a:	2200      	movs	r2, #0
 800570c:	4650      	mov	r0, sl
 800570e:	4659      	mov	r1, fp
 8005710:	f7fb f9ec 	bl	8000aec <__aeabi_dcmplt>
 8005714:	2800      	cmp	r0, #0
 8005716:	d079      	beq.n	800580c <_dtoa_r+0x4ac>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d076      	beq.n	800580c <_dtoa_r+0x4ac>
 800571e:	9b02      	ldr	r3, [sp, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dd36      	ble.n	8005792 <_dtoa_r+0x432>
 8005724:	9b00      	ldr	r3, [sp, #0]
 8005726:	4650      	mov	r0, sl
 8005728:	4659      	mov	r1, fp
 800572a:	1e5f      	subs	r7, r3, #1
 800572c:	2200      	movs	r2, #0
 800572e:	4b89      	ldr	r3, [pc, #548]	; (8005954 <_dtoa_r+0x5f4>)
 8005730:	f7fa ff6a 	bl	8000608 <__aeabi_dmul>
 8005734:	9e02      	ldr	r6, [sp, #8]
 8005736:	4682      	mov	sl, r0
 8005738:	468b      	mov	fp, r1
 800573a:	3501      	adds	r5, #1
 800573c:	4628      	mov	r0, r5
 800573e:	f7fa fef9 	bl	8000534 <__aeabi_i2d>
 8005742:	4652      	mov	r2, sl
 8005744:	465b      	mov	r3, fp
 8005746:	f7fa ff5f 	bl	8000608 <__aeabi_dmul>
 800574a:	4b83      	ldr	r3, [pc, #524]	; (8005958 <_dtoa_r+0x5f8>)
 800574c:	2200      	movs	r2, #0
 800574e:	f7fa fda5 	bl	800029c <__adddf3>
 8005752:	46d0      	mov	r8, sl
 8005754:	46d9      	mov	r9, fp
 8005756:	4682      	mov	sl, r0
 8005758:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800575c:	2e00      	cmp	r6, #0
 800575e:	d158      	bne.n	8005812 <_dtoa_r+0x4b2>
 8005760:	4b7e      	ldr	r3, [pc, #504]	; (800595c <_dtoa_r+0x5fc>)
 8005762:	2200      	movs	r2, #0
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fa fd96 	bl	8000298 <__aeabi_dsub>
 800576c:	4652      	mov	r2, sl
 800576e:	465b      	mov	r3, fp
 8005770:	4680      	mov	r8, r0
 8005772:	4689      	mov	r9, r1
 8005774:	f7fb f9d8 	bl	8000b28 <__aeabi_dcmpgt>
 8005778:	2800      	cmp	r0, #0
 800577a:	f040 8296 	bne.w	8005caa <_dtoa_r+0x94a>
 800577e:	4652      	mov	r2, sl
 8005780:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005784:	4640      	mov	r0, r8
 8005786:	4649      	mov	r1, r9
 8005788:	f7fb f9b0 	bl	8000aec <__aeabi_dcmplt>
 800578c:	2800      	cmp	r0, #0
 800578e:	f040 828a 	bne.w	8005ca6 <_dtoa_r+0x946>
 8005792:	ec5b ab19 	vmov	sl, fp, d9
 8005796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005798:	2b00      	cmp	r3, #0
 800579a:	f2c0 8149 	blt.w	8005a30 <_dtoa_r+0x6d0>
 800579e:	9a00      	ldr	r2, [sp, #0]
 80057a0:	2a0e      	cmp	r2, #14
 80057a2:	f300 8145 	bgt.w	8005a30 <_dtoa_r+0x6d0>
 80057a6:	4b68      	ldr	r3, [pc, #416]	; (8005948 <_dtoa_r+0x5e8>)
 80057a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f280 80d6 	bge.w	8005964 <_dtoa_r+0x604>
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f300 80d2 	bgt.w	8005964 <_dtoa_r+0x604>
 80057c0:	f040 8270 	bne.w	8005ca4 <_dtoa_r+0x944>
 80057c4:	4b65      	ldr	r3, [pc, #404]	; (800595c <_dtoa_r+0x5fc>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f7fa ff1c 	bl	8000608 <__aeabi_dmul>
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	f7fb f99e 	bl	8000b14 <__aeabi_dcmpge>
 80057d8:	9e03      	ldr	r6, [sp, #12]
 80057da:	4637      	mov	r7, r6
 80057dc:	2800      	cmp	r0, #0
 80057de:	f040 8246 	bne.w	8005c6e <_dtoa_r+0x90e>
 80057e2:	9d01      	ldr	r5, [sp, #4]
 80057e4:	2331      	movs	r3, #49	; 0x31
 80057e6:	f805 3b01 	strb.w	r3, [r5], #1
 80057ea:	9b00      	ldr	r3, [sp, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	e241      	b.n	8005c76 <_dtoa_r+0x916>
 80057f2:	07f2      	lsls	r2, r6, #31
 80057f4:	d505      	bpl.n	8005802 <_dtoa_r+0x4a2>
 80057f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057fa:	f7fa ff05 	bl	8000608 <__aeabi_dmul>
 80057fe:	3501      	adds	r5, #1
 8005800:	2301      	movs	r3, #1
 8005802:	1076      	asrs	r6, r6, #1
 8005804:	3708      	adds	r7, #8
 8005806:	e777      	b.n	80056f8 <_dtoa_r+0x398>
 8005808:	2502      	movs	r5, #2
 800580a:	e779      	b.n	8005700 <_dtoa_r+0x3a0>
 800580c:	9f00      	ldr	r7, [sp, #0]
 800580e:	9e03      	ldr	r6, [sp, #12]
 8005810:	e794      	b.n	800573c <_dtoa_r+0x3dc>
 8005812:	9901      	ldr	r1, [sp, #4]
 8005814:	4b4c      	ldr	r3, [pc, #304]	; (8005948 <_dtoa_r+0x5e8>)
 8005816:	4431      	add	r1, r6
 8005818:	910d      	str	r1, [sp, #52]	; 0x34
 800581a:	9908      	ldr	r1, [sp, #32]
 800581c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005824:	2900      	cmp	r1, #0
 8005826:	d043      	beq.n	80058b0 <_dtoa_r+0x550>
 8005828:	494d      	ldr	r1, [pc, #308]	; (8005960 <_dtoa_r+0x600>)
 800582a:	2000      	movs	r0, #0
 800582c:	f7fb f816 	bl	800085c <__aeabi_ddiv>
 8005830:	4652      	mov	r2, sl
 8005832:	465b      	mov	r3, fp
 8005834:	f7fa fd30 	bl	8000298 <__aeabi_dsub>
 8005838:	9d01      	ldr	r5, [sp, #4]
 800583a:	4682      	mov	sl, r0
 800583c:	468b      	mov	fp, r1
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	f7fb f991 	bl	8000b68 <__aeabi_d2iz>
 8005846:	4606      	mov	r6, r0
 8005848:	f7fa fe74 	bl	8000534 <__aeabi_i2d>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fa fd20 	bl	8000298 <__aeabi_dsub>
 8005858:	3630      	adds	r6, #48	; 0x30
 800585a:	f805 6b01 	strb.w	r6, [r5], #1
 800585e:	4652      	mov	r2, sl
 8005860:	465b      	mov	r3, fp
 8005862:	4680      	mov	r8, r0
 8005864:	4689      	mov	r9, r1
 8005866:	f7fb f941 	bl	8000aec <__aeabi_dcmplt>
 800586a:	2800      	cmp	r0, #0
 800586c:	d163      	bne.n	8005936 <_dtoa_r+0x5d6>
 800586e:	4642      	mov	r2, r8
 8005870:	464b      	mov	r3, r9
 8005872:	4937      	ldr	r1, [pc, #220]	; (8005950 <_dtoa_r+0x5f0>)
 8005874:	2000      	movs	r0, #0
 8005876:	f7fa fd0f 	bl	8000298 <__aeabi_dsub>
 800587a:	4652      	mov	r2, sl
 800587c:	465b      	mov	r3, fp
 800587e:	f7fb f935 	bl	8000aec <__aeabi_dcmplt>
 8005882:	2800      	cmp	r0, #0
 8005884:	f040 80b6 	bne.w	80059f4 <_dtoa_r+0x694>
 8005888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800588a:	429d      	cmp	r5, r3
 800588c:	d081      	beq.n	8005792 <_dtoa_r+0x432>
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <_dtoa_r+0x5f4>)
 8005890:	2200      	movs	r2, #0
 8005892:	4650      	mov	r0, sl
 8005894:	4659      	mov	r1, fp
 8005896:	f7fa feb7 	bl	8000608 <__aeabi_dmul>
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <_dtoa_r+0x5f4>)
 800589c:	4682      	mov	sl, r0
 800589e:	468b      	mov	fp, r1
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	2200      	movs	r2, #0
 80058a6:	f7fa feaf 	bl	8000608 <__aeabi_dmul>
 80058aa:	4680      	mov	r8, r0
 80058ac:	4689      	mov	r9, r1
 80058ae:	e7c6      	b.n	800583e <_dtoa_r+0x4de>
 80058b0:	4650      	mov	r0, sl
 80058b2:	4659      	mov	r1, fp
 80058b4:	f7fa fea8 	bl	8000608 <__aeabi_dmul>
 80058b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ba:	9d01      	ldr	r5, [sp, #4]
 80058bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80058be:	4682      	mov	sl, r0
 80058c0:	468b      	mov	fp, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	f7fb f94f 	bl	8000b68 <__aeabi_d2iz>
 80058ca:	4606      	mov	r6, r0
 80058cc:	f7fa fe32 	bl	8000534 <__aeabi_i2d>
 80058d0:	3630      	adds	r6, #48	; 0x30
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fa fcdd 	bl	8000298 <__aeabi_dsub>
 80058de:	f805 6b01 	strb.w	r6, [r5], #1
 80058e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e4:	429d      	cmp	r5, r3
 80058e6:	4680      	mov	r8, r0
 80058e8:	4689      	mov	r9, r1
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	d124      	bne.n	800593a <_dtoa_r+0x5da>
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <_dtoa_r+0x600>)
 80058f2:	4650      	mov	r0, sl
 80058f4:	4659      	mov	r1, fp
 80058f6:	f7fa fcd1 	bl	800029c <__adddf3>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fb f911 	bl	8000b28 <__aeabi_dcmpgt>
 8005906:	2800      	cmp	r0, #0
 8005908:	d174      	bne.n	80059f4 <_dtoa_r+0x694>
 800590a:	4652      	mov	r2, sl
 800590c:	465b      	mov	r3, fp
 800590e:	4914      	ldr	r1, [pc, #80]	; (8005960 <_dtoa_r+0x600>)
 8005910:	2000      	movs	r0, #0
 8005912:	f7fa fcc1 	bl	8000298 <__aeabi_dsub>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fb f8e5 	bl	8000aec <__aeabi_dcmplt>
 8005922:	2800      	cmp	r0, #0
 8005924:	f43f af35 	beq.w	8005792 <_dtoa_r+0x432>
 8005928:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800592a:	1e6b      	subs	r3, r5, #1
 800592c:	930f      	str	r3, [sp, #60]	; 0x3c
 800592e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005932:	2b30      	cmp	r3, #48	; 0x30
 8005934:	d0f8      	beq.n	8005928 <_dtoa_r+0x5c8>
 8005936:	9700      	str	r7, [sp, #0]
 8005938:	e04a      	b.n	80059d0 <_dtoa_r+0x670>
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <_dtoa_r+0x5f4>)
 800593c:	f7fa fe64 	bl	8000608 <__aeabi_dmul>
 8005940:	4680      	mov	r8, r0
 8005942:	4689      	mov	r9, r1
 8005944:	e7bd      	b.n	80058c2 <_dtoa_r+0x562>
 8005946:	bf00      	nop
 8005948:	08008b20 	.word	0x08008b20
 800594c:	08008af8 	.word	0x08008af8
 8005950:	3ff00000 	.word	0x3ff00000
 8005954:	40240000 	.word	0x40240000
 8005958:	401c0000 	.word	0x401c0000
 800595c:	40140000 	.word	0x40140000
 8005960:	3fe00000 	.word	0x3fe00000
 8005964:	9d01      	ldr	r5, [sp, #4]
 8005966:	4656      	mov	r6, sl
 8005968:	465f      	mov	r7, fp
 800596a:	4642      	mov	r2, r8
 800596c:	464b      	mov	r3, r9
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa ff73 	bl	800085c <__aeabi_ddiv>
 8005976:	f7fb f8f7 	bl	8000b68 <__aeabi_d2iz>
 800597a:	4682      	mov	sl, r0
 800597c:	f7fa fdda 	bl	8000534 <__aeabi_i2d>
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	f7fa fe40 	bl	8000608 <__aeabi_dmul>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4630      	mov	r0, r6
 800598e:	4639      	mov	r1, r7
 8005990:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005994:	f7fa fc80 	bl	8000298 <__aeabi_dsub>
 8005998:	f805 6b01 	strb.w	r6, [r5], #1
 800599c:	9e01      	ldr	r6, [sp, #4]
 800599e:	9f03      	ldr	r7, [sp, #12]
 80059a0:	1bae      	subs	r6, r5, r6
 80059a2:	42b7      	cmp	r7, r6
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	d135      	bne.n	8005a16 <_dtoa_r+0x6b6>
 80059aa:	f7fa fc77 	bl	800029c <__adddf3>
 80059ae:	4642      	mov	r2, r8
 80059b0:	464b      	mov	r3, r9
 80059b2:	4606      	mov	r6, r0
 80059b4:	460f      	mov	r7, r1
 80059b6:	f7fb f8b7 	bl	8000b28 <__aeabi_dcmpgt>
 80059ba:	b9d0      	cbnz	r0, 80059f2 <_dtoa_r+0x692>
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	4630      	mov	r0, r6
 80059c2:	4639      	mov	r1, r7
 80059c4:	f7fb f888 	bl	8000ad8 <__aeabi_dcmpeq>
 80059c8:	b110      	cbz	r0, 80059d0 <_dtoa_r+0x670>
 80059ca:	f01a 0f01 	tst.w	sl, #1
 80059ce:	d110      	bne.n	80059f2 <_dtoa_r+0x692>
 80059d0:	4620      	mov	r0, r4
 80059d2:	ee18 1a10 	vmov	r1, s16
 80059d6:	f000 fe44 	bl	8006662 <_Bfree>
 80059da:	2300      	movs	r3, #0
 80059dc:	9800      	ldr	r0, [sp, #0]
 80059de:	702b      	strb	r3, [r5, #0]
 80059e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059e2:	3001      	adds	r0, #1
 80059e4:	6018      	str	r0, [r3, #0]
 80059e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f43f acf2 	beq.w	80053d2 <_dtoa_r+0x72>
 80059ee:	601d      	str	r5, [r3, #0]
 80059f0:	e4ef      	b.n	80053d2 <_dtoa_r+0x72>
 80059f2:	9f00      	ldr	r7, [sp, #0]
 80059f4:	462b      	mov	r3, r5
 80059f6:	461d      	mov	r5, r3
 80059f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059fc:	2a39      	cmp	r2, #57	; 0x39
 80059fe:	d106      	bne.n	8005a0e <_dtoa_r+0x6ae>
 8005a00:	9a01      	ldr	r2, [sp, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d1f7      	bne.n	80059f6 <_dtoa_r+0x696>
 8005a06:	9901      	ldr	r1, [sp, #4]
 8005a08:	2230      	movs	r2, #48	; 0x30
 8005a0a:	3701      	adds	r7, #1
 8005a0c:	700a      	strb	r2, [r1, #0]
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	3201      	adds	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e78f      	b.n	8005936 <_dtoa_r+0x5d6>
 8005a16:	4ba6      	ldr	r3, [pc, #664]	; (8005cb0 <_dtoa_r+0x950>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f7fa fdf5 	bl	8000608 <__aeabi_dmul>
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2300      	movs	r3, #0
 8005a22:	4606      	mov	r6, r0
 8005a24:	460f      	mov	r7, r1
 8005a26:	f7fb f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d09d      	beq.n	800596a <_dtoa_r+0x60a>
 8005a2e:	e7cf      	b.n	80059d0 <_dtoa_r+0x670>
 8005a30:	9a08      	ldr	r2, [sp, #32]
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	f000 80d7 	beq.w	8005be6 <_dtoa_r+0x886>
 8005a38:	9a06      	ldr	r2, [sp, #24]
 8005a3a:	2a01      	cmp	r2, #1
 8005a3c:	f300 80ba 	bgt.w	8005bb4 <_dtoa_r+0x854>
 8005a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	f000 80b2 	beq.w	8005bac <_dtoa_r+0x84c>
 8005a48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a4c:	9e07      	ldr	r6, [sp, #28]
 8005a4e:	9d04      	ldr	r5, [sp, #16]
 8005a50:	9a04      	ldr	r2, [sp, #16]
 8005a52:	441a      	add	r2, r3
 8005a54:	9204      	str	r2, [sp, #16]
 8005a56:	9a05      	ldr	r2, [sp, #20]
 8005a58:	2101      	movs	r1, #1
 8005a5a:	441a      	add	r2, r3
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	9205      	str	r2, [sp, #20]
 8005a60:	f000 fe9e 	bl	80067a0 <__i2b>
 8005a64:	4607      	mov	r7, r0
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	dd0c      	ble.n	8005a84 <_dtoa_r+0x724>
 8005a6a:	9b05      	ldr	r3, [sp, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dd09      	ble.n	8005a84 <_dtoa_r+0x724>
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	9a04      	ldr	r2, [sp, #16]
 8005a74:	bfa8      	it	ge
 8005a76:	462b      	movge	r3, r5
 8005a78:	1ad2      	subs	r2, r2, r3
 8005a7a:	9204      	str	r2, [sp, #16]
 8005a7c:	9a05      	ldr	r2, [sp, #20]
 8005a7e:	1aed      	subs	r5, r5, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	9b07      	ldr	r3, [sp, #28]
 8005a86:	b31b      	cbz	r3, 8005ad0 <_dtoa_r+0x770>
 8005a88:	9b08      	ldr	r3, [sp, #32]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80af 	beq.w	8005bee <_dtoa_r+0x88e>
 8005a90:	2e00      	cmp	r6, #0
 8005a92:	dd13      	ble.n	8005abc <_dtoa_r+0x75c>
 8005a94:	4639      	mov	r1, r7
 8005a96:	4632      	mov	r2, r6
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 ff41 	bl	8006920 <__pow5mult>
 8005a9e:	ee18 2a10 	vmov	r2, s16
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fe90 	bl	80067cc <__multiply>
 8005aac:	ee18 1a10 	vmov	r1, s16
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fdd5 	bl	8006662 <_Bfree>
 8005ab8:	ee08 8a10 	vmov	s16, r8
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	1b9a      	subs	r2, r3, r6
 8005ac0:	d006      	beq.n	8005ad0 <_dtoa_r+0x770>
 8005ac2:	ee18 1a10 	vmov	r1, s16
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 ff2a 	bl	8006920 <__pow5mult>
 8005acc:	ee08 0a10 	vmov	s16, r0
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fe64 	bl	80067a0 <__i2b>
 8005ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	4606      	mov	r6, r0
 8005ade:	f340 8088 	ble.w	8005bf2 <_dtoa_r+0x892>
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4601      	mov	r1, r0
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 ff1a 	bl	8006920 <__pow5mult>
 8005aec:	9b06      	ldr	r3, [sp, #24]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	4606      	mov	r6, r0
 8005af2:	f340 8081 	ble.w	8005bf8 <_dtoa_r+0x898>
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	6933      	ldr	r3, [r6, #16]
 8005afc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b00:	6918      	ldr	r0, [r3, #16]
 8005b02:	f000 fdfd 	bl	8006700 <__hi0bits>
 8005b06:	f1c0 0020 	rsb	r0, r0, #32
 8005b0a:	9b05      	ldr	r3, [sp, #20]
 8005b0c:	4418      	add	r0, r3
 8005b0e:	f010 001f 	ands.w	r0, r0, #31
 8005b12:	f000 8092 	beq.w	8005c3a <_dtoa_r+0x8da>
 8005b16:	f1c0 0320 	rsb	r3, r0, #32
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	f340 808a 	ble.w	8005c34 <_dtoa_r+0x8d4>
 8005b20:	f1c0 001c 	rsb	r0, r0, #28
 8005b24:	9b04      	ldr	r3, [sp, #16]
 8005b26:	4403      	add	r3, r0
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	9b05      	ldr	r3, [sp, #20]
 8005b2c:	4403      	add	r3, r0
 8005b2e:	4405      	add	r5, r0
 8005b30:	9305      	str	r3, [sp, #20]
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dd07      	ble.n	8005b48 <_dtoa_r+0x7e8>
 8005b38:	ee18 1a10 	vmov	r1, s16
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 ff2e 	bl	80069a0 <__lshift>
 8005b44:	ee08 0a10 	vmov	s16, r0
 8005b48:	9b05      	ldr	r3, [sp, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	dd05      	ble.n	8005b5a <_dtoa_r+0x7fa>
 8005b4e:	4631      	mov	r1, r6
 8005b50:	461a      	mov	r2, r3
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 ff24 	bl	80069a0 <__lshift>
 8005b58:	4606      	mov	r6, r0
 8005b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d06e      	beq.n	8005c3e <_dtoa_r+0x8de>
 8005b60:	ee18 0a10 	vmov	r0, s16
 8005b64:	4631      	mov	r1, r6
 8005b66:	f000 ff8b 	bl	8006a80 <__mcmp>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	da67      	bge.n	8005c3e <_dtoa_r+0x8de>
 8005b6e:	9b00      	ldr	r3, [sp, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	ee18 1a10 	vmov	r1, s16
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	220a      	movs	r2, #10
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fd79 	bl	8006674 <__multadd>
 8005b82:	9b08      	ldr	r3, [sp, #32]
 8005b84:	ee08 0a10 	vmov	s16, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 81b0 	beq.w	8005eee <_dtoa_r+0xb8e>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4639      	mov	r1, r7
 8005b92:	220a      	movs	r2, #10
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 fd6d 	bl	8006674 <__multadd>
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	f300 808e 	bgt.w	8005cc0 <_dtoa_r+0x960>
 8005ba4:	9b06      	ldr	r3, [sp, #24]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	dc51      	bgt.n	8005c4e <_dtoa_r+0x8ee>
 8005baa:	e089      	b.n	8005cc0 <_dtoa_r+0x960>
 8005bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bb2:	e74b      	b.n	8005a4c <_dtoa_r+0x6ec>
 8005bb4:	9b03      	ldr	r3, [sp, #12]
 8005bb6:	1e5e      	subs	r6, r3, #1
 8005bb8:	9b07      	ldr	r3, [sp, #28]
 8005bba:	42b3      	cmp	r3, r6
 8005bbc:	bfbf      	itttt	lt
 8005bbe:	9b07      	ldrlt	r3, [sp, #28]
 8005bc0:	9607      	strlt	r6, [sp, #28]
 8005bc2:	1af2      	sublt	r2, r6, r3
 8005bc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bc6:	bfb6      	itet	lt
 8005bc8:	189b      	addlt	r3, r3, r2
 8005bca:	1b9e      	subge	r6, r3, r6
 8005bcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	bfb8      	it	lt
 8005bd2:	2600      	movlt	r6, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bfb7      	itett	lt
 8005bd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005bdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005be0:	1a9d      	sublt	r5, r3, r2
 8005be2:	2300      	movlt	r3, #0
 8005be4:	e734      	b.n	8005a50 <_dtoa_r+0x6f0>
 8005be6:	9e07      	ldr	r6, [sp, #28]
 8005be8:	9d04      	ldr	r5, [sp, #16]
 8005bea:	9f08      	ldr	r7, [sp, #32]
 8005bec:	e73b      	b.n	8005a66 <_dtoa_r+0x706>
 8005bee:	9a07      	ldr	r2, [sp, #28]
 8005bf0:	e767      	b.n	8005ac2 <_dtoa_r+0x762>
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	dc18      	bgt.n	8005c2a <_dtoa_r+0x8ca>
 8005bf8:	f1ba 0f00 	cmp.w	sl, #0
 8005bfc:	d115      	bne.n	8005c2a <_dtoa_r+0x8ca>
 8005bfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c02:	b993      	cbnz	r3, 8005c2a <_dtoa_r+0x8ca>
 8005c04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c08:	0d1b      	lsrs	r3, r3, #20
 8005c0a:	051b      	lsls	r3, r3, #20
 8005c0c:	b183      	cbz	r3, 8005c30 <_dtoa_r+0x8d0>
 8005c0e:	9b04      	ldr	r3, [sp, #16]
 8005c10:	3301      	adds	r3, #1
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	9b05      	ldr	r3, [sp, #20]
 8005c16:	3301      	adds	r3, #1
 8005c18:	9305      	str	r3, [sp, #20]
 8005c1a:	f04f 0801 	mov.w	r8, #1
 8005c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f af6a 	bne.w	8005afa <_dtoa_r+0x79a>
 8005c26:	2001      	movs	r0, #1
 8005c28:	e76f      	b.n	8005b0a <_dtoa_r+0x7aa>
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	e7f6      	b.n	8005c1e <_dtoa_r+0x8be>
 8005c30:	4698      	mov	r8, r3
 8005c32:	e7f4      	b.n	8005c1e <_dtoa_r+0x8be>
 8005c34:	f43f af7d 	beq.w	8005b32 <_dtoa_r+0x7d2>
 8005c38:	4618      	mov	r0, r3
 8005c3a:	301c      	adds	r0, #28
 8005c3c:	e772      	b.n	8005b24 <_dtoa_r+0x7c4>
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dc37      	bgt.n	8005cb4 <_dtoa_r+0x954>
 8005c44:	9b06      	ldr	r3, [sp, #24]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	dd34      	ble.n	8005cb4 <_dtoa_r+0x954>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	9b02      	ldr	r3, [sp, #8]
 8005c50:	b96b      	cbnz	r3, 8005c6e <_dtoa_r+0x90e>
 8005c52:	4631      	mov	r1, r6
 8005c54:	2205      	movs	r2, #5
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 fd0c 	bl	8006674 <__multadd>
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4606      	mov	r6, r0
 8005c60:	ee18 0a10 	vmov	r0, s16
 8005c64:	f000 ff0c 	bl	8006a80 <__mcmp>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f73f adba 	bgt.w	80057e2 <_dtoa_r+0x482>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c70:	9d01      	ldr	r5, [sp, #4]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	f04f 0800 	mov.w	r8, #0
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 fcf0 	bl	8006662 <_Bfree>
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	f43f aea4 	beq.w	80059d0 <_dtoa_r+0x670>
 8005c88:	f1b8 0f00 	cmp.w	r8, #0
 8005c8c:	d005      	beq.n	8005c9a <_dtoa_r+0x93a>
 8005c8e:	45b8      	cmp	r8, r7
 8005c90:	d003      	beq.n	8005c9a <_dtoa_r+0x93a>
 8005c92:	4641      	mov	r1, r8
 8005c94:	4620      	mov	r0, r4
 8005c96:	f000 fce4 	bl	8006662 <_Bfree>
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 fce0 	bl	8006662 <_Bfree>
 8005ca2:	e695      	b.n	80059d0 <_dtoa_r+0x670>
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	4637      	mov	r7, r6
 8005ca8:	e7e1      	b.n	8005c6e <_dtoa_r+0x90e>
 8005caa:	9700      	str	r7, [sp, #0]
 8005cac:	4637      	mov	r7, r6
 8005cae:	e598      	b.n	80057e2 <_dtoa_r+0x482>
 8005cb0:	40240000 	.word	0x40240000
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80c9 	beq.w	8005e4e <_dtoa_r+0xaee>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	dd05      	ble.n	8005cd0 <_dtoa_r+0x970>
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fe69 	bl	80069a0 <__lshift>
 8005cce:	4607      	mov	r7, r0
 8005cd0:	f1b8 0f00 	cmp.w	r8, #0
 8005cd4:	d05a      	beq.n	8005d8c <_dtoa_r+0xa2c>
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fc9d 	bl	8006618 <_Balloc>
 8005cde:	4605      	mov	r5, r0
 8005ce0:	b920      	cbnz	r0, 8005cec <_dtoa_r+0x98c>
 8005ce2:	4b87      	ldr	r3, [pc, #540]	; (8005f00 <_dtoa_r+0xba0>)
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cea:	e477      	b.n	80055dc <_dtoa_r+0x27c>
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	3202      	adds	r2, #2
 8005cf0:	0092      	lsls	r2, r2, #2
 8005cf2:	f107 010c 	add.w	r1, r7, #12
 8005cf6:	300c      	adds	r0, #12
 8005cf8:	f000 fc74 	bl	80065e4 <memcpy>
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fe4d 	bl	80069a0 <__lshift>
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	f103 0901 	add.w	r9, r3, #1
 8005d0c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	f00a 0301 	and.w	r3, sl, #1
 8005d18:	46b8      	mov	r8, r7
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4631      	mov	r1, r6
 8005d20:	ee18 0a10 	vmov	r0, s16
 8005d24:	f7ff fa90 	bl	8005248 <quorem>
 8005d28:	4641      	mov	r1, r8
 8005d2a:	9002      	str	r0, [sp, #8]
 8005d2c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d30:	ee18 0a10 	vmov	r0, s16
 8005d34:	f000 fea4 	bl	8006a80 <__mcmp>
 8005d38:	463a      	mov	r2, r7
 8005d3a:	9003      	str	r0, [sp, #12]
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 feba 	bl	8006ab8 <__mdiff>
 8005d44:	68c2      	ldr	r2, [r0, #12]
 8005d46:	f109 3bff 	add.w	fp, r9, #4294967295
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	bb02      	cbnz	r2, 8005d90 <_dtoa_r+0xa30>
 8005d4e:	4601      	mov	r1, r0
 8005d50:	ee18 0a10 	vmov	r0, s16
 8005d54:	f000 fe94 	bl	8006a80 <__mcmp>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	9207      	str	r2, [sp, #28]
 8005d60:	f000 fc7f 	bl	8006662 <_Bfree>
 8005d64:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005d68:	ea43 0102 	orr.w	r1, r3, r2
 8005d6c:	9b04      	ldr	r3, [sp, #16]
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	464d      	mov	r5, r9
 8005d72:	d10f      	bne.n	8005d94 <_dtoa_r+0xa34>
 8005d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d78:	d02a      	beq.n	8005dd0 <_dtoa_r+0xa70>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dd02      	ble.n	8005d86 <_dtoa_r+0xa26>
 8005d80:	9b02      	ldr	r3, [sp, #8]
 8005d82:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005d86:	f88b a000 	strb.w	sl, [fp]
 8005d8a:	e776      	b.n	8005c7a <_dtoa_r+0x91a>
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	e7ba      	b.n	8005d06 <_dtoa_r+0x9a6>
 8005d90:	2201      	movs	r2, #1
 8005d92:	e7e2      	b.n	8005d5a <_dtoa_r+0x9fa>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	db04      	blt.n	8005da4 <_dtoa_r+0xa44>
 8005d9a:	9906      	ldr	r1, [sp, #24]
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	9904      	ldr	r1, [sp, #16]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	d122      	bne.n	8005dea <_dtoa_r+0xa8a>
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	ddee      	ble.n	8005d86 <_dtoa_r+0xa26>
 8005da8:	ee18 1a10 	vmov	r1, s16
 8005dac:	2201      	movs	r2, #1
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fdf6 	bl	80069a0 <__lshift>
 8005db4:	4631      	mov	r1, r6
 8005db6:	ee08 0a10 	vmov	s16, r0
 8005dba:	f000 fe61 	bl	8006a80 <__mcmp>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	dc03      	bgt.n	8005dca <_dtoa_r+0xa6a>
 8005dc2:	d1e0      	bne.n	8005d86 <_dtoa_r+0xa26>
 8005dc4:	f01a 0f01 	tst.w	sl, #1
 8005dc8:	d0dd      	beq.n	8005d86 <_dtoa_r+0xa26>
 8005dca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005dce:	d1d7      	bne.n	8005d80 <_dtoa_r+0xa20>
 8005dd0:	2339      	movs	r3, #57	; 0x39
 8005dd2:	f88b 3000 	strb.w	r3, [fp]
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	461d      	mov	r5, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005de0:	2a39      	cmp	r2, #57	; 0x39
 8005de2:	d071      	beq.n	8005ec8 <_dtoa_r+0xb68>
 8005de4:	3201      	adds	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e747      	b.n	8005c7a <_dtoa_r+0x91a>
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	dd07      	ble.n	8005dfe <_dtoa_r+0xa9e>
 8005dee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005df2:	d0ed      	beq.n	8005dd0 <_dtoa_r+0xa70>
 8005df4:	f10a 0301 	add.w	r3, sl, #1
 8005df8:	f88b 3000 	strb.w	r3, [fp]
 8005dfc:	e73d      	b.n	8005c7a <_dtoa_r+0x91a>
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e04:	4599      	cmp	r9, r3
 8005e06:	d047      	beq.n	8005e98 <_dtoa_r+0xb38>
 8005e08:	ee18 1a10 	vmov	r1, s16
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fc2f 	bl	8006674 <__multadd>
 8005e16:	45b8      	cmp	r8, r7
 8005e18:	ee08 0a10 	vmov	s16, r0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	f04f 020a 	mov.w	r2, #10
 8005e24:	4641      	mov	r1, r8
 8005e26:	4620      	mov	r0, r4
 8005e28:	d106      	bne.n	8005e38 <_dtoa_r+0xad8>
 8005e2a:	f000 fc23 	bl	8006674 <__multadd>
 8005e2e:	4680      	mov	r8, r0
 8005e30:	4607      	mov	r7, r0
 8005e32:	f109 0901 	add.w	r9, r9, #1
 8005e36:	e772      	b.n	8005d1e <_dtoa_r+0x9be>
 8005e38:	f000 fc1c 	bl	8006674 <__multadd>
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	4680      	mov	r8, r0
 8005e40:	2300      	movs	r3, #0
 8005e42:	220a      	movs	r2, #10
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fc15 	bl	8006674 <__multadd>
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	e7f1      	b.n	8005e32 <_dtoa_r+0xad2>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	9302      	str	r3, [sp, #8]
 8005e52:	9d01      	ldr	r5, [sp, #4]
 8005e54:	ee18 0a10 	vmov	r0, s16
 8005e58:	4631      	mov	r1, r6
 8005e5a:	f7ff f9f5 	bl	8005248 <quorem>
 8005e5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e62:	9b01      	ldr	r3, [sp, #4]
 8005e64:	f805 ab01 	strb.w	sl, [r5], #1
 8005e68:	1aea      	subs	r2, r5, r3
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	dd09      	ble.n	8005e84 <_dtoa_r+0xb24>
 8005e70:	ee18 1a10 	vmov	r1, s16
 8005e74:	2300      	movs	r3, #0
 8005e76:	220a      	movs	r2, #10
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 fbfb 	bl	8006674 <__multadd>
 8005e7e:	ee08 0a10 	vmov	s16, r0
 8005e82:	e7e7      	b.n	8005e54 <_dtoa_r+0xaf4>
 8005e84:	9b02      	ldr	r3, [sp, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfc8      	it	gt
 8005e8a:	461d      	movgt	r5, r3
 8005e8c:	9b01      	ldr	r3, [sp, #4]
 8005e8e:	bfd8      	it	le
 8005e90:	2501      	movle	r5, #1
 8005e92:	441d      	add	r5, r3
 8005e94:	f04f 0800 	mov.w	r8, #0
 8005e98:	ee18 1a10 	vmov	r1, s16
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fd7e 	bl	80069a0 <__lshift>
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	ee08 0a10 	vmov	s16, r0
 8005eaa:	f000 fde9 	bl	8006a80 <__mcmp>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	dc91      	bgt.n	8005dd6 <_dtoa_r+0xa76>
 8005eb2:	d102      	bne.n	8005eba <_dtoa_r+0xb5a>
 8005eb4:	f01a 0f01 	tst.w	sl, #1
 8005eb8:	d18d      	bne.n	8005dd6 <_dtoa_r+0xa76>
 8005eba:	462b      	mov	r3, r5
 8005ebc:	461d      	mov	r5, r3
 8005ebe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ec2:	2a30      	cmp	r2, #48	; 0x30
 8005ec4:	d0fa      	beq.n	8005ebc <_dtoa_r+0xb5c>
 8005ec6:	e6d8      	b.n	8005c7a <_dtoa_r+0x91a>
 8005ec8:	9a01      	ldr	r2, [sp, #4]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d184      	bne.n	8005dd8 <_dtoa_r+0xa78>
 8005ece:	9b00      	ldr	r3, [sp, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	2331      	movs	r3, #49	; 0x31
 8005ed6:	7013      	strb	r3, [r2, #0]
 8005ed8:	e6cf      	b.n	8005c7a <_dtoa_r+0x91a>
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <_dtoa_r+0xba4>)
 8005edc:	f7ff ba97 	b.w	800540e <_dtoa_r+0xae>
 8005ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f47f aa7b 	bne.w	80053de <_dtoa_r+0x7e>
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <_dtoa_r+0xba8>)
 8005eea:	f7ff ba90 	b.w	800540e <_dtoa_r+0xae>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dcae      	bgt.n	8005e52 <_dtoa_r+0xaf2>
 8005ef4:	9b06      	ldr	r3, [sp, #24]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	f73f aea9 	bgt.w	8005c4e <_dtoa_r+0x8ee>
 8005efc:	e7a9      	b.n	8005e52 <_dtoa_r+0xaf2>
 8005efe:	bf00      	nop
 8005f00:	08008a29 	.word	0x08008a29
 8005f04:	080089fa 	.word	0x080089fa
 8005f08:	08008a20 	.word	0x08008a20

08005f0c <__libc_fini_array>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	; (8005f2c <__libc_fini_array+0x20>)
 8005f10:	4c07      	ldr	r4, [pc, #28]	; (8005f30 <__libc_fini_array+0x24>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	b91c      	cbnz	r4, 8005f20 <__libc_fini_array+0x14>
 8005f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f1c:	f002 bc9c 	b.w	8008858 <_fini>
 8005f20:	3c01      	subs	r4, #1
 8005f22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005f26:	4798      	blx	r3
 8005f28:	e7f5      	b.n	8005f16 <__libc_fini_array+0xa>
 8005f2a:	bf00      	nop
 8005f2c:	08008d6c 	.word	0x08008d6c
 8005f30:	08008d70 	.word	0x08008d70

08005f34 <_malloc_trim_r>:
 8005f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f38:	4606      	mov	r6, r0
 8005f3a:	2008      	movs	r0, #8
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	f000 ff77 	bl	8006e30 <sysconf>
 8005f42:	4f23      	ldr	r7, [pc, #140]	; (8005fd0 <_malloc_trim_r+0x9c>)
 8005f44:	4680      	mov	r8, r0
 8005f46:	4630      	mov	r0, r6
 8005f48:	f000 fb5a 	bl	8006600 <__malloc_lock>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685d      	ldr	r5, [r3, #4]
 8005f50:	f025 0503 	bic.w	r5, r5, #3
 8005f54:	1b2c      	subs	r4, r5, r4
 8005f56:	3c11      	subs	r4, #17
 8005f58:	4444      	add	r4, r8
 8005f5a:	fbb4 f4f8 	udiv	r4, r4, r8
 8005f5e:	3c01      	subs	r4, #1
 8005f60:	fb08 f404 	mul.w	r4, r8, r4
 8005f64:	45a0      	cmp	r8, r4
 8005f66:	dd05      	ble.n	8005f74 <_malloc_trim_r+0x40>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 fb4f 	bl	800660c <__malloc_unlock>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f74:	2100      	movs	r1, #0
 8005f76:	4630      	mov	r0, r6
 8005f78:	f000 febc 	bl	8006cf4 <_sbrk_r>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	442b      	add	r3, r5
 8005f80:	4298      	cmp	r0, r3
 8005f82:	d1f1      	bne.n	8005f68 <_malloc_trim_r+0x34>
 8005f84:	4261      	negs	r1, r4
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 feb4 	bl	8006cf4 <_sbrk_r>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d110      	bne.n	8005fb2 <_malloc_trim_r+0x7e>
 8005f90:	2100      	movs	r1, #0
 8005f92:	4630      	mov	r0, r6
 8005f94:	f000 feae 	bl	8006cf4 <_sbrk_r>
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	1a83      	subs	r3, r0, r2
 8005f9c:	2b0f      	cmp	r3, #15
 8005f9e:	dde3      	ble.n	8005f68 <_malloc_trim_r+0x34>
 8005fa0:	490c      	ldr	r1, [pc, #48]	; (8005fd4 <_malloc_trim_r+0xa0>)
 8005fa2:	6809      	ldr	r1, [r1, #0]
 8005fa4:	1a40      	subs	r0, r0, r1
 8005fa6:	490c      	ldr	r1, [pc, #48]	; (8005fd8 <_malloc_trim_r+0xa4>)
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	6008      	str	r0, [r1, #0]
 8005fae:	6053      	str	r3, [r2, #4]
 8005fb0:	e7da      	b.n	8005f68 <_malloc_trim_r+0x34>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <_malloc_trim_r+0xa4>)
 8005fb6:	1b2d      	subs	r5, r5, r4
 8005fb8:	f045 0501 	orr.w	r5, r5, #1
 8005fbc:	605d      	str	r5, [r3, #4]
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	1b1b      	subs	r3, r3, r4
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	f000 fb21 	bl	800660c <__malloc_unlock>
 8005fca:	2001      	movs	r0, #1
 8005fcc:	e7d0      	b.n	8005f70 <_malloc_trim_r+0x3c>
 8005fce:	bf00      	nop
 8005fd0:	2000043c 	.word	0x2000043c
 8005fd4:	20000844 	.word	0x20000844
 8005fd8:	20000a44 	.word	0x20000a44

08005fdc <_free_r>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	f000 80b1 	beq.w	800614a <_free_r+0x16e>
 8005fe8:	f000 fb0a 	bl	8006600 <__malloc_lock>
 8005fec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005ff0:	4856      	ldr	r0, [pc, #344]	; (800614c <_free_r+0x170>)
 8005ff2:	f022 0401 	bic.w	r4, r2, #1
 8005ff6:	f1a7 0308 	sub.w	r3, r7, #8
 8005ffa:	eb03 0c04 	add.w	ip, r3, r4
 8005ffe:	6881      	ldr	r1, [r0, #8]
 8006000:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006004:	4561      	cmp	r1, ip
 8006006:	f026 0603 	bic.w	r6, r6, #3
 800600a:	f002 0201 	and.w	r2, r2, #1
 800600e:	d11b      	bne.n	8006048 <_free_r+0x6c>
 8006010:	4434      	add	r4, r6
 8006012:	b93a      	cbnz	r2, 8006024 <_free_r+0x48>
 8006014:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	4414      	add	r4, r2
 800601c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006020:	60ca      	str	r2, [r1, #12]
 8006022:	6091      	str	r1, [r2, #8]
 8006024:	f044 0201 	orr.w	r2, r4, #1
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	6083      	str	r3, [r0, #8]
 800602c:	4b48      	ldr	r3, [pc, #288]	; (8006150 <_free_r+0x174>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	42a3      	cmp	r3, r4
 8006032:	d804      	bhi.n	800603e <_free_r+0x62>
 8006034:	4b47      	ldr	r3, [pc, #284]	; (8006154 <_free_r+0x178>)
 8006036:	4628      	mov	r0, r5
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	f7ff ff7b 	bl	8005f34 <_malloc_trim_r>
 800603e:	4628      	mov	r0, r5
 8006040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006044:	f000 bae2 	b.w	800660c <__malloc_unlock>
 8006048:	f8cc 6004 	str.w	r6, [ip, #4]
 800604c:	2a00      	cmp	r2, #0
 800604e:	d138      	bne.n	80060c2 <_free_r+0xe6>
 8006050:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006054:	1a5b      	subs	r3, r3, r1
 8006056:	440c      	add	r4, r1
 8006058:	6899      	ldr	r1, [r3, #8]
 800605a:	f100 0708 	add.w	r7, r0, #8
 800605e:	42b9      	cmp	r1, r7
 8006060:	d031      	beq.n	80060c6 <_free_r+0xea>
 8006062:	68df      	ldr	r7, [r3, #12]
 8006064:	60cf      	str	r7, [r1, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	eb0c 0106 	add.w	r1, ip, r6
 800606c:	6849      	ldr	r1, [r1, #4]
 800606e:	07c9      	lsls	r1, r1, #31
 8006070:	d40b      	bmi.n	800608a <_free_r+0xae>
 8006072:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006076:	4434      	add	r4, r6
 8006078:	bb3a      	cbnz	r2, 80060ca <_free_r+0xee>
 800607a:	4e37      	ldr	r6, [pc, #220]	; (8006158 <_free_r+0x17c>)
 800607c:	42b1      	cmp	r1, r6
 800607e:	d124      	bne.n	80060ca <_free_r+0xee>
 8006080:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006084:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006088:	2201      	movs	r2, #1
 800608a:	f044 0101 	orr.w	r1, r4, #1
 800608e:	6059      	str	r1, [r3, #4]
 8006090:	511c      	str	r4, [r3, r4]
 8006092:	2a00      	cmp	r2, #0
 8006094:	d1d3      	bne.n	800603e <_free_r+0x62>
 8006096:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800609a:	d21b      	bcs.n	80060d4 <_free_r+0xf8>
 800609c:	0961      	lsrs	r1, r4, #5
 800609e:	08e2      	lsrs	r2, r4, #3
 80060a0:	2401      	movs	r4, #1
 80060a2:	408c      	lsls	r4, r1
 80060a4:	6841      	ldr	r1, [r0, #4]
 80060a6:	3201      	adds	r2, #1
 80060a8:	430c      	orrs	r4, r1
 80060aa:	6044      	str	r4, [r0, #4]
 80060ac:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80060b0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80060b4:	3908      	subs	r1, #8
 80060b6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80060ba:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80060be:	60e3      	str	r3, [r4, #12]
 80060c0:	e7bd      	b.n	800603e <_free_r+0x62>
 80060c2:	2200      	movs	r2, #0
 80060c4:	e7d0      	b.n	8006068 <_free_r+0x8c>
 80060c6:	2201      	movs	r2, #1
 80060c8:	e7ce      	b.n	8006068 <_free_r+0x8c>
 80060ca:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80060ce:	60ce      	str	r6, [r1, #12]
 80060d0:	60b1      	str	r1, [r6, #8]
 80060d2:	e7da      	b.n	800608a <_free_r+0xae>
 80060d4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80060d8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80060dc:	d214      	bcs.n	8006108 <_free_r+0x12c>
 80060de:	09a2      	lsrs	r2, r4, #6
 80060e0:	3238      	adds	r2, #56	; 0x38
 80060e2:	1c51      	adds	r1, r2, #1
 80060e4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80060e8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80060ec:	428e      	cmp	r6, r1
 80060ee:	d125      	bne.n	800613c <_free_r+0x160>
 80060f0:	2401      	movs	r4, #1
 80060f2:	1092      	asrs	r2, r2, #2
 80060f4:	fa04 f202 	lsl.w	r2, r4, r2
 80060f8:	6844      	ldr	r4, [r0, #4]
 80060fa:	4322      	orrs	r2, r4
 80060fc:	6042      	str	r2, [r0, #4]
 80060fe:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006102:	60b3      	str	r3, [r6, #8]
 8006104:	60cb      	str	r3, [r1, #12]
 8006106:	e79a      	b.n	800603e <_free_r+0x62>
 8006108:	2a14      	cmp	r2, #20
 800610a:	d801      	bhi.n	8006110 <_free_r+0x134>
 800610c:	325b      	adds	r2, #91	; 0x5b
 800610e:	e7e8      	b.n	80060e2 <_free_r+0x106>
 8006110:	2a54      	cmp	r2, #84	; 0x54
 8006112:	d802      	bhi.n	800611a <_free_r+0x13e>
 8006114:	0b22      	lsrs	r2, r4, #12
 8006116:	326e      	adds	r2, #110	; 0x6e
 8006118:	e7e3      	b.n	80060e2 <_free_r+0x106>
 800611a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800611e:	d802      	bhi.n	8006126 <_free_r+0x14a>
 8006120:	0be2      	lsrs	r2, r4, #15
 8006122:	3277      	adds	r2, #119	; 0x77
 8006124:	e7dd      	b.n	80060e2 <_free_r+0x106>
 8006126:	f240 5154 	movw	r1, #1364	; 0x554
 800612a:	428a      	cmp	r2, r1
 800612c:	bf9a      	itte	ls
 800612e:	0ca2      	lsrls	r2, r4, #18
 8006130:	327c      	addls	r2, #124	; 0x7c
 8006132:	227e      	movhi	r2, #126	; 0x7e
 8006134:	e7d5      	b.n	80060e2 <_free_r+0x106>
 8006136:	6889      	ldr	r1, [r1, #8]
 8006138:	428e      	cmp	r6, r1
 800613a:	d004      	beq.n	8006146 <_free_r+0x16a>
 800613c:	684a      	ldr	r2, [r1, #4]
 800613e:	f022 0203 	bic.w	r2, r2, #3
 8006142:	42a2      	cmp	r2, r4
 8006144:	d8f7      	bhi.n	8006136 <_free_r+0x15a>
 8006146:	68ce      	ldr	r6, [r1, #12]
 8006148:	e7d9      	b.n	80060fe <_free_r+0x122>
 800614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800614c:	2000043c 	.word	0x2000043c
 8006150:	20000848 	.word	0x20000848
 8006154:	20000a74 	.word	0x20000a74
 8006158:	20000444 	.word	0x20000444

0800615c <_localeconv_r>:
 800615c:	4800      	ldr	r0, [pc, #0]	; (8006160 <_localeconv_r+0x4>)
 800615e:	4770      	bx	lr
 8006160:	2000093c 	.word	0x2000093c

08006164 <__retarget_lock_init_recursive>:
 8006164:	4770      	bx	lr

08006166 <__retarget_lock_close_recursive>:
 8006166:	4770      	bx	lr

08006168 <__retarget_lock_acquire_recursive>:
 8006168:	4770      	bx	lr

0800616a <__retarget_lock_release_recursive>:
 800616a:	4770      	bx	lr

0800616c <_malloc_r>:
 800616c:	f101 030b 	add.w	r3, r1, #11
 8006170:	2b16      	cmp	r3, #22
 8006172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006176:	4605      	mov	r5, r0
 8006178:	d906      	bls.n	8006188 <_malloc_r+0x1c>
 800617a:	f033 0707 	bics.w	r7, r3, #7
 800617e:	d504      	bpl.n	800618a <_malloc_r+0x1e>
 8006180:	230c      	movs	r3, #12
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	2400      	movs	r4, #0
 8006186:	e1a5      	b.n	80064d4 <_malloc_r+0x368>
 8006188:	2710      	movs	r7, #16
 800618a:	42b9      	cmp	r1, r7
 800618c:	d8f8      	bhi.n	8006180 <_malloc_r+0x14>
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fa36 	bl	8006600 <__malloc_lock>
 8006194:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8006198:	4eb0      	ldr	r6, [pc, #704]	; (800645c <_malloc_r+0x2f0>)
 800619a:	d237      	bcs.n	800620c <_malloc_r+0xa0>
 800619c:	f107 0208 	add.w	r2, r7, #8
 80061a0:	4432      	add	r2, r6
 80061a2:	f1a2 0108 	sub.w	r1, r2, #8
 80061a6:	6854      	ldr	r4, [r2, #4]
 80061a8:	428c      	cmp	r4, r1
 80061aa:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80061ae:	d102      	bne.n	80061b6 <_malloc_r+0x4a>
 80061b0:	68d4      	ldr	r4, [r2, #12]
 80061b2:	42a2      	cmp	r2, r4
 80061b4:	d010      	beq.n	80061d8 <_malloc_r+0x6c>
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80061bc:	f023 0303 	bic.w	r3, r3, #3
 80061c0:	60ca      	str	r2, [r1, #12]
 80061c2:	4423      	add	r3, r4
 80061c4:	6091      	str	r1, [r2, #8]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	f042 0201 	orr.w	r2, r2, #1
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 fa1c 	bl	800660c <__malloc_unlock>
 80061d4:	3408      	adds	r4, #8
 80061d6:	e17d      	b.n	80064d4 <_malloc_r+0x368>
 80061d8:	3302      	adds	r3, #2
 80061da:	6934      	ldr	r4, [r6, #16]
 80061dc:	49a0      	ldr	r1, [pc, #640]	; (8006460 <_malloc_r+0x2f4>)
 80061de:	428c      	cmp	r4, r1
 80061e0:	d077      	beq.n	80062d2 <_malloc_r+0x166>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	f022 0c03 	bic.w	ip, r2, #3
 80061e8:	ebac 0007 	sub.w	r0, ip, r7
 80061ec:	280f      	cmp	r0, #15
 80061ee:	dd48      	ble.n	8006282 <_malloc_r+0x116>
 80061f0:	19e2      	adds	r2, r4, r7
 80061f2:	f040 0301 	orr.w	r3, r0, #1
 80061f6:	f047 0701 	orr.w	r7, r7, #1
 80061fa:	6067      	str	r7, [r4, #4]
 80061fc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006200:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006204:	6053      	str	r3, [r2, #4]
 8006206:	f844 000c 	str.w	r0, [r4, ip]
 800620a:	e7e0      	b.n	80061ce <_malloc_r+0x62>
 800620c:	0a7b      	lsrs	r3, r7, #9
 800620e:	d02a      	beq.n	8006266 <_malloc_r+0xfa>
 8006210:	2b04      	cmp	r3, #4
 8006212:	d812      	bhi.n	800623a <_malloc_r+0xce>
 8006214:	09bb      	lsrs	r3, r7, #6
 8006216:	3338      	adds	r3, #56	; 0x38
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800621e:	f1a2 0c08 	sub.w	ip, r2, #8
 8006222:	6854      	ldr	r4, [r2, #4]
 8006224:	4564      	cmp	r4, ip
 8006226:	d006      	beq.n	8006236 <_malloc_r+0xca>
 8006228:	6862      	ldr	r2, [r4, #4]
 800622a:	f022 0203 	bic.w	r2, r2, #3
 800622e:	1bd0      	subs	r0, r2, r7
 8006230:	280f      	cmp	r0, #15
 8006232:	dd1c      	ble.n	800626e <_malloc_r+0x102>
 8006234:	3b01      	subs	r3, #1
 8006236:	3301      	adds	r3, #1
 8006238:	e7cf      	b.n	80061da <_malloc_r+0x6e>
 800623a:	2b14      	cmp	r3, #20
 800623c:	d801      	bhi.n	8006242 <_malloc_r+0xd6>
 800623e:	335b      	adds	r3, #91	; 0x5b
 8006240:	e7ea      	b.n	8006218 <_malloc_r+0xac>
 8006242:	2b54      	cmp	r3, #84	; 0x54
 8006244:	d802      	bhi.n	800624c <_malloc_r+0xe0>
 8006246:	0b3b      	lsrs	r3, r7, #12
 8006248:	336e      	adds	r3, #110	; 0x6e
 800624a:	e7e5      	b.n	8006218 <_malloc_r+0xac>
 800624c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006250:	d802      	bhi.n	8006258 <_malloc_r+0xec>
 8006252:	0bfb      	lsrs	r3, r7, #15
 8006254:	3377      	adds	r3, #119	; 0x77
 8006256:	e7df      	b.n	8006218 <_malloc_r+0xac>
 8006258:	f240 5254 	movw	r2, #1364	; 0x554
 800625c:	4293      	cmp	r3, r2
 800625e:	d804      	bhi.n	800626a <_malloc_r+0xfe>
 8006260:	0cbb      	lsrs	r3, r7, #18
 8006262:	337c      	adds	r3, #124	; 0x7c
 8006264:	e7d8      	b.n	8006218 <_malloc_r+0xac>
 8006266:	233f      	movs	r3, #63	; 0x3f
 8006268:	e7d6      	b.n	8006218 <_malloc_r+0xac>
 800626a:	237e      	movs	r3, #126	; 0x7e
 800626c:	e7d4      	b.n	8006218 <_malloc_r+0xac>
 800626e:	2800      	cmp	r0, #0
 8006270:	68e1      	ldr	r1, [r4, #12]
 8006272:	db04      	blt.n	800627e <_malloc_r+0x112>
 8006274:	68a3      	ldr	r3, [r4, #8]
 8006276:	60d9      	str	r1, [r3, #12]
 8006278:	608b      	str	r3, [r1, #8]
 800627a:	18a3      	adds	r3, r4, r2
 800627c:	e7a3      	b.n	80061c6 <_malloc_r+0x5a>
 800627e:	460c      	mov	r4, r1
 8006280:	e7d0      	b.n	8006224 <_malloc_r+0xb8>
 8006282:	2800      	cmp	r0, #0
 8006284:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8006288:	db07      	blt.n	800629a <_malloc_r+0x12e>
 800628a:	44a4      	add	ip, r4
 800628c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	f8cc 3004 	str.w	r3, [ip, #4]
 8006298:	e799      	b.n	80061ce <_malloc_r+0x62>
 800629a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800629e:	6870      	ldr	r0, [r6, #4]
 80062a0:	f080 8096 	bcs.w	80063d0 <_malloc_r+0x264>
 80062a4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80062a8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80062ac:	f04f 0c01 	mov.w	ip, #1
 80062b0:	3201      	adds	r2, #1
 80062b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80062b6:	ea4c 0000 	orr.w	r0, ip, r0
 80062ba:	6070      	str	r0, [r6, #4]
 80062bc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80062c0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80062c4:	3808      	subs	r0, #8
 80062c6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80062ca:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80062ce:	f8cc 400c 	str.w	r4, [ip, #12]
 80062d2:	2001      	movs	r0, #1
 80062d4:	109a      	asrs	r2, r3, #2
 80062d6:	fa00 f202 	lsl.w	r2, r0, r2
 80062da:	6870      	ldr	r0, [r6, #4]
 80062dc:	4290      	cmp	r0, r2
 80062de:	d326      	bcc.n	800632e <_malloc_r+0x1c2>
 80062e0:	4210      	tst	r0, r2
 80062e2:	d106      	bne.n	80062f2 <_malloc_r+0x186>
 80062e4:	f023 0303 	bic.w	r3, r3, #3
 80062e8:	0052      	lsls	r2, r2, #1
 80062ea:	4210      	tst	r0, r2
 80062ec:	f103 0304 	add.w	r3, r3, #4
 80062f0:	d0fa      	beq.n	80062e8 <_malloc_r+0x17c>
 80062f2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80062f6:	46c1      	mov	r9, r8
 80062f8:	469e      	mov	lr, r3
 80062fa:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80062fe:	454c      	cmp	r4, r9
 8006300:	f040 80ba 	bne.w	8006478 <_malloc_r+0x30c>
 8006304:	f10e 0e01 	add.w	lr, lr, #1
 8006308:	f01e 0f03 	tst.w	lr, #3
 800630c:	f109 0908 	add.w	r9, r9, #8
 8006310:	d1f3      	bne.n	80062fa <_malloc_r+0x18e>
 8006312:	0798      	lsls	r0, r3, #30
 8006314:	f040 80e4 	bne.w	80064e0 <_malloc_r+0x374>
 8006318:	6873      	ldr	r3, [r6, #4]
 800631a:	ea23 0302 	bic.w	r3, r3, r2
 800631e:	6073      	str	r3, [r6, #4]
 8006320:	6870      	ldr	r0, [r6, #4]
 8006322:	0052      	lsls	r2, r2, #1
 8006324:	4290      	cmp	r0, r2
 8006326:	d302      	bcc.n	800632e <_malloc_r+0x1c2>
 8006328:	2a00      	cmp	r2, #0
 800632a:	f040 80e6 	bne.w	80064fa <_malloc_r+0x38e>
 800632e:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006332:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006336:	f023 0903 	bic.w	r9, r3, #3
 800633a:	45b9      	cmp	r9, r7
 800633c:	d304      	bcc.n	8006348 <_malloc_r+0x1dc>
 800633e:	eba9 0207 	sub.w	r2, r9, r7
 8006342:	2a0f      	cmp	r2, #15
 8006344:	f300 8142 	bgt.w	80065cc <_malloc_r+0x460>
 8006348:	4b46      	ldr	r3, [pc, #280]	; (8006464 <_malloc_r+0x2f8>)
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	3110      	adds	r1, #16
 800634e:	4439      	add	r1, r7
 8006350:	2008      	movs	r0, #8
 8006352:	9101      	str	r1, [sp, #4]
 8006354:	f000 fd6c 	bl	8006e30 <sysconf>
 8006358:	4a43      	ldr	r2, [pc, #268]	; (8006468 <_malloc_r+0x2fc>)
 800635a:	9901      	ldr	r1, [sp, #4]
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	bf1f      	itttt	ne
 8006362:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006366:	1809      	addne	r1, r1, r0
 8006368:	4243      	negne	r3, r0
 800636a:	4019      	andne	r1, r3
 800636c:	4680      	mov	r8, r0
 800636e:	4628      	mov	r0, r5
 8006370:	9101      	str	r1, [sp, #4]
 8006372:	f000 fcbf 	bl	8006cf4 <_sbrk_r>
 8006376:	1c42      	adds	r2, r0, #1
 8006378:	eb0a 0b09 	add.w	fp, sl, r9
 800637c:	4604      	mov	r4, r0
 800637e:	f000 80f8 	beq.w	8006572 <_malloc_r+0x406>
 8006382:	4583      	cmp	fp, r0
 8006384:	9901      	ldr	r1, [sp, #4]
 8006386:	4a38      	ldr	r2, [pc, #224]	; (8006468 <_malloc_r+0x2fc>)
 8006388:	d902      	bls.n	8006390 <_malloc_r+0x224>
 800638a:	45b2      	cmp	sl, r6
 800638c:	f040 80f1 	bne.w	8006572 <_malloc_r+0x406>
 8006390:	4b36      	ldr	r3, [pc, #216]	; (800646c <_malloc_r+0x300>)
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	45a3      	cmp	fp, r4
 8006396:	eb00 0e01 	add.w	lr, r0, r1
 800639a:	f8c3 e000 	str.w	lr, [r3]
 800639e:	f108 3cff 	add.w	ip, r8, #4294967295
 80063a2:	f040 80ac 	bne.w	80064fe <_malloc_r+0x392>
 80063a6:	ea1b 0f0c 	tst.w	fp, ip
 80063aa:	f040 80a8 	bne.w	80064fe <_malloc_r+0x392>
 80063ae:	68b2      	ldr	r2, [r6, #8]
 80063b0:	4449      	add	r1, r9
 80063b2:	f041 0101 	orr.w	r1, r1, #1
 80063b6:	6051      	str	r1, [r2, #4]
 80063b8:	4a2d      	ldr	r2, [pc, #180]	; (8006470 <_malloc_r+0x304>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6811      	ldr	r1, [r2, #0]
 80063be:	428b      	cmp	r3, r1
 80063c0:	bf88      	it	hi
 80063c2:	6013      	strhi	r3, [r2, #0]
 80063c4:	4a2b      	ldr	r2, [pc, #172]	; (8006474 <_malloc_r+0x308>)
 80063c6:	6811      	ldr	r1, [r2, #0]
 80063c8:	428b      	cmp	r3, r1
 80063ca:	bf88      	it	hi
 80063cc:	6013      	strhi	r3, [r2, #0]
 80063ce:	e0d0      	b.n	8006572 <_malloc_r+0x406>
 80063d0:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80063d4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80063d8:	d218      	bcs.n	800640c <_malloc_r+0x2a0>
 80063da:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80063de:	3238      	adds	r2, #56	; 0x38
 80063e0:	f102 0e01 	add.w	lr, r2, #1
 80063e4:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80063e8:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80063ec:	45f0      	cmp	r8, lr
 80063ee:	d12b      	bne.n	8006448 <_malloc_r+0x2dc>
 80063f0:	1092      	asrs	r2, r2, #2
 80063f2:	f04f 0c01 	mov.w	ip, #1
 80063f6:	fa0c f202 	lsl.w	r2, ip, r2
 80063fa:	4310      	orrs	r0, r2
 80063fc:	6070      	str	r0, [r6, #4]
 80063fe:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006402:	f8c8 4008 	str.w	r4, [r8, #8]
 8006406:	f8ce 400c 	str.w	r4, [lr, #12]
 800640a:	e762      	b.n	80062d2 <_malloc_r+0x166>
 800640c:	2a14      	cmp	r2, #20
 800640e:	d801      	bhi.n	8006414 <_malloc_r+0x2a8>
 8006410:	325b      	adds	r2, #91	; 0x5b
 8006412:	e7e5      	b.n	80063e0 <_malloc_r+0x274>
 8006414:	2a54      	cmp	r2, #84	; 0x54
 8006416:	d803      	bhi.n	8006420 <_malloc_r+0x2b4>
 8006418:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800641c:	326e      	adds	r2, #110	; 0x6e
 800641e:	e7df      	b.n	80063e0 <_malloc_r+0x274>
 8006420:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006424:	d803      	bhi.n	800642e <_malloc_r+0x2c2>
 8006426:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800642a:	3277      	adds	r2, #119	; 0x77
 800642c:	e7d8      	b.n	80063e0 <_malloc_r+0x274>
 800642e:	f240 5e54 	movw	lr, #1364	; 0x554
 8006432:	4572      	cmp	r2, lr
 8006434:	bf9a      	itte	ls
 8006436:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800643a:	327c      	addls	r2, #124	; 0x7c
 800643c:	227e      	movhi	r2, #126	; 0x7e
 800643e:	e7cf      	b.n	80063e0 <_malloc_r+0x274>
 8006440:	f8de e008 	ldr.w	lr, [lr, #8]
 8006444:	45f0      	cmp	r8, lr
 8006446:	d005      	beq.n	8006454 <_malloc_r+0x2e8>
 8006448:	f8de 2004 	ldr.w	r2, [lr, #4]
 800644c:	f022 0203 	bic.w	r2, r2, #3
 8006450:	4562      	cmp	r2, ip
 8006452:	d8f5      	bhi.n	8006440 <_malloc_r+0x2d4>
 8006454:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006458:	e7d1      	b.n	80063fe <_malloc_r+0x292>
 800645a:	bf00      	nop
 800645c:	2000043c 	.word	0x2000043c
 8006460:	20000444 	.word	0x20000444
 8006464:	20000a74 	.word	0x20000a74
 8006468:	20000844 	.word	0x20000844
 800646c:	20000a44 	.word	0x20000a44
 8006470:	20000a6c 	.word	0x20000a6c
 8006474:	20000a70 	.word	0x20000a70
 8006478:	6860      	ldr	r0, [r4, #4]
 800647a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800647e:	f020 0003 	bic.w	r0, r0, #3
 8006482:	eba0 0a07 	sub.w	sl, r0, r7
 8006486:	f1ba 0f0f 	cmp.w	sl, #15
 800648a:	dd12      	ble.n	80064b2 <_malloc_r+0x346>
 800648c:	68a3      	ldr	r3, [r4, #8]
 800648e:	19e2      	adds	r2, r4, r7
 8006490:	f047 0701 	orr.w	r7, r7, #1
 8006494:	6067      	str	r7, [r4, #4]
 8006496:	f8c3 c00c 	str.w	ip, [r3, #12]
 800649a:	f8cc 3008 	str.w	r3, [ip, #8]
 800649e:	f04a 0301 	orr.w	r3, sl, #1
 80064a2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80064a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80064aa:	6053      	str	r3, [r2, #4]
 80064ac:	f844 a000 	str.w	sl, [r4, r0]
 80064b0:	e68d      	b.n	80061ce <_malloc_r+0x62>
 80064b2:	f1ba 0f00 	cmp.w	sl, #0
 80064b6:	db11      	blt.n	80064dc <_malloc_r+0x370>
 80064b8:	4420      	add	r0, r4
 80064ba:	6843      	ldr	r3, [r0, #4]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	6043      	str	r3, [r0, #4]
 80064c2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80064c6:	4628      	mov	r0, r5
 80064c8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80064cc:	f8cc 3008 	str.w	r3, [ip, #8]
 80064d0:	f000 f89c 	bl	800660c <__malloc_unlock>
 80064d4:	4620      	mov	r0, r4
 80064d6:	b003      	add	sp, #12
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4664      	mov	r4, ip
 80064de:	e70e      	b.n	80062fe <_malloc_r+0x192>
 80064e0:	f858 0908 	ldr.w	r0, [r8], #-8
 80064e4:	4540      	cmp	r0, r8
 80064e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ea:	f43f af12 	beq.w	8006312 <_malloc_r+0x1a6>
 80064ee:	e717      	b.n	8006320 <_malloc_r+0x1b4>
 80064f0:	3304      	adds	r3, #4
 80064f2:	0052      	lsls	r2, r2, #1
 80064f4:	4210      	tst	r0, r2
 80064f6:	d0fb      	beq.n	80064f0 <_malloc_r+0x384>
 80064f8:	e6fb      	b.n	80062f2 <_malloc_r+0x186>
 80064fa:	4673      	mov	r3, lr
 80064fc:	e7fa      	b.n	80064f4 <_malloc_r+0x388>
 80064fe:	6810      	ldr	r0, [r2, #0]
 8006500:	3001      	adds	r0, #1
 8006502:	bf1b      	ittet	ne
 8006504:	eba4 0b0b 	subne.w	fp, r4, fp
 8006508:	eb0b 020e 	addne.w	r2, fp, lr
 800650c:	6014      	streq	r4, [r2, #0]
 800650e:	601a      	strne	r2, [r3, #0]
 8006510:	f014 0b07 	ands.w	fp, r4, #7
 8006514:	bf1a      	itte	ne
 8006516:	f1cb 0008 	rsbne	r0, fp, #8
 800651a:	1824      	addne	r4, r4, r0
 800651c:	4658      	moveq	r0, fp
 800651e:	1862      	adds	r2, r4, r1
 8006520:	ea02 010c 	and.w	r1, r2, ip
 8006524:	4480      	add	r8, r0
 8006526:	eba8 0801 	sub.w	r8, r8, r1
 800652a:	ea08 080c 	and.w	r8, r8, ip
 800652e:	4641      	mov	r1, r8
 8006530:	4628      	mov	r0, r5
 8006532:	9201      	str	r2, [sp, #4]
 8006534:	f000 fbde 	bl	8006cf4 <_sbrk_r>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	9a01      	ldr	r2, [sp, #4]
 800653c:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <_malloc_r+0x474>)
 800653e:	d107      	bne.n	8006550 <_malloc_r+0x3e4>
 8006540:	f1bb 0f00 	cmp.w	fp, #0
 8006544:	d023      	beq.n	800658e <_malloc_r+0x422>
 8006546:	f1ab 0008 	sub.w	r0, fp, #8
 800654a:	4410      	add	r0, r2
 800654c:	f04f 0800 	mov.w	r8, #0
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	60b4      	str	r4, [r6, #8]
 8006554:	1b00      	subs	r0, r0, r4
 8006556:	4440      	add	r0, r8
 8006558:	4442      	add	r2, r8
 800655a:	f040 0001 	orr.w	r0, r0, #1
 800655e:	45b2      	cmp	sl, r6
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	6060      	str	r0, [r4, #4]
 8006564:	f43f af28 	beq.w	80063b8 <_malloc_r+0x24c>
 8006568:	f1b9 0f0f 	cmp.w	r9, #15
 800656c:	d812      	bhi.n	8006594 <_malloc_r+0x428>
 800656e:	2301      	movs	r3, #1
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	68b3      	ldr	r3, [r6, #8]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	42bb      	cmp	r3, r7
 800657c:	eba3 0207 	sub.w	r2, r3, r7
 8006580:	d301      	bcc.n	8006586 <_malloc_r+0x41a>
 8006582:	2a0f      	cmp	r2, #15
 8006584:	dc22      	bgt.n	80065cc <_malloc_r+0x460>
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f840 	bl	800660c <__malloc_unlock>
 800658c:	e5fa      	b.n	8006184 <_malloc_r+0x18>
 800658e:	4610      	mov	r0, r2
 8006590:	46d8      	mov	r8, fp
 8006592:	e7dd      	b.n	8006550 <_malloc_r+0x3e4>
 8006594:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006598:	f1a9 090c 	sub.w	r9, r9, #12
 800659c:	f029 0907 	bic.w	r9, r9, #7
 80065a0:	f002 0201 	and.w	r2, r2, #1
 80065a4:	ea42 0209 	orr.w	r2, r2, r9
 80065a8:	f8ca 2004 	str.w	r2, [sl, #4]
 80065ac:	2105      	movs	r1, #5
 80065ae:	eb0a 0209 	add.w	r2, sl, r9
 80065b2:	f1b9 0f0f 	cmp.w	r9, #15
 80065b6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80065ba:	f67f aefd 	bls.w	80063b8 <_malloc_r+0x24c>
 80065be:	f10a 0108 	add.w	r1, sl, #8
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7ff fd0a 	bl	8005fdc <_free_r>
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <_malloc_r+0x474>)
 80065ca:	e6f5      	b.n	80063b8 <_malloc_r+0x24c>
 80065cc:	68b4      	ldr	r4, [r6, #8]
 80065ce:	f047 0301 	orr.w	r3, r7, #1
 80065d2:	4427      	add	r7, r4
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	6063      	str	r3, [r4, #4]
 80065da:	60b7      	str	r7, [r6, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	e5f6      	b.n	80061ce <_malloc_r+0x62>
 80065e0:	20000a44 	.word	0x20000a44

080065e4 <memcpy>:
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ec:	d100      	bne.n	80065f0 <memcpy+0xc>
 80065ee:	4770      	bx	lr
 80065f0:	b510      	push	{r4, lr}
 80065f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fa:	4291      	cmp	r1, r2
 80065fc:	d1f9      	bne.n	80065f2 <memcpy+0xe>
 80065fe:	bd10      	pop	{r4, pc}

08006600 <__malloc_lock>:
 8006600:	4801      	ldr	r0, [pc, #4]	; (8006608 <__malloc_lock+0x8>)
 8006602:	f7ff bdb1 	b.w	8006168 <__retarget_lock_acquire_recursive>
 8006606:	bf00      	nop
 8006608:	20000a41 	.word	0x20000a41

0800660c <__malloc_unlock>:
 800660c:	4801      	ldr	r0, [pc, #4]	; (8006614 <__malloc_unlock+0x8>)
 800660e:	f7ff bdac 	b.w	800616a <__retarget_lock_release_recursive>
 8006612:	bf00      	nop
 8006614:	20000a41 	.word	0x20000a41

08006618 <_Balloc>:
 8006618:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	b17b      	cbz	r3, 8006642 <_Balloc+0x2a>
 8006622:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006624:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006628:	b9a0      	cbnz	r0, 8006654 <_Balloc+0x3c>
 800662a:	2101      	movs	r1, #1
 800662c:	fa01 f604 	lsl.w	r6, r1, r4
 8006630:	1d72      	adds	r2, r6, #5
 8006632:	0092      	lsls	r2, r2, #2
 8006634:	4628      	mov	r0, r5
 8006636:	f000 fc69 	bl	8006f0c <_calloc_r>
 800663a:	b148      	cbz	r0, 8006650 <_Balloc+0x38>
 800663c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8006640:	e00b      	b.n	800665a <_Balloc+0x42>
 8006642:	2221      	movs	r2, #33	; 0x21
 8006644:	2104      	movs	r1, #4
 8006646:	f000 fc61 	bl	8006f0c <_calloc_r>
 800664a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800664c:	2800      	cmp	r0, #0
 800664e:	d1e8      	bne.n	8006622 <_Balloc+0xa>
 8006650:	2000      	movs	r0, #0
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	6802      	ldr	r2, [r0, #0]
 8006656:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800665a:	2300      	movs	r3, #0
 800665c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006660:	e7f7      	b.n	8006652 <_Balloc+0x3a>

08006662 <_Bfree>:
 8006662:	b131      	cbz	r1, 8006672 <_Bfree+0x10>
 8006664:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006666:	684a      	ldr	r2, [r1, #4]
 8006668:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800666c:	6008      	str	r0, [r1, #0]
 800666e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006672:	4770      	bx	lr

08006674 <__multadd>:
 8006674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006678:	690d      	ldr	r5, [r1, #16]
 800667a:	4607      	mov	r7, r0
 800667c:	460c      	mov	r4, r1
 800667e:	461e      	mov	r6, r3
 8006680:	f101 0c14 	add.w	ip, r1, #20
 8006684:	2000      	movs	r0, #0
 8006686:	f8dc 3000 	ldr.w	r3, [ip]
 800668a:	b299      	uxth	r1, r3
 800668c:	fb02 6101 	mla	r1, r2, r1, r6
 8006690:	0c1e      	lsrs	r6, r3, #16
 8006692:	0c0b      	lsrs	r3, r1, #16
 8006694:	fb02 3306 	mla	r3, r2, r6, r3
 8006698:	b289      	uxth	r1, r1
 800669a:	3001      	adds	r0, #1
 800669c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066a0:	4285      	cmp	r5, r0
 80066a2:	f84c 1b04 	str.w	r1, [ip], #4
 80066a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066aa:	dcec      	bgt.n	8006686 <__multadd+0x12>
 80066ac:	b30e      	cbz	r6, 80066f2 <__multadd+0x7e>
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	dc19      	bgt.n	80066e8 <__multadd+0x74>
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4638      	mov	r0, r7
 80066b8:	3101      	adds	r1, #1
 80066ba:	f7ff ffad 	bl	8006618 <_Balloc>
 80066be:	4680      	mov	r8, r0
 80066c0:	b928      	cbnz	r0, 80066ce <__multadd+0x5a>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <__multadd+0x84>)
 80066c6:	480d      	ldr	r0, [pc, #52]	; (80066fc <__multadd+0x88>)
 80066c8:	21b5      	movs	r1, #181	; 0xb5
 80066ca:	f000 fc01 	bl	8006ed0 <__assert_func>
 80066ce:	6922      	ldr	r2, [r4, #16]
 80066d0:	3202      	adds	r2, #2
 80066d2:	f104 010c 	add.w	r1, r4, #12
 80066d6:	0092      	lsls	r2, r2, #2
 80066d8:	300c      	adds	r0, #12
 80066da:	f7ff ff83 	bl	80065e4 <memcpy>
 80066de:	4621      	mov	r1, r4
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7ff ffbe 	bl	8006662 <_Bfree>
 80066e6:	4644      	mov	r4, r8
 80066e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066ec:	3501      	adds	r5, #1
 80066ee:	615e      	str	r6, [r3, #20]
 80066f0:	6125      	str	r5, [r4, #16]
 80066f2:	4620      	mov	r0, r4
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f8:	08008a29 	.word	0x08008a29
 80066fc:	08008a95 	.word	0x08008a95

08006700 <__hi0bits>:
 8006700:	0c03      	lsrs	r3, r0, #16
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	b9d3      	cbnz	r3, 800673c <__hi0bits+0x3c>
 8006706:	0400      	lsls	r0, r0, #16
 8006708:	2310      	movs	r3, #16
 800670a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800670e:	bf04      	itt	eq
 8006710:	0200      	lsleq	r0, r0, #8
 8006712:	3308      	addeq	r3, #8
 8006714:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006718:	bf04      	itt	eq
 800671a:	0100      	lsleq	r0, r0, #4
 800671c:	3304      	addeq	r3, #4
 800671e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006722:	bf04      	itt	eq
 8006724:	0080      	lsleq	r0, r0, #2
 8006726:	3302      	addeq	r3, #2
 8006728:	2800      	cmp	r0, #0
 800672a:	db05      	blt.n	8006738 <__hi0bits+0x38>
 800672c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006730:	f103 0301 	add.w	r3, r3, #1
 8006734:	bf08      	it	eq
 8006736:	2320      	moveq	r3, #32
 8006738:	4618      	mov	r0, r3
 800673a:	4770      	bx	lr
 800673c:	2300      	movs	r3, #0
 800673e:	e7e4      	b.n	800670a <__hi0bits+0xa>

08006740 <__lo0bits>:
 8006740:	6803      	ldr	r3, [r0, #0]
 8006742:	f013 0207 	ands.w	r2, r3, #7
 8006746:	4601      	mov	r1, r0
 8006748:	d00b      	beq.n	8006762 <__lo0bits+0x22>
 800674a:	07da      	lsls	r2, r3, #31
 800674c:	d423      	bmi.n	8006796 <__lo0bits+0x56>
 800674e:	0798      	lsls	r0, r3, #30
 8006750:	bf49      	itett	mi
 8006752:	085b      	lsrmi	r3, r3, #1
 8006754:	089b      	lsrpl	r3, r3, #2
 8006756:	2001      	movmi	r0, #1
 8006758:	600b      	strmi	r3, [r1, #0]
 800675a:	bf5c      	itt	pl
 800675c:	600b      	strpl	r3, [r1, #0]
 800675e:	2002      	movpl	r0, #2
 8006760:	4770      	bx	lr
 8006762:	b298      	uxth	r0, r3
 8006764:	b9a8      	cbnz	r0, 8006792 <__lo0bits+0x52>
 8006766:	0c1b      	lsrs	r3, r3, #16
 8006768:	2010      	movs	r0, #16
 800676a:	b2da      	uxtb	r2, r3
 800676c:	b90a      	cbnz	r2, 8006772 <__lo0bits+0x32>
 800676e:	3008      	adds	r0, #8
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	071a      	lsls	r2, r3, #28
 8006774:	bf04      	itt	eq
 8006776:	091b      	lsreq	r3, r3, #4
 8006778:	3004      	addeq	r0, #4
 800677a:	079a      	lsls	r2, r3, #30
 800677c:	bf04      	itt	eq
 800677e:	089b      	lsreq	r3, r3, #2
 8006780:	3002      	addeq	r0, #2
 8006782:	07da      	lsls	r2, r3, #31
 8006784:	d403      	bmi.n	800678e <__lo0bits+0x4e>
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	f100 0001 	add.w	r0, r0, #1
 800678c:	d005      	beq.n	800679a <__lo0bits+0x5a>
 800678e:	600b      	str	r3, [r1, #0]
 8006790:	4770      	bx	lr
 8006792:	4610      	mov	r0, r2
 8006794:	e7e9      	b.n	800676a <__lo0bits+0x2a>
 8006796:	2000      	movs	r0, #0
 8006798:	4770      	bx	lr
 800679a:	2020      	movs	r0, #32
 800679c:	4770      	bx	lr
	...

080067a0 <__i2b>:
 80067a0:	b510      	push	{r4, lr}
 80067a2:	460c      	mov	r4, r1
 80067a4:	2101      	movs	r1, #1
 80067a6:	f7ff ff37 	bl	8006618 <_Balloc>
 80067aa:	4602      	mov	r2, r0
 80067ac:	b928      	cbnz	r0, 80067ba <__i2b+0x1a>
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <__i2b+0x24>)
 80067b0:	4805      	ldr	r0, [pc, #20]	; (80067c8 <__i2b+0x28>)
 80067b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067b6:	f000 fb8b 	bl	8006ed0 <__assert_func>
 80067ba:	2301      	movs	r3, #1
 80067bc:	6144      	str	r4, [r0, #20]
 80067be:	6103      	str	r3, [r0, #16]
 80067c0:	bd10      	pop	{r4, pc}
 80067c2:	bf00      	nop
 80067c4:	08008a29 	.word	0x08008a29
 80067c8:	08008a95 	.word	0x08008a95

080067cc <__multiply>:
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	4691      	mov	r9, r2
 80067d2:	690a      	ldr	r2, [r1, #16]
 80067d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	bfb8      	it	lt
 80067dc:	460b      	movlt	r3, r1
 80067de:	460c      	mov	r4, r1
 80067e0:	bfbc      	itt	lt
 80067e2:	464c      	movlt	r4, r9
 80067e4:	4699      	movlt	r9, r3
 80067e6:	6927      	ldr	r7, [r4, #16]
 80067e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067ec:	68a3      	ldr	r3, [r4, #8]
 80067ee:	6861      	ldr	r1, [r4, #4]
 80067f0:	eb07 060a 	add.w	r6, r7, sl
 80067f4:	42b3      	cmp	r3, r6
 80067f6:	b085      	sub	sp, #20
 80067f8:	bfb8      	it	lt
 80067fa:	3101      	addlt	r1, #1
 80067fc:	f7ff ff0c 	bl	8006618 <_Balloc>
 8006800:	b930      	cbnz	r0, 8006810 <__multiply+0x44>
 8006802:	4602      	mov	r2, r0
 8006804:	4b44      	ldr	r3, [pc, #272]	; (8006918 <__multiply+0x14c>)
 8006806:	4845      	ldr	r0, [pc, #276]	; (800691c <__multiply+0x150>)
 8006808:	f240 115d 	movw	r1, #349	; 0x15d
 800680c:	f000 fb60 	bl	8006ed0 <__assert_func>
 8006810:	f100 0514 	add.w	r5, r0, #20
 8006814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006818:	462b      	mov	r3, r5
 800681a:	2200      	movs	r2, #0
 800681c:	4543      	cmp	r3, r8
 800681e:	d321      	bcc.n	8006864 <__multiply+0x98>
 8006820:	f104 0314 	add.w	r3, r4, #20
 8006824:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006828:	f109 0314 	add.w	r3, r9, #20
 800682c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006830:	9202      	str	r2, [sp, #8]
 8006832:	1b3a      	subs	r2, r7, r4
 8006834:	3a15      	subs	r2, #21
 8006836:	f022 0203 	bic.w	r2, r2, #3
 800683a:	3204      	adds	r2, #4
 800683c:	f104 0115 	add.w	r1, r4, #21
 8006840:	428f      	cmp	r7, r1
 8006842:	bf38      	it	cc
 8006844:	2204      	movcc	r2, #4
 8006846:	9201      	str	r2, [sp, #4]
 8006848:	9a02      	ldr	r2, [sp, #8]
 800684a:	9303      	str	r3, [sp, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d80c      	bhi.n	800686a <__multiply+0x9e>
 8006850:	2e00      	cmp	r6, #0
 8006852:	dd03      	ble.n	800685c <__multiply+0x90>
 8006854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006858:	2b00      	cmp	r3, #0
 800685a:	d05a      	beq.n	8006912 <__multiply+0x146>
 800685c:	6106      	str	r6, [r0, #16]
 800685e:	b005      	add	sp, #20
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	f843 2b04 	str.w	r2, [r3], #4
 8006868:	e7d8      	b.n	800681c <__multiply+0x50>
 800686a:	f8b3 a000 	ldrh.w	sl, [r3]
 800686e:	f1ba 0f00 	cmp.w	sl, #0
 8006872:	d024      	beq.n	80068be <__multiply+0xf2>
 8006874:	f104 0e14 	add.w	lr, r4, #20
 8006878:	46a9      	mov	r9, r5
 800687a:	f04f 0c00 	mov.w	ip, #0
 800687e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006882:	f8d9 1000 	ldr.w	r1, [r9]
 8006886:	fa1f fb82 	uxth.w	fp, r2
 800688a:	b289      	uxth	r1, r1
 800688c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006890:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006894:	f8d9 2000 	ldr.w	r2, [r9]
 8006898:	4461      	add	r1, ip
 800689a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800689e:	fb0a c20b 	mla	r2, sl, fp, ip
 80068a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068a6:	b289      	uxth	r1, r1
 80068a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068ac:	4577      	cmp	r7, lr
 80068ae:	f849 1b04 	str.w	r1, [r9], #4
 80068b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068b6:	d8e2      	bhi.n	800687e <__multiply+0xb2>
 80068b8:	9a01      	ldr	r2, [sp, #4]
 80068ba:	f845 c002 	str.w	ip, [r5, r2]
 80068be:	9a03      	ldr	r2, [sp, #12]
 80068c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068c4:	3304      	adds	r3, #4
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	d020      	beq.n	800690e <__multiply+0x142>
 80068cc:	6829      	ldr	r1, [r5, #0]
 80068ce:	f104 0c14 	add.w	ip, r4, #20
 80068d2:	46ae      	mov	lr, r5
 80068d4:	f04f 0a00 	mov.w	sl, #0
 80068d8:	f8bc b000 	ldrh.w	fp, [ip]
 80068dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80068e0:	fb09 220b 	mla	r2, r9, fp, r2
 80068e4:	4492      	add	sl, r2
 80068e6:	b289      	uxth	r1, r1
 80068e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80068ec:	f84e 1b04 	str.w	r1, [lr], #4
 80068f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80068f4:	f8be 1000 	ldrh.w	r1, [lr]
 80068f8:	0c12      	lsrs	r2, r2, #16
 80068fa:	fb09 1102 	mla	r1, r9, r2, r1
 80068fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006902:	4567      	cmp	r7, ip
 8006904:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006908:	d8e6      	bhi.n	80068d8 <__multiply+0x10c>
 800690a:	9a01      	ldr	r2, [sp, #4]
 800690c:	50a9      	str	r1, [r5, r2]
 800690e:	3504      	adds	r5, #4
 8006910:	e79a      	b.n	8006848 <__multiply+0x7c>
 8006912:	3e01      	subs	r6, #1
 8006914:	e79c      	b.n	8006850 <__multiply+0x84>
 8006916:	bf00      	nop
 8006918:	08008a29 	.word	0x08008a29
 800691c:	08008a95 	.word	0x08008a95

08006920 <__pow5mult>:
 8006920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006924:	4615      	mov	r5, r2
 8006926:	f012 0203 	ands.w	r2, r2, #3
 800692a:	4606      	mov	r6, r0
 800692c:	460f      	mov	r7, r1
 800692e:	d007      	beq.n	8006940 <__pow5mult+0x20>
 8006930:	4c1a      	ldr	r4, [pc, #104]	; (800699c <__pow5mult+0x7c>)
 8006932:	3a01      	subs	r2, #1
 8006934:	2300      	movs	r3, #0
 8006936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800693a:	f7ff fe9b 	bl	8006674 <__multadd>
 800693e:	4607      	mov	r7, r0
 8006940:	10ad      	asrs	r5, r5, #2
 8006942:	d027      	beq.n	8006994 <__pow5mult+0x74>
 8006944:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8006946:	b944      	cbnz	r4, 800695a <__pow5mult+0x3a>
 8006948:	f240 2171 	movw	r1, #625	; 0x271
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ff27 	bl	80067a0 <__i2b>
 8006952:	2300      	movs	r3, #0
 8006954:	64b0      	str	r0, [r6, #72]	; 0x48
 8006956:	4604      	mov	r4, r0
 8006958:	6003      	str	r3, [r0, #0]
 800695a:	f04f 0900 	mov.w	r9, #0
 800695e:	07eb      	lsls	r3, r5, #31
 8006960:	d50a      	bpl.n	8006978 <__pow5mult+0x58>
 8006962:	4639      	mov	r1, r7
 8006964:	4622      	mov	r2, r4
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ff30 	bl	80067cc <__multiply>
 800696c:	4639      	mov	r1, r7
 800696e:	4680      	mov	r8, r0
 8006970:	4630      	mov	r0, r6
 8006972:	f7ff fe76 	bl	8006662 <_Bfree>
 8006976:	4647      	mov	r7, r8
 8006978:	106d      	asrs	r5, r5, #1
 800697a:	d00b      	beq.n	8006994 <__pow5mult+0x74>
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	b938      	cbnz	r0, 8006990 <__pow5mult+0x70>
 8006980:	4622      	mov	r2, r4
 8006982:	4621      	mov	r1, r4
 8006984:	4630      	mov	r0, r6
 8006986:	f7ff ff21 	bl	80067cc <__multiply>
 800698a:	6020      	str	r0, [r4, #0]
 800698c:	f8c0 9000 	str.w	r9, [r0]
 8006990:	4604      	mov	r4, r0
 8006992:	e7e4      	b.n	800695e <__pow5mult+0x3e>
 8006994:	4638      	mov	r0, r7
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699a:	bf00      	nop
 800699c:	08008be8 	.word	0x08008be8

080069a0 <__lshift>:
 80069a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	460c      	mov	r4, r1
 80069a6:	6849      	ldr	r1, [r1, #4]
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	4607      	mov	r7, r0
 80069b2:	4691      	mov	r9, r2
 80069b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069b8:	f108 0601 	add.w	r6, r8, #1
 80069bc:	42b3      	cmp	r3, r6
 80069be:	db0b      	blt.n	80069d8 <__lshift+0x38>
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7ff fe29 	bl	8006618 <_Balloc>
 80069c6:	4605      	mov	r5, r0
 80069c8:	b948      	cbnz	r0, 80069de <__lshift+0x3e>
 80069ca:	4602      	mov	r2, r0
 80069cc:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <__lshift+0xd8>)
 80069ce:	482b      	ldr	r0, [pc, #172]	; (8006a7c <__lshift+0xdc>)
 80069d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80069d4:	f000 fa7c 	bl	8006ed0 <__assert_func>
 80069d8:	3101      	adds	r1, #1
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	e7ee      	b.n	80069bc <__lshift+0x1c>
 80069de:	2300      	movs	r3, #0
 80069e0:	f100 0114 	add.w	r1, r0, #20
 80069e4:	f100 0210 	add.w	r2, r0, #16
 80069e8:	4618      	mov	r0, r3
 80069ea:	4553      	cmp	r3, sl
 80069ec:	db37      	blt.n	8006a5e <__lshift+0xbe>
 80069ee:	6920      	ldr	r0, [r4, #16]
 80069f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069f4:	f104 0314 	add.w	r3, r4, #20
 80069f8:	f019 091f 	ands.w	r9, r9, #31
 80069fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a04:	d02f      	beq.n	8006a66 <__lshift+0xc6>
 8006a06:	f1c9 0e20 	rsb	lr, r9, #32
 8006a0a:	468a      	mov	sl, r1
 8006a0c:	f04f 0c00 	mov.w	ip, #0
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	fa02 f209 	lsl.w	r2, r2, r9
 8006a16:	ea42 020c 	orr.w	r2, r2, ip
 8006a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8006a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a22:	4298      	cmp	r0, r3
 8006a24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a28:	d8f2      	bhi.n	8006a10 <__lshift+0x70>
 8006a2a:	1b03      	subs	r3, r0, r4
 8006a2c:	3b15      	subs	r3, #21
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	3304      	adds	r3, #4
 8006a34:	f104 0215 	add.w	r2, r4, #21
 8006a38:	4290      	cmp	r0, r2
 8006a3a:	bf38      	it	cc
 8006a3c:	2304      	movcc	r3, #4
 8006a3e:	f841 c003 	str.w	ip, [r1, r3]
 8006a42:	f1bc 0f00 	cmp.w	ip, #0
 8006a46:	d001      	beq.n	8006a4c <__lshift+0xac>
 8006a48:	f108 0602 	add.w	r6, r8, #2
 8006a4c:	3e01      	subs	r6, #1
 8006a4e:	4638      	mov	r0, r7
 8006a50:	612e      	str	r6, [r5, #16]
 8006a52:	4621      	mov	r1, r4
 8006a54:	f7ff fe05 	bl	8006662 <_Bfree>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a62:	3301      	adds	r3, #1
 8006a64:	e7c1      	b.n	80069ea <__lshift+0x4a>
 8006a66:	3904      	subs	r1, #4
 8006a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a70:	4298      	cmp	r0, r3
 8006a72:	d8f9      	bhi.n	8006a68 <__lshift+0xc8>
 8006a74:	e7ea      	b.n	8006a4c <__lshift+0xac>
 8006a76:	bf00      	nop
 8006a78:	08008a29 	.word	0x08008a29
 8006a7c:	08008a95 	.word	0x08008a95

08006a80 <__mcmp>:
 8006a80:	b530      	push	{r4, r5, lr}
 8006a82:	6902      	ldr	r2, [r0, #16]
 8006a84:	690c      	ldr	r4, [r1, #16]
 8006a86:	1b12      	subs	r2, r2, r4
 8006a88:	d10e      	bne.n	8006aa8 <__mcmp+0x28>
 8006a8a:	f100 0314 	add.w	r3, r0, #20
 8006a8e:	3114      	adds	r1, #20
 8006a90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006aa0:	42a5      	cmp	r5, r4
 8006aa2:	d003      	beq.n	8006aac <__mcmp+0x2c>
 8006aa4:	d305      	bcc.n	8006ab2 <__mcmp+0x32>
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	bd30      	pop	{r4, r5, pc}
 8006aac:	4283      	cmp	r3, r0
 8006aae:	d3f3      	bcc.n	8006a98 <__mcmp+0x18>
 8006ab0:	e7fa      	b.n	8006aa8 <__mcmp+0x28>
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	e7f7      	b.n	8006aa8 <__mcmp+0x28>

08006ab8 <__mdiff>:
 8006ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	460c      	mov	r4, r1
 8006abe:	4606      	mov	r6, r0
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4690      	mov	r8, r2
 8006ac6:	f7ff ffdb 	bl	8006a80 <__mcmp>
 8006aca:	1e05      	subs	r5, r0, #0
 8006acc:	d110      	bne.n	8006af0 <__mdiff+0x38>
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff fda1 	bl	8006618 <_Balloc>
 8006ad6:	b930      	cbnz	r0, 8006ae6 <__mdiff+0x2e>
 8006ad8:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <__mdiff+0x10c>)
 8006ada:	4602      	mov	r2, r0
 8006adc:	f240 2132 	movw	r1, #562	; 0x232
 8006ae0:	4839      	ldr	r0, [pc, #228]	; (8006bc8 <__mdiff+0x110>)
 8006ae2:	f000 f9f5 	bl	8006ed0 <__assert_func>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af0:	bfa4      	itt	ge
 8006af2:	4643      	movge	r3, r8
 8006af4:	46a0      	movge	r8, r4
 8006af6:	4630      	mov	r0, r6
 8006af8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006afc:	bfa6      	itte	ge
 8006afe:	461c      	movge	r4, r3
 8006b00:	2500      	movge	r5, #0
 8006b02:	2501      	movlt	r5, #1
 8006b04:	f7ff fd88 	bl	8006618 <_Balloc>
 8006b08:	b920      	cbnz	r0, 8006b14 <__mdiff+0x5c>
 8006b0a:	4b2e      	ldr	r3, [pc, #184]	; (8006bc4 <__mdiff+0x10c>)
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b12:	e7e5      	b.n	8006ae0 <__mdiff+0x28>
 8006b14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b18:	6926      	ldr	r6, [r4, #16]
 8006b1a:	60c5      	str	r5, [r0, #12]
 8006b1c:	f104 0914 	add.w	r9, r4, #20
 8006b20:	f108 0514 	add.w	r5, r8, #20
 8006b24:	f100 0e14 	add.w	lr, r0, #20
 8006b28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b30:	f108 0210 	add.w	r2, r8, #16
 8006b34:	46f2      	mov	sl, lr
 8006b36:	2100      	movs	r1, #0
 8006b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b40:	fa1f f883 	uxth.w	r8, r3
 8006b44:	fa11 f18b 	uxtah	r1, r1, fp
 8006b48:	0c1b      	lsrs	r3, r3, #16
 8006b4a:	eba1 0808 	sub.w	r8, r1, r8
 8006b4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b56:	fa1f f888 	uxth.w	r8, r8
 8006b5a:	1419      	asrs	r1, r3, #16
 8006b5c:	454e      	cmp	r6, r9
 8006b5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b62:	f84a 3b04 	str.w	r3, [sl], #4
 8006b66:	d8e7      	bhi.n	8006b38 <__mdiff+0x80>
 8006b68:	1b33      	subs	r3, r6, r4
 8006b6a:	3b15      	subs	r3, #21
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	3304      	adds	r3, #4
 8006b72:	3415      	adds	r4, #21
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	bf38      	it	cc
 8006b78:	2304      	movcc	r3, #4
 8006b7a:	441d      	add	r5, r3
 8006b7c:	4473      	add	r3, lr
 8006b7e:	469e      	mov	lr, r3
 8006b80:	462e      	mov	r6, r5
 8006b82:	4566      	cmp	r6, ip
 8006b84:	d30e      	bcc.n	8006ba4 <__mdiff+0xec>
 8006b86:	f10c 0203 	add.w	r2, ip, #3
 8006b8a:	1b52      	subs	r2, r2, r5
 8006b8c:	f022 0203 	bic.w	r2, r2, #3
 8006b90:	3d03      	subs	r5, #3
 8006b92:	45ac      	cmp	ip, r5
 8006b94:	bf38      	it	cc
 8006b96:	2200      	movcc	r2, #0
 8006b98:	441a      	add	r2, r3
 8006b9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b9e:	b17b      	cbz	r3, 8006bc0 <__mdiff+0x108>
 8006ba0:	6107      	str	r7, [r0, #16]
 8006ba2:	e7a3      	b.n	8006aec <__mdiff+0x34>
 8006ba4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ba8:	fa11 f288 	uxtah	r2, r1, r8
 8006bac:	1414      	asrs	r4, r2, #16
 8006bae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006bb2:	b292      	uxth	r2, r2
 8006bb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006bb8:	f84e 2b04 	str.w	r2, [lr], #4
 8006bbc:	1421      	asrs	r1, r4, #16
 8006bbe:	e7e0      	b.n	8006b82 <__mdiff+0xca>
 8006bc0:	3f01      	subs	r7, #1
 8006bc2:	e7ea      	b.n	8006b9a <__mdiff+0xe2>
 8006bc4:	08008a29 	.word	0x08008a29
 8006bc8:	08008a95 	.word	0x08008a95

08006bcc <__d2b>:
 8006bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	ec57 6b10 	vmov	r6, r7, d0
 8006bd8:	4690      	mov	r8, r2
 8006bda:	f7ff fd1d 	bl	8006618 <_Balloc>
 8006bde:	4604      	mov	r4, r0
 8006be0:	b930      	cbnz	r0, 8006bf0 <__d2b+0x24>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b25      	ldr	r3, [pc, #148]	; (8006c7c <__d2b+0xb0>)
 8006be6:	4826      	ldr	r0, [pc, #152]	; (8006c80 <__d2b+0xb4>)
 8006be8:	f240 310a 	movw	r1, #778	; 0x30a
 8006bec:	f000 f970 	bl	8006ed0 <__assert_func>
 8006bf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bf8:	bb35      	cbnz	r5, 8006c48 <__d2b+0x7c>
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	d028      	beq.n	8006c52 <__d2b+0x86>
 8006c00:	4668      	mov	r0, sp
 8006c02:	9600      	str	r6, [sp, #0]
 8006c04:	f7ff fd9c 	bl	8006740 <__lo0bits>
 8006c08:	9900      	ldr	r1, [sp, #0]
 8006c0a:	b300      	cbz	r0, 8006c4e <__d2b+0x82>
 8006c0c:	9a01      	ldr	r2, [sp, #4]
 8006c0e:	f1c0 0320 	rsb	r3, r0, #32
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	430b      	orrs	r3, r1
 8006c18:	40c2      	lsrs	r2, r0
 8006c1a:	6163      	str	r3, [r4, #20]
 8006c1c:	9201      	str	r2, [sp, #4]
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	61a3      	str	r3, [r4, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf14      	ite	ne
 8006c26:	2202      	movne	r2, #2
 8006c28:	2201      	moveq	r2, #1
 8006c2a:	6122      	str	r2, [r4, #16]
 8006c2c:	b1d5      	cbz	r5, 8006c64 <__d2b+0x98>
 8006c2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c32:	4405      	add	r5, r0
 8006c34:	f8c9 5000 	str.w	r5, [r9]
 8006c38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c3c:	f8c8 0000 	str.w	r0, [r8]
 8006c40:	4620      	mov	r0, r4
 8006c42:	b003      	add	sp, #12
 8006c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c4c:	e7d5      	b.n	8006bfa <__d2b+0x2e>
 8006c4e:	6161      	str	r1, [r4, #20]
 8006c50:	e7e5      	b.n	8006c1e <__d2b+0x52>
 8006c52:	a801      	add	r0, sp, #4
 8006c54:	f7ff fd74 	bl	8006740 <__lo0bits>
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	6163      	str	r3, [r4, #20]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	6122      	str	r2, [r4, #16]
 8006c60:	3020      	adds	r0, #32
 8006c62:	e7e3      	b.n	8006c2c <__d2b+0x60>
 8006c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c6c:	f8c9 0000 	str.w	r0, [r9]
 8006c70:	6918      	ldr	r0, [r3, #16]
 8006c72:	f7ff fd45 	bl	8006700 <__hi0bits>
 8006c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c7a:	e7df      	b.n	8006c3c <__d2b+0x70>
 8006c7c:	08008a29 	.word	0x08008a29
 8006c80:	08008a95 	.word	0x08008a95

08006c84 <frexp>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	2100      	movs	r1, #0
 8006c88:	ec55 4b10 	vmov	r4, r5, d0
 8006c8c:	6001      	str	r1, [r0, #0]
 8006c8e:	4916      	ldr	r1, [pc, #88]	; (8006ce8 <frexp+0x64>)
 8006c90:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006c94:	428a      	cmp	r2, r1
 8006c96:	4606      	mov	r6, r0
 8006c98:	462b      	mov	r3, r5
 8006c9a:	dc22      	bgt.n	8006ce2 <frexp+0x5e>
 8006c9c:	ee10 1a10 	vmov	r1, s0
 8006ca0:	4311      	orrs	r1, r2
 8006ca2:	d01e      	beq.n	8006ce2 <frexp+0x5e>
 8006ca4:	4911      	ldr	r1, [pc, #68]	; (8006cec <frexp+0x68>)
 8006ca6:	4029      	ands	r1, r5
 8006ca8:	b969      	cbnz	r1, 8006cc6 <frexp+0x42>
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <frexp+0x6c>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	ee10 0a10 	vmov	r0, s0
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 fca8 	bl	8000608 <__aeabi_dmul>
 8006cb8:	460b      	mov	r3, r1
 8006cba:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006cbe:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	6031      	str	r1, [r6, #0]
 8006cc6:	6831      	ldr	r1, [r6, #0]
 8006cc8:	1512      	asrs	r2, r2, #20
 8006cca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cce:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8006cd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8006cdc:	6032      	str	r2, [r6, #0]
 8006cde:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006ce2:	ec45 4b10 	vmov	d0, r4, r5
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	7fefffff 	.word	0x7fefffff
 8006cec:	7ff00000 	.word	0x7ff00000
 8006cf0:	43500000 	.word	0x43500000

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d06      	ldr	r5, [pc, #24]	; (8006d10 <_sbrk_r+0x1c>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	f7fa fcdc 	bl	80016bc <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_sbrk_r+0x1a>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_sbrk_r+0x1a>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000a78 	.word	0x20000a78

08006d14 <strncpy>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	3901      	subs	r1, #1
 8006d18:	4603      	mov	r3, r0
 8006d1a:	b132      	cbz	r2, 8006d2a <strncpy+0x16>
 8006d1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d20:	f803 4b01 	strb.w	r4, [r3], #1
 8006d24:	3a01      	subs	r2, #1
 8006d26:	2c00      	cmp	r4, #0
 8006d28:	d1f7      	bne.n	8006d1a <strncpy+0x6>
 8006d2a:	441a      	add	r2, r3
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d100      	bne.n	8006d34 <strncpy+0x20>
 8006d32:	bd10      	pop	{r4, pc}
 8006d34:	f803 1b01 	strb.w	r1, [r3], #1
 8006d38:	e7f9      	b.n	8006d2e <strncpy+0x1a>

08006d3a <__ssprint_r>:
 8006d3a:	6893      	ldr	r3, [r2, #8]
 8006d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	4680      	mov	r8, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	4617      	mov	r7, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d061      	beq.n	8006e0e <__ssprint_r+0xd4>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8d2 a000 	ldr.w	sl, [r2]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	469b      	mov	fp, r3
 8006d54:	f1bb 0f00 	cmp.w	fp, #0
 8006d58:	d02b      	beq.n	8006db2 <__ssprint_r+0x78>
 8006d5a:	68a6      	ldr	r6, [r4, #8]
 8006d5c:	455e      	cmp	r6, fp
 8006d5e:	d844      	bhi.n	8006dea <__ssprint_r+0xb0>
 8006d60:	89a2      	ldrh	r2, [r4, #12]
 8006d62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d66:	d03e      	beq.n	8006de6 <__ssprint_r+0xac>
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	6921      	ldr	r1, [r4, #16]
 8006d6c:	6965      	ldr	r5, [r4, #20]
 8006d6e:	eba0 0901 	sub.w	r9, r0, r1
 8006d72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d7a:	f109 0001 	add.w	r0, r9, #1
 8006d7e:	106d      	asrs	r5, r5, #1
 8006d80:	4458      	add	r0, fp
 8006d82:	4285      	cmp	r5, r0
 8006d84:	bf38      	it	cc
 8006d86:	4605      	movcc	r5, r0
 8006d88:	0553      	lsls	r3, r2, #21
 8006d8a:	d545      	bpl.n	8006e18 <__ssprint_r+0xde>
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4640      	mov	r0, r8
 8006d90:	f7ff f9ec 	bl	800616c <_malloc_r>
 8006d94:	4606      	mov	r6, r0
 8006d96:	b9a0      	cbnz	r0, 8006dc2 <__ssprint_r+0x88>
 8006d98:	230c      	movs	r3, #12
 8006d9a:	f8c8 3000 	str.w	r3, [r8]
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	2300      	movs	r3, #0
 8006da8:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e02f      	b.n	8006e12 <__ssprint_r+0xd8>
 8006db2:	f8da 3000 	ldr.w	r3, [sl]
 8006db6:	f8da b004 	ldr.w	fp, [sl, #4]
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	f10a 0a08 	add.w	sl, sl, #8
 8006dc0:	e7c8      	b.n	8006d54 <__ssprint_r+0x1a>
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	6921      	ldr	r1, [r4, #16]
 8006dc6:	f7ff fc0d 	bl	80065e4 <memcpy>
 8006dca:	89a2      	ldrh	r2, [r4, #12]
 8006dcc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dd4:	81a2      	strh	r2, [r4, #12]
 8006dd6:	6126      	str	r6, [r4, #16]
 8006dd8:	6165      	str	r5, [r4, #20]
 8006dda:	444e      	add	r6, r9
 8006ddc:	eba5 0509 	sub.w	r5, r5, r9
 8006de0:	6026      	str	r6, [r4, #0]
 8006de2:	60a5      	str	r5, [r4, #8]
 8006de4:	465e      	mov	r6, fp
 8006de6:	455e      	cmp	r6, fp
 8006de8:	d900      	bls.n	8006dec <__ssprint_r+0xb2>
 8006dea:	465e      	mov	r6, fp
 8006dec:	4632      	mov	r2, r6
 8006dee:	9901      	ldr	r1, [sp, #4]
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	f000 f8eb 	bl	8006fcc <memmove>
 8006df6:	68a2      	ldr	r2, [r4, #8]
 8006df8:	1b92      	subs	r2, r2, r6
 8006dfa:	60a2      	str	r2, [r4, #8]
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	4432      	add	r2, r6
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	eba2 030b 	sub.w	r3, r2, fp
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1d1      	bne.n	8006db2 <__ssprint_r+0x78>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	b003      	add	sp, #12
 8006e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	f000 f8f0 	bl	8007000 <_realloc_r>
 8006e20:	4606      	mov	r6, r0
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d1d7      	bne.n	8006dd6 <__ssprint_r+0x9c>
 8006e26:	6921      	ldr	r1, [r4, #16]
 8006e28:	4640      	mov	r0, r8
 8006e2a:	f7ff f8d7 	bl	8005fdc <_free_r>
 8006e2e:	e7b3      	b.n	8006d98 <__ssprint_r+0x5e>

08006e30 <sysconf>:
 8006e30:	2808      	cmp	r0, #8
 8006e32:	b508      	push	{r3, lr}
 8006e34:	d006      	beq.n	8006e44 <sysconf+0x14>
 8006e36:	f7fc ffad 	bl	8003d94 <__errno>
 8006e3a:	2316      	movs	r3, #22
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e42:	bd08      	pop	{r3, pc}
 8006e44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006e48:	e7fb      	b.n	8006e42 <sysconf+0x12>
	...

08006e4c <__register_exitproc>:
 8006e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	f8df a078 	ldr.w	sl, [pc, #120]	; 8006ecc <__register_exitproc+0x80>
 8006e54:	4606      	mov	r6, r0
 8006e56:	f8da 0000 	ldr.w	r0, [sl]
 8006e5a:	4698      	mov	r8, r3
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	4691      	mov	r9, r2
 8006e60:	f7ff f982 	bl	8006168 <__retarget_lock_acquire_recursive>
 8006e64:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <__register_exitproc+0x7c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8006e6c:	b91c      	cbnz	r4, 8006e76 <__register_exitproc+0x2a>
 8006e6e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006e72:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8006e76:	6865      	ldr	r5, [r4, #4]
 8006e78:	f8da 0000 	ldr.w	r0, [sl]
 8006e7c:	2d1f      	cmp	r5, #31
 8006e7e:	dd05      	ble.n	8006e8c <__register_exitproc+0x40>
 8006e80:	f7ff f973 	bl	800616a <__retarget_lock_release_recursive>
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8c:	b19e      	cbz	r6, 8006eb6 <__register_exitproc+0x6a>
 8006e8e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006e92:	2201      	movs	r2, #1
 8006e94:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8006e98:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8006e9c:	40aa      	lsls	r2, r5
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8006ea4:	2e02      	cmp	r6, #2
 8006ea6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8006eaa:	bf02      	ittt	eq
 8006eac:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8006eb0:	4313      	orreq	r3, r2
 8006eb2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8006eb6:	1c6b      	adds	r3, r5, #1
 8006eb8:	3502      	adds	r5, #2
 8006eba:	6063      	str	r3, [r4, #4]
 8006ebc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8006ec0:	f7ff f953 	bl	800616a <__retarget_lock_release_recursive>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e7df      	b.n	8006e88 <__register_exitproc+0x3c>
 8006ec8:	080089c4 	.word	0x080089c4
 8006ecc:	20000438 	.word	0x20000438

08006ed0 <__assert_func>:
 8006ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <__assert_func+0x2c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4605      	mov	r5, r0
 8006edc:	68d8      	ldr	r0, [r3, #12]
 8006ede:	b14c      	cbz	r4, 8006ef4 <__assert_func+0x24>
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <__assert_func+0x30>)
 8006ee2:	9100      	str	r1, [sp, #0]
 8006ee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ee8:	4906      	ldr	r1, [pc, #24]	; (8006f04 <__assert_func+0x34>)
 8006eea:	462b      	mov	r3, r5
 8006eec:	f000 f844 	bl	8006f78 <fiprintf>
 8006ef0:	f000 ff98 	bl	8007e24 <abort>
 8006ef4:	4b04      	ldr	r3, [pc, #16]	; (8006f08 <__assert_func+0x38>)
 8006ef6:	461c      	mov	r4, r3
 8006ef8:	e7f3      	b.n	8006ee2 <__assert_func+0x12>
 8006efa:	bf00      	nop
 8006efc:	2000000c 	.word	0x2000000c
 8006f00:	08008bf4 	.word	0x08008bf4
 8006f04:	08008c01 	.word	0x08008c01
 8006f08:	08008c2f 	.word	0x08008c2f

08006f0c <_calloc_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	fba1 1502 	umull	r1, r5, r1, r2
 8006f12:	b92d      	cbnz	r5, 8006f20 <_calloc_r+0x14>
 8006f14:	f7ff f92a 	bl	800616c <_malloc_r>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	b938      	cbnz	r0, 8006f2c <_calloc_r+0x20>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	f7fc ff38 	bl	8003d94 <__errno>
 8006f24:	230c      	movs	r3, #12
 8006f26:	6003      	str	r3, [r0, #0]
 8006f28:	2400      	movs	r4, #0
 8006f2a:	e7f7      	b.n	8006f1c <_calloc_r+0x10>
 8006f2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006f30:	f022 0203 	bic.w	r2, r2, #3
 8006f34:	3a04      	subs	r2, #4
 8006f36:	2a24      	cmp	r2, #36	; 0x24
 8006f38:	d819      	bhi.n	8006f6e <_calloc_r+0x62>
 8006f3a:	2a13      	cmp	r2, #19
 8006f3c:	d915      	bls.n	8006f6a <_calloc_r+0x5e>
 8006f3e:	2a1b      	cmp	r2, #27
 8006f40:	e9c0 5500 	strd	r5, r5, [r0]
 8006f44:	d806      	bhi.n	8006f54 <_calloc_r+0x48>
 8006f46:	f100 0308 	add.w	r3, r0, #8
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	e9c3 2200 	strd	r2, r2, [r3]
 8006f50:	609a      	str	r2, [r3, #8]
 8006f52:	e7e3      	b.n	8006f1c <_calloc_r+0x10>
 8006f54:	2a24      	cmp	r2, #36	; 0x24
 8006f56:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8006f5a:	bf11      	iteee	ne
 8006f5c:	f100 0310 	addne.w	r3, r0, #16
 8006f60:	6105      	streq	r5, [r0, #16]
 8006f62:	f100 0318 	addeq.w	r3, r0, #24
 8006f66:	6145      	streq	r5, [r0, #20]
 8006f68:	e7ef      	b.n	8006f4a <_calloc_r+0x3e>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	e7ed      	b.n	8006f4a <_calloc_r+0x3e>
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f7fc ff3a 	bl	8003de8 <memset>
 8006f74:	e7d2      	b.n	8006f1c <_calloc_r+0x10>
	...

08006f78 <fiprintf>:
 8006f78:	b40e      	push	{r1, r2, r3}
 8006f7a:	b503      	push	{r0, r1, lr}
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	4805      	ldr	r0, [pc, #20]	; (8006f98 <fiprintf+0x20>)
 8006f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f86:	6800      	ldr	r0, [r0, #0]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	f000 fa0f 	bl	80073ac <_vfiprintf_r>
 8006f8e:	b002      	add	sp, #8
 8006f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f94:	b003      	add	sp, #12
 8006f96:	4770      	bx	lr
 8006f98:	2000000c 	.word	0x2000000c

08006f9c <__locale_mb_cur_max>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	; (8006fa4 <__locale_mb_cur_max+0x8>)
 8006f9e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006fa2:	4770      	bx	lr
 8006fa4:	2000084c 	.word	0x2000084c

08006fa8 <__ascii_mbtowc>:
 8006fa8:	b082      	sub	sp, #8
 8006faa:	b901      	cbnz	r1, 8006fae <__ascii_mbtowc+0x6>
 8006fac:	a901      	add	r1, sp, #4
 8006fae:	b142      	cbz	r2, 8006fc2 <__ascii_mbtowc+0x1a>
 8006fb0:	b14b      	cbz	r3, 8006fc6 <__ascii_mbtowc+0x1e>
 8006fb2:	7813      	ldrb	r3, [r2, #0]
 8006fb4:	600b      	str	r3, [r1, #0]
 8006fb6:	7812      	ldrb	r2, [r2, #0]
 8006fb8:	1e10      	subs	r0, r2, #0
 8006fba:	bf18      	it	ne
 8006fbc:	2001      	movne	r0, #1
 8006fbe:	b002      	add	sp, #8
 8006fc0:	4770      	bx	lr
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	e7fb      	b.n	8006fbe <__ascii_mbtowc+0x16>
 8006fc6:	f06f 0001 	mvn.w	r0, #1
 8006fca:	e7f8      	b.n	8006fbe <__ascii_mbtowc+0x16>

08006fcc <memmove>:
 8006fcc:	4288      	cmp	r0, r1
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	eb01 0402 	add.w	r4, r1, r2
 8006fd4:	d902      	bls.n	8006fdc <memmove+0x10>
 8006fd6:	4284      	cmp	r4, r0
 8006fd8:	4623      	mov	r3, r4
 8006fda:	d807      	bhi.n	8006fec <memmove+0x20>
 8006fdc:	1e43      	subs	r3, r0, #1
 8006fde:	42a1      	cmp	r1, r4
 8006fe0:	d008      	beq.n	8006ff4 <memmove+0x28>
 8006fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fea:	e7f8      	b.n	8006fde <memmove+0x12>
 8006fec:	4402      	add	r2, r0
 8006fee:	4601      	mov	r1, r0
 8006ff0:	428a      	cmp	r2, r1
 8006ff2:	d100      	bne.n	8006ff6 <memmove+0x2a>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ffe:	e7f7      	b.n	8006ff0 <memmove+0x24>

08007000 <_realloc_r>:
 8007000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	4681      	mov	r9, r0
 8007006:	460c      	mov	r4, r1
 8007008:	b929      	cbnz	r1, 8007016 <_realloc_r+0x16>
 800700a:	4611      	mov	r1, r2
 800700c:	b003      	add	sp, #12
 800700e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007012:	f7ff b8ab 	b.w	800616c <_malloc_r>
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	f7ff faf2 	bl	8006600 <__malloc_lock>
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	f102 080b 	add.w	r8, r2, #11
 8007022:	f1b8 0f16 	cmp.w	r8, #22
 8007026:	d90b      	bls.n	8007040 <_realloc_r+0x40>
 8007028:	f038 0807 	bics.w	r8, r8, #7
 800702c:	d50a      	bpl.n	8007044 <_realloc_r+0x44>
 800702e:	230c      	movs	r3, #12
 8007030:	f8c9 3000 	str.w	r3, [r9]
 8007034:	f04f 0b00 	mov.w	fp, #0
 8007038:	4658      	mov	r0, fp
 800703a:	b003      	add	sp, #12
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	f04f 0810 	mov.w	r8, #16
 8007044:	4590      	cmp	r8, r2
 8007046:	d3f2      	bcc.n	800702e <_realloc_r+0x2e>
 8007048:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800704c:	f025 0603 	bic.w	r6, r5, #3
 8007050:	45b0      	cmp	r8, r6
 8007052:	f1a4 0a08 	sub.w	sl, r4, #8
 8007056:	f340 816e 	ble.w	8007336 <_realloc_r+0x336>
 800705a:	499b      	ldr	r1, [pc, #620]	; (80072c8 <_realloc_r+0x2c8>)
 800705c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007060:	eb0a 0306 	add.w	r3, sl, r6
 8007064:	459c      	cmp	ip, r3
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	d005      	beq.n	8007076 <_realloc_r+0x76>
 800706a:	f021 0001 	bic.w	r0, r1, #1
 800706e:	4418      	add	r0, r3
 8007070:	6840      	ldr	r0, [r0, #4]
 8007072:	07c7      	lsls	r7, r0, #31
 8007074:	d427      	bmi.n	80070c6 <_realloc_r+0xc6>
 8007076:	f021 0103 	bic.w	r1, r1, #3
 800707a:	459c      	cmp	ip, r3
 800707c:	eb06 0701 	add.w	r7, r6, r1
 8007080:	d119      	bne.n	80070b6 <_realloc_r+0xb6>
 8007082:	f108 0010 	add.w	r0, r8, #16
 8007086:	42b8      	cmp	r0, r7
 8007088:	dc1f      	bgt.n	80070ca <_realloc_r+0xca>
 800708a:	eb0a 0308 	add.w	r3, sl, r8
 800708e:	4a8e      	ldr	r2, [pc, #568]	; (80072c8 <_realloc_r+0x2c8>)
 8007090:	eba7 0708 	sub.w	r7, r7, r8
 8007094:	f047 0701 	orr.w	r7, r7, #1
 8007098:	6093      	str	r3, [r2, #8]
 800709a:	605f      	str	r7, [r3, #4]
 800709c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	ea43 0308 	orr.w	r3, r3, r8
 80070a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80070ac:	4648      	mov	r0, r9
 80070ae:	f7ff faad 	bl	800660c <__malloc_unlock>
 80070b2:	46a3      	mov	fp, r4
 80070b4:	e7c0      	b.n	8007038 <_realloc_r+0x38>
 80070b6:	45b8      	cmp	r8, r7
 80070b8:	dc07      	bgt.n	80070ca <_realloc_r+0xca>
 80070ba:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80070be:	60da      	str	r2, [r3, #12]
 80070c0:	6093      	str	r3, [r2, #8]
 80070c2:	4655      	mov	r5, sl
 80070c4:	e07f      	b.n	80071c6 <_realloc_r+0x1c6>
 80070c6:	2100      	movs	r1, #0
 80070c8:	460b      	mov	r3, r1
 80070ca:	07e8      	lsls	r0, r5, #31
 80070cc:	f100 80e5 	bmi.w	800729a <_realloc_r+0x29a>
 80070d0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80070d4:	ebaa 0505 	sub.w	r5, sl, r5
 80070d8:	6868      	ldr	r0, [r5, #4]
 80070da:	f020 0003 	bic.w	r0, r0, #3
 80070de:	eb00 0b06 	add.w	fp, r0, r6
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80a5 	beq.w	8007232 <_realloc_r+0x232>
 80070e8:	459c      	cmp	ip, r3
 80070ea:	eb01 070b 	add.w	r7, r1, fp
 80070ee:	d14a      	bne.n	8007186 <_realloc_r+0x186>
 80070f0:	f108 0310 	add.w	r3, r8, #16
 80070f4:	42bb      	cmp	r3, r7
 80070f6:	f300 809c 	bgt.w	8007232 <_realloc_r+0x232>
 80070fa:	46ab      	mov	fp, r5
 80070fc:	68eb      	ldr	r3, [r5, #12]
 80070fe:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007102:	60d3      	str	r3, [r2, #12]
 8007104:	609a      	str	r2, [r3, #8]
 8007106:	1f32      	subs	r2, r6, #4
 8007108:	2a24      	cmp	r2, #36	; 0x24
 800710a:	d837      	bhi.n	800717c <_realloc_r+0x17c>
 800710c:	2a13      	cmp	r2, #19
 800710e:	d933      	bls.n	8007178 <_realloc_r+0x178>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	60ab      	str	r3, [r5, #8]
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	60eb      	str	r3, [r5, #12]
 8007118:	2a1b      	cmp	r2, #27
 800711a:	d81b      	bhi.n	8007154 <_realloc_r+0x154>
 800711c:	3408      	adds	r4, #8
 800711e:	f105 0310 	add.w	r3, r5, #16
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	68a2      	ldr	r2, [r4, #8]
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	eb05 0308 	add.w	r3, r5, r8
 8007132:	4a65      	ldr	r2, [pc, #404]	; (80072c8 <_realloc_r+0x2c8>)
 8007134:	eba7 0708 	sub.w	r7, r7, r8
 8007138:	f047 0701 	orr.w	r7, r7, #1
 800713c:	6093      	str	r3, [r2, #8]
 800713e:	605f      	str	r7, [r3, #4]
 8007140:	686b      	ldr	r3, [r5, #4]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	ea43 0308 	orr.w	r3, r3, r8
 800714a:	606b      	str	r3, [r5, #4]
 800714c:	4648      	mov	r0, r9
 800714e:	f7ff fa5d 	bl	800660c <__malloc_unlock>
 8007152:	e771      	b.n	8007038 <_realloc_r+0x38>
 8007154:	68a3      	ldr	r3, [r4, #8]
 8007156:	612b      	str	r3, [r5, #16]
 8007158:	68e3      	ldr	r3, [r4, #12]
 800715a:	616b      	str	r3, [r5, #20]
 800715c:	2a24      	cmp	r2, #36	; 0x24
 800715e:	bf01      	itttt	eq
 8007160:	6923      	ldreq	r3, [r4, #16]
 8007162:	61ab      	streq	r3, [r5, #24]
 8007164:	6962      	ldreq	r2, [r4, #20]
 8007166:	61ea      	streq	r2, [r5, #28]
 8007168:	bf19      	ittee	ne
 800716a:	3410      	addne	r4, #16
 800716c:	f105 0318 	addne.w	r3, r5, #24
 8007170:	f105 0320 	addeq.w	r3, r5, #32
 8007174:	3418      	addeq	r4, #24
 8007176:	e7d4      	b.n	8007122 <_realloc_r+0x122>
 8007178:	465b      	mov	r3, fp
 800717a:	e7d2      	b.n	8007122 <_realloc_r+0x122>
 800717c:	4621      	mov	r1, r4
 800717e:	4658      	mov	r0, fp
 8007180:	f7ff ff24 	bl	8006fcc <memmove>
 8007184:	e7d3      	b.n	800712e <_realloc_r+0x12e>
 8007186:	45b8      	cmp	r8, r7
 8007188:	dc53      	bgt.n	8007232 <_realloc_r+0x232>
 800718a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800718e:	4628      	mov	r0, r5
 8007190:	60da      	str	r2, [r3, #12]
 8007192:	6093      	str	r3, [r2, #8]
 8007194:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007198:	68eb      	ldr	r3, [r5, #12]
 800719a:	60d3      	str	r3, [r2, #12]
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	1f32      	subs	r2, r6, #4
 80071a0:	2a24      	cmp	r2, #36	; 0x24
 80071a2:	d842      	bhi.n	800722a <_realloc_r+0x22a>
 80071a4:	2a13      	cmp	r2, #19
 80071a6:	d908      	bls.n	80071ba <_realloc_r+0x1ba>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	60ab      	str	r3, [r5, #8]
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	60eb      	str	r3, [r5, #12]
 80071b0:	2a1b      	cmp	r2, #27
 80071b2:	d828      	bhi.n	8007206 <_realloc_r+0x206>
 80071b4:	3408      	adds	r4, #8
 80071b6:	f105 0010 	add.w	r0, r5, #16
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	6863      	ldr	r3, [r4, #4]
 80071c0:	6043      	str	r3, [r0, #4]
 80071c2:	68a3      	ldr	r3, [r4, #8]
 80071c4:	6083      	str	r3, [r0, #8]
 80071c6:	686b      	ldr	r3, [r5, #4]
 80071c8:	eba7 0008 	sub.w	r0, r7, r8
 80071cc:	280f      	cmp	r0, #15
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	eb05 0207 	add.w	r2, r5, r7
 80071d6:	f240 80b0 	bls.w	800733a <_realloc_r+0x33a>
 80071da:	eb05 0108 	add.w	r1, r5, r8
 80071de:	ea48 0303 	orr.w	r3, r8, r3
 80071e2:	f040 0001 	orr.w	r0, r0, #1
 80071e6:	606b      	str	r3, [r5, #4]
 80071e8:	6048      	str	r0, [r1, #4]
 80071ea:	6853      	ldr	r3, [r2, #4]
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	6053      	str	r3, [r2, #4]
 80071f2:	3108      	adds	r1, #8
 80071f4:	4648      	mov	r0, r9
 80071f6:	f7fe fef1 	bl	8005fdc <_free_r>
 80071fa:	4648      	mov	r0, r9
 80071fc:	f7ff fa06 	bl	800660c <__malloc_unlock>
 8007200:	f105 0b08 	add.w	fp, r5, #8
 8007204:	e718      	b.n	8007038 <_realloc_r+0x38>
 8007206:	68a3      	ldr	r3, [r4, #8]
 8007208:	612b      	str	r3, [r5, #16]
 800720a:	68e3      	ldr	r3, [r4, #12]
 800720c:	616b      	str	r3, [r5, #20]
 800720e:	2a24      	cmp	r2, #36	; 0x24
 8007210:	bf01      	itttt	eq
 8007212:	6923      	ldreq	r3, [r4, #16]
 8007214:	61ab      	streq	r3, [r5, #24]
 8007216:	6963      	ldreq	r3, [r4, #20]
 8007218:	61eb      	streq	r3, [r5, #28]
 800721a:	bf19      	ittee	ne
 800721c:	3410      	addne	r4, #16
 800721e:	f105 0018 	addne.w	r0, r5, #24
 8007222:	f105 0020 	addeq.w	r0, r5, #32
 8007226:	3418      	addeq	r4, #24
 8007228:	e7c7      	b.n	80071ba <_realloc_r+0x1ba>
 800722a:	4621      	mov	r1, r4
 800722c:	f7ff fece 	bl	8006fcc <memmove>
 8007230:	e7c9      	b.n	80071c6 <_realloc_r+0x1c6>
 8007232:	45d8      	cmp	r8, fp
 8007234:	dc31      	bgt.n	800729a <_realloc_r+0x29a>
 8007236:	4628      	mov	r0, r5
 8007238:	68eb      	ldr	r3, [r5, #12]
 800723a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800723e:	60d3      	str	r3, [r2, #12]
 8007240:	609a      	str	r2, [r3, #8]
 8007242:	1f32      	subs	r2, r6, #4
 8007244:	2a24      	cmp	r2, #36	; 0x24
 8007246:	d824      	bhi.n	8007292 <_realloc_r+0x292>
 8007248:	2a13      	cmp	r2, #19
 800724a:	d908      	bls.n	800725e <_realloc_r+0x25e>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	60ab      	str	r3, [r5, #8]
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	60eb      	str	r3, [r5, #12]
 8007254:	2a1b      	cmp	r2, #27
 8007256:	d80a      	bhi.n	800726e <_realloc_r+0x26e>
 8007258:	3408      	adds	r4, #8
 800725a:	f105 0010 	add.w	r0, r5, #16
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	6003      	str	r3, [r0, #0]
 8007262:	6863      	ldr	r3, [r4, #4]
 8007264:	6043      	str	r3, [r0, #4]
 8007266:	68a3      	ldr	r3, [r4, #8]
 8007268:	6083      	str	r3, [r0, #8]
 800726a:	465f      	mov	r7, fp
 800726c:	e7ab      	b.n	80071c6 <_realloc_r+0x1c6>
 800726e:	68a3      	ldr	r3, [r4, #8]
 8007270:	612b      	str	r3, [r5, #16]
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	616b      	str	r3, [r5, #20]
 8007276:	2a24      	cmp	r2, #36	; 0x24
 8007278:	bf01      	itttt	eq
 800727a:	6923      	ldreq	r3, [r4, #16]
 800727c:	61ab      	streq	r3, [r5, #24]
 800727e:	6963      	ldreq	r3, [r4, #20]
 8007280:	61eb      	streq	r3, [r5, #28]
 8007282:	bf19      	ittee	ne
 8007284:	3410      	addne	r4, #16
 8007286:	f105 0018 	addne.w	r0, r5, #24
 800728a:	f105 0020 	addeq.w	r0, r5, #32
 800728e:	3418      	addeq	r4, #24
 8007290:	e7e5      	b.n	800725e <_realloc_r+0x25e>
 8007292:	4621      	mov	r1, r4
 8007294:	f7ff fe9a 	bl	8006fcc <memmove>
 8007298:	e7e7      	b.n	800726a <_realloc_r+0x26a>
 800729a:	4611      	mov	r1, r2
 800729c:	4648      	mov	r0, r9
 800729e:	f7fe ff65 	bl	800616c <_malloc_r>
 80072a2:	4683      	mov	fp, r0
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f af51 	beq.w	800714c <_realloc_r+0x14c>
 80072aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	4453      	add	r3, sl
 80072b4:	f1a0 0208 	sub.w	r2, r0, #8
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d107      	bne.n	80072cc <_realloc_r+0x2cc>
 80072bc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80072c0:	f027 0703 	bic.w	r7, r7, #3
 80072c4:	4437      	add	r7, r6
 80072c6:	e6fc      	b.n	80070c2 <_realloc_r+0xc2>
 80072c8:	2000043c 	.word	0x2000043c
 80072cc:	1f32      	subs	r2, r6, #4
 80072ce:	2a24      	cmp	r2, #36	; 0x24
 80072d0:	d82d      	bhi.n	800732e <_realloc_r+0x32e>
 80072d2:	2a13      	cmp	r2, #19
 80072d4:	d928      	bls.n	8007328 <_realloc_r+0x328>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	6003      	str	r3, [r0, #0]
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	6043      	str	r3, [r0, #4]
 80072de:	2a1b      	cmp	r2, #27
 80072e0:	d80e      	bhi.n	8007300 <_realloc_r+0x300>
 80072e2:	f104 0208 	add.w	r2, r4, #8
 80072e6:	f100 0308 	add.w	r3, r0, #8
 80072ea:	6811      	ldr	r1, [r2, #0]
 80072ec:	6019      	str	r1, [r3, #0]
 80072ee:	6851      	ldr	r1, [r2, #4]
 80072f0:	6059      	str	r1, [r3, #4]
 80072f2:	6892      	ldr	r2, [r2, #8]
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	4621      	mov	r1, r4
 80072f8:	4648      	mov	r0, r9
 80072fa:	f7fe fe6f 	bl	8005fdc <_free_r>
 80072fe:	e725      	b.n	800714c <_realloc_r+0x14c>
 8007300:	68a3      	ldr	r3, [r4, #8]
 8007302:	6083      	str	r3, [r0, #8]
 8007304:	68e3      	ldr	r3, [r4, #12]
 8007306:	60c3      	str	r3, [r0, #12]
 8007308:	2a24      	cmp	r2, #36	; 0x24
 800730a:	bf01      	itttt	eq
 800730c:	6923      	ldreq	r3, [r4, #16]
 800730e:	6103      	streq	r3, [r0, #16]
 8007310:	6961      	ldreq	r1, [r4, #20]
 8007312:	6141      	streq	r1, [r0, #20]
 8007314:	bf19      	ittee	ne
 8007316:	f104 0210 	addne.w	r2, r4, #16
 800731a:	f100 0310 	addne.w	r3, r0, #16
 800731e:	f104 0218 	addeq.w	r2, r4, #24
 8007322:	f100 0318 	addeq.w	r3, r0, #24
 8007326:	e7e0      	b.n	80072ea <_realloc_r+0x2ea>
 8007328:	4603      	mov	r3, r0
 800732a:	4622      	mov	r2, r4
 800732c:	e7dd      	b.n	80072ea <_realloc_r+0x2ea>
 800732e:	4621      	mov	r1, r4
 8007330:	f7ff fe4c 	bl	8006fcc <memmove>
 8007334:	e7df      	b.n	80072f6 <_realloc_r+0x2f6>
 8007336:	4637      	mov	r7, r6
 8007338:	e6c3      	b.n	80070c2 <_realloc_r+0xc2>
 800733a:	431f      	orrs	r7, r3
 800733c:	606f      	str	r7, [r5, #4]
 800733e:	6853      	ldr	r3, [r2, #4]
 8007340:	f043 0301 	orr.w	r3, r3, #1
 8007344:	6053      	str	r3, [r2, #4]
 8007346:	e758      	b.n	80071fa <_realloc_r+0x1fa>

08007348 <__sprint_r>:
 8007348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	6893      	ldr	r3, [r2, #8]
 800734e:	4680      	mov	r8, r0
 8007350:	460f      	mov	r7, r1
 8007352:	4614      	mov	r4, r2
 8007354:	b91b      	cbnz	r3, 800735e <__sprint_r+0x16>
 8007356:	6053      	str	r3, [r2, #4]
 8007358:	4618      	mov	r0, r3
 800735a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007360:	049d      	lsls	r5, r3, #18
 8007362:	d520      	bpl.n	80073a6 <__sprint_r+0x5e>
 8007364:	6815      	ldr	r5, [r2, #0]
 8007366:	3508      	adds	r5, #8
 8007368:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800736c:	f04f 0900 	mov.w	r9, #0
 8007370:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007374:	45ca      	cmp	sl, r9
 8007376:	dc0b      	bgt.n	8007390 <__sprint_r+0x48>
 8007378:	68a3      	ldr	r3, [r4, #8]
 800737a:	f026 0003 	bic.w	r0, r6, #3
 800737e:	1a18      	subs	r0, r3, r0
 8007380:	60a0      	str	r0, [r4, #8]
 8007382:	3508      	adds	r5, #8
 8007384:	2800      	cmp	r0, #0
 8007386:	d1ef      	bne.n	8007368 <__sprint_r+0x20>
 8007388:	2300      	movs	r3, #0
 800738a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800738e:	e7e4      	b.n	800735a <__sprint_r+0x12>
 8007390:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8007394:	463a      	mov	r2, r7
 8007396:	4640      	mov	r0, r8
 8007398:	f000 feaf 	bl	80080fa <_fputwc_r>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d0f3      	beq.n	8007388 <__sprint_r+0x40>
 80073a0:	f109 0901 	add.w	r9, r9, #1
 80073a4:	e7e6      	b.n	8007374 <__sprint_r+0x2c>
 80073a6:	f000 fed3 	bl	8008150 <__sfvwrite_r>
 80073aa:	e7ed      	b.n	8007388 <__sprint_r+0x40>

080073ac <_vfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	ed2d 8b02 	vpush	{d8}
 80073b4:	b0b9      	sub	sp, #228	; 0xe4
 80073b6:	460f      	mov	r7, r1
 80073b8:	9201      	str	r2, [sp, #4]
 80073ba:	461d      	mov	r5, r3
 80073bc:	461c      	mov	r4, r3
 80073be:	4681      	mov	r9, r0
 80073c0:	b118      	cbz	r0, 80073ca <_vfiprintf_r+0x1e>
 80073c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80073c4:	b90b      	cbnz	r3, 80073ca <_vfiprintf_r+0x1e>
 80073c6:	f000 fe2f 	bl	8008028 <__sinit>
 80073ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073cc:	07d8      	lsls	r0, r3, #31
 80073ce:	d405      	bmi.n	80073dc <_vfiprintf_r+0x30>
 80073d0:	89bb      	ldrh	r3, [r7, #12]
 80073d2:	0599      	lsls	r1, r3, #22
 80073d4:	d402      	bmi.n	80073dc <_vfiprintf_r+0x30>
 80073d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80073d8:	f7fe fec6 	bl	8006168 <__retarget_lock_acquire_recursive>
 80073dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073e0:	049a      	lsls	r2, r3, #18
 80073e2:	d406      	bmi.n	80073f2 <_vfiprintf_r+0x46>
 80073e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073e8:	81bb      	strh	r3, [r7, #12]
 80073ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f0:	667b      	str	r3, [r7, #100]	; 0x64
 80073f2:	89bb      	ldrh	r3, [r7, #12]
 80073f4:	071e      	lsls	r6, r3, #28
 80073f6:	d501      	bpl.n	80073fc <_vfiprintf_r+0x50>
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	b9bb      	cbnz	r3, 800742c <_vfiprintf_r+0x80>
 80073fc:	4639      	mov	r1, r7
 80073fe:	4648      	mov	r0, r9
 8007400:	f000 fcb8 	bl	8007d74 <__swsetup_r>
 8007404:	b190      	cbz	r0, 800742c <_vfiprintf_r+0x80>
 8007406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007408:	07d8      	lsls	r0, r3, #31
 800740a:	d508      	bpl.n	800741e <_vfiprintf_r+0x72>
 800740c:	f04f 33ff 	mov.w	r3, #4294967295
 8007410:	9302      	str	r3, [sp, #8]
 8007412:	9802      	ldr	r0, [sp, #8]
 8007414:	b039      	add	sp, #228	; 0xe4
 8007416:	ecbd 8b02 	vpop	{d8}
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	89bb      	ldrh	r3, [r7, #12]
 8007420:	0599      	lsls	r1, r3, #22
 8007422:	d4f3      	bmi.n	800740c <_vfiprintf_r+0x60>
 8007424:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007426:	f7fe fea0 	bl	800616a <__retarget_lock_release_recursive>
 800742a:	e7ef      	b.n	800740c <_vfiprintf_r+0x60>
 800742c:	89bb      	ldrh	r3, [r7, #12]
 800742e:	f003 021a 	and.w	r2, r3, #26
 8007432:	2a0a      	cmp	r2, #10
 8007434:	d116      	bne.n	8007464 <_vfiprintf_r+0xb8>
 8007436:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800743a:	2a00      	cmp	r2, #0
 800743c:	db12      	blt.n	8007464 <_vfiprintf_r+0xb8>
 800743e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007440:	07d2      	lsls	r2, r2, #31
 8007442:	d404      	bmi.n	800744e <_vfiprintf_r+0xa2>
 8007444:	059e      	lsls	r6, r3, #22
 8007446:	d402      	bmi.n	800744e <_vfiprintf_r+0xa2>
 8007448:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800744a:	f7fe fe8e 	bl	800616a <__retarget_lock_release_recursive>
 800744e:	9a01      	ldr	r2, [sp, #4]
 8007450:	462b      	mov	r3, r5
 8007452:	4639      	mov	r1, r7
 8007454:	4648      	mov	r0, r9
 8007456:	b039      	add	sp, #228	; 0xe4
 8007458:	ecbd 8b02 	vpop	{d8}
 800745c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	f000 bc3a 	b.w	8007cd8 <__sbprintf>
 8007464:	2300      	movs	r3, #0
 8007466:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800746a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800746e:	ae0f      	add	r6, sp, #60	; 0x3c
 8007470:	ee08 3a10 	vmov	s16, r3
 8007474:	960c      	str	r6, [sp, #48]	; 0x30
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	461d      	mov	r5, r3
 800747e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007482:	b10a      	cbz	r2, 8007488 <_vfiprintf_r+0xdc>
 8007484:	2a25      	cmp	r2, #37	; 0x25
 8007486:	d1f9      	bne.n	800747c <_vfiprintf_r+0xd0>
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	ebb5 0803 	subs.w	r8, r5, r3
 800748e:	d00d      	beq.n	80074ac <_vfiprintf_r+0x100>
 8007490:	e9c6 3800 	strd	r3, r8, [r6]
 8007494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007496:	4443      	add	r3, r8
 8007498:	930e      	str	r3, [sp, #56]	; 0x38
 800749a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800749c:	3301      	adds	r3, #1
 800749e:	2b07      	cmp	r3, #7
 80074a0:	930d      	str	r3, [sp, #52]	; 0x34
 80074a2:	dc75      	bgt.n	8007590 <_vfiprintf_r+0x1e4>
 80074a4:	3608      	adds	r6, #8
 80074a6:	9b02      	ldr	r3, [sp, #8]
 80074a8:	4443      	add	r3, r8
 80074aa:	9302      	str	r3, [sp, #8]
 80074ac:	782b      	ldrb	r3, [r5, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 83d6 	beq.w	8007c60 <_vfiprintf_r+0x8b4>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f04f 31ff 	mov.w	r1, #4294967295
 80074ba:	1c6a      	adds	r2, r5, #1
 80074bc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80074c0:	9100      	str	r1, [sp, #0]
 80074c2:	9303      	str	r3, [sp, #12]
 80074c4:	469a      	mov	sl, r3
 80074c6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80074ca:	9201      	str	r2, [sp, #4]
 80074cc:	f1a3 0220 	sub.w	r2, r3, #32
 80074d0:	2a5a      	cmp	r2, #90	; 0x5a
 80074d2:	f200 831f 	bhi.w	8007b14 <_vfiprintf_r+0x768>
 80074d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80074da:	009b      	.short	0x009b
 80074dc:	031d031d 	.word	0x031d031d
 80074e0:	031d00a3 	.word	0x031d00a3
 80074e4:	031d031d 	.word	0x031d031d
 80074e8:	031d0082 	.word	0x031d0082
 80074ec:	00a6031d 	.word	0x00a6031d
 80074f0:	031d00b0 	.word	0x031d00b0
 80074f4:	00b200ad 	.word	0x00b200ad
 80074f8:	00cd031d 	.word	0x00cd031d
 80074fc:	00d000d0 	.word	0x00d000d0
 8007500:	00d000d0 	.word	0x00d000d0
 8007504:	00d000d0 	.word	0x00d000d0
 8007508:	00d000d0 	.word	0x00d000d0
 800750c:	031d00d0 	.word	0x031d00d0
 8007510:	031d031d 	.word	0x031d031d
 8007514:	031d031d 	.word	0x031d031d
 8007518:	031d031d 	.word	0x031d031d
 800751c:	031d031d 	.word	0x031d031d
 8007520:	010800fa 	.word	0x010800fa
 8007524:	031d031d 	.word	0x031d031d
 8007528:	031d031d 	.word	0x031d031d
 800752c:	031d031d 	.word	0x031d031d
 8007530:	031d031d 	.word	0x031d031d
 8007534:	031d031d 	.word	0x031d031d
 8007538:	031d0158 	.word	0x031d0158
 800753c:	031d031d 	.word	0x031d031d
 8007540:	031d01a1 	.word	0x031d01a1
 8007544:	031d027e 	.word	0x031d027e
 8007548:	029e031d 	.word	0x029e031d
 800754c:	031d031d 	.word	0x031d031d
 8007550:	031d031d 	.word	0x031d031d
 8007554:	031d031d 	.word	0x031d031d
 8007558:	031d031d 	.word	0x031d031d
 800755c:	031d031d 	.word	0x031d031d
 8007560:	010a00fa 	.word	0x010a00fa
 8007564:	031d031d 	.word	0x031d031d
 8007568:	00e0031d 	.word	0x00e0031d
 800756c:	00f4010a 	.word	0x00f4010a
 8007570:	00ed031d 	.word	0x00ed031d
 8007574:	0136031d 	.word	0x0136031d
 8007578:	018f015a 	.word	0x018f015a
 800757c:	031d00f4 	.word	0x031d00f4
 8007580:	009901a1 	.word	0x009901a1
 8007584:	031d0280 	.word	0x031d0280
 8007588:	0065031d 	.word	0x0065031d
 800758c:	0099031d 	.word	0x0099031d
 8007590:	aa0c      	add	r2, sp, #48	; 0x30
 8007592:	4639      	mov	r1, r7
 8007594:	4648      	mov	r0, r9
 8007596:	f7ff fed7 	bl	8007348 <__sprint_r>
 800759a:	2800      	cmp	r0, #0
 800759c:	f040 833f 	bne.w	8007c1e <_vfiprintf_r+0x872>
 80075a0:	ae0f      	add	r6, sp, #60	; 0x3c
 80075a2:	e780      	b.n	80074a6 <_vfiprintf_r+0xfa>
 80075a4:	4a9c      	ldr	r2, [pc, #624]	; (8007818 <_vfiprintf_r+0x46c>)
 80075a6:	9205      	str	r2, [sp, #20]
 80075a8:	f01a 0220 	ands.w	r2, sl, #32
 80075ac:	f000 8235 	beq.w	8007a1a <_vfiprintf_r+0x66e>
 80075b0:	3407      	adds	r4, #7
 80075b2:	f024 0207 	bic.w	r2, r4, #7
 80075b6:	4693      	mov	fp, r2
 80075b8:	6855      	ldr	r5, [r2, #4]
 80075ba:	f85b 4b08 	ldr.w	r4, [fp], #8
 80075be:	f01a 0f01 	tst.w	sl, #1
 80075c2:	d009      	beq.n	80075d8 <_vfiprintf_r+0x22c>
 80075c4:	ea54 0205 	orrs.w	r2, r4, r5
 80075c8:	bf1f      	itttt	ne
 80075ca:	2230      	movne	r2, #48	; 0x30
 80075cc:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 80075d0:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 80075d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80075d8:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80075dc:	e11a      	b.n	8007814 <_vfiprintf_r+0x468>
 80075de:	4648      	mov	r0, r9
 80075e0:	f7fe fdbc 	bl	800615c <_localeconv_r>
 80075e4:	6843      	ldr	r3, [r0, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	ee08 3a10 	vmov	s16, r3
 80075ec:	f7f8 fdf8 	bl	80001e0 <strlen>
 80075f0:	9007      	str	r0, [sp, #28]
 80075f2:	4648      	mov	r0, r9
 80075f4:	f7fe fdb2 	bl	800615c <_localeconv_r>
 80075f8:	6883      	ldr	r3, [r0, #8]
 80075fa:	9306      	str	r3, [sp, #24]
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	b12b      	cbz	r3, 800760c <_vfiprintf_r+0x260>
 8007600:	9b06      	ldr	r3, [sp, #24]
 8007602:	b11b      	cbz	r3, 800760c <_vfiprintf_r+0x260>
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b10b      	cbz	r3, 800760c <_vfiprintf_r+0x260>
 8007608:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800760c:	9a01      	ldr	r2, [sp, #4]
 800760e:	e75a      	b.n	80074c6 <_vfiprintf_r+0x11a>
 8007610:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f9      	bne.n	800760c <_vfiprintf_r+0x260>
 8007618:	2320      	movs	r3, #32
 800761a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800761e:	e7f5      	b.n	800760c <_vfiprintf_r+0x260>
 8007620:	f04a 0a01 	orr.w	sl, sl, #1
 8007624:	e7f2      	b.n	800760c <_vfiprintf_r+0x260>
 8007626:	f854 3b04 	ldr.w	r3, [r4], #4
 800762a:	9303      	str	r3, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	daed      	bge.n	800760c <_vfiprintf_r+0x260>
 8007630:	425b      	negs	r3, r3
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	f04a 0a04 	orr.w	sl, sl, #4
 8007638:	e7e8      	b.n	800760c <_vfiprintf_r+0x260>
 800763a:	232b      	movs	r3, #43	; 0x2b
 800763c:	e7ed      	b.n	800761a <_vfiprintf_r+0x26e>
 800763e:	9a01      	ldr	r2, [sp, #4]
 8007640:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007644:	2b2a      	cmp	r3, #42	; 0x2a
 8007646:	d112      	bne.n	800766e <_vfiprintf_r+0x2c2>
 8007648:	f854 0b04 	ldr.w	r0, [r4], #4
 800764c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8007650:	e9cd 3200 	strd	r3, r2, [sp]
 8007654:	e7da      	b.n	800760c <_vfiprintf_r+0x260>
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	200a      	movs	r0, #10
 800765a:	fb00 1303 	mla	r3, r0, r3, r1
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007664:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007668:	2909      	cmp	r1, #9
 800766a:	d9f4      	bls.n	8007656 <_vfiprintf_r+0x2aa>
 800766c:	e72d      	b.n	80074ca <_vfiprintf_r+0x11e>
 800766e:	2100      	movs	r1, #0
 8007670:	9100      	str	r1, [sp, #0]
 8007672:	e7f7      	b.n	8007664 <_vfiprintf_r+0x2b8>
 8007674:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007678:	e7c8      	b.n	800760c <_vfiprintf_r+0x260>
 800767a:	2100      	movs	r1, #0
 800767c:	9a01      	ldr	r2, [sp, #4]
 800767e:	9103      	str	r1, [sp, #12]
 8007680:	9903      	ldr	r1, [sp, #12]
 8007682:	3b30      	subs	r3, #48	; 0x30
 8007684:	200a      	movs	r0, #10
 8007686:	fb00 3301 	mla	r3, r0, r1, r3
 800768a:	9303      	str	r3, [sp, #12]
 800768c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007690:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007694:	2909      	cmp	r1, #9
 8007696:	d9f3      	bls.n	8007680 <_vfiprintf_r+0x2d4>
 8007698:	e717      	b.n	80074ca <_vfiprintf_r+0x11e>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b68      	cmp	r3, #104	; 0x68
 80076a0:	bf01      	itttt	eq
 80076a2:	9b01      	ldreq	r3, [sp, #4]
 80076a4:	3301      	addeq	r3, #1
 80076a6:	9301      	streq	r3, [sp, #4]
 80076a8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80076ac:	bf18      	it	ne
 80076ae:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80076b2:	e7ab      	b.n	800760c <_vfiprintf_r+0x260>
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b6c      	cmp	r3, #108	; 0x6c
 80076ba:	d105      	bne.n	80076c8 <_vfiprintf_r+0x31c>
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	3301      	adds	r3, #1
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	f04a 0a20 	orr.w	sl, sl, #32
 80076c6:	e7a1      	b.n	800760c <_vfiprintf_r+0x260>
 80076c8:	f04a 0a10 	orr.w	sl, sl, #16
 80076cc:	e79e      	b.n	800760c <_vfiprintf_r+0x260>
 80076ce:	46a3      	mov	fp, r4
 80076d0:	2100      	movs	r1, #0
 80076d2:	f85b 3b04 	ldr.w	r3, [fp], #4
 80076d6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80076da:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80076de:	2301      	movs	r3, #1
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	460d      	mov	r5, r1
 80076e4:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 80076e8:	e0ad      	b.n	8007846 <_vfiprintf_r+0x49a>
 80076ea:	f04a 0a10 	orr.w	sl, sl, #16
 80076ee:	f01a 0f20 	tst.w	sl, #32
 80076f2:	d011      	beq.n	8007718 <_vfiprintf_r+0x36c>
 80076f4:	3407      	adds	r4, #7
 80076f6:	f024 0307 	bic.w	r3, r4, #7
 80076fa:	469b      	mov	fp, r3
 80076fc:	685d      	ldr	r5, [r3, #4]
 80076fe:	f85b 4b08 	ldr.w	r4, [fp], #8
 8007702:	2d00      	cmp	r5, #0
 8007704:	da06      	bge.n	8007714 <_vfiprintf_r+0x368>
 8007706:	4264      	negs	r4, r4
 8007708:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800770c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007710:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8007714:	2301      	movs	r3, #1
 8007716:	e04a      	b.n	80077ae <_vfiprintf_r+0x402>
 8007718:	46a3      	mov	fp, r4
 800771a:	f01a 0f10 	tst.w	sl, #16
 800771e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8007722:	d002      	beq.n	800772a <_vfiprintf_r+0x37e>
 8007724:	462c      	mov	r4, r5
 8007726:	17ed      	asrs	r5, r5, #31
 8007728:	e7eb      	b.n	8007702 <_vfiprintf_r+0x356>
 800772a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800772e:	d003      	beq.n	8007738 <_vfiprintf_r+0x38c>
 8007730:	b22c      	sxth	r4, r5
 8007732:	f345 35c0 	sbfx	r5, r5, #15, #1
 8007736:	e7e4      	b.n	8007702 <_vfiprintf_r+0x356>
 8007738:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800773c:	d0f2      	beq.n	8007724 <_vfiprintf_r+0x378>
 800773e:	b26c      	sxtb	r4, r5
 8007740:	f345 15c0 	sbfx	r5, r5, #7, #1
 8007744:	e7dd      	b.n	8007702 <_vfiprintf_r+0x356>
 8007746:	f01a 0f20 	tst.w	sl, #32
 800774a:	f104 0b04 	add.w	fp, r4, #4
 800774e:	d007      	beq.n	8007760 <_vfiprintf_r+0x3b4>
 8007750:	9a02      	ldr	r2, [sp, #8]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	9902      	ldr	r1, [sp, #8]
 8007756:	17d2      	asrs	r2, r2, #31
 8007758:	e9c3 1200 	strd	r1, r2, [r3]
 800775c:	465c      	mov	r4, fp
 800775e:	e68c      	b.n	800747a <_vfiprintf_r+0xce>
 8007760:	f01a 0f10 	tst.w	sl, #16
 8007764:	d003      	beq.n	800776e <_vfiprintf_r+0x3c2>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	9a02      	ldr	r2, [sp, #8]
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e7f6      	b.n	800775c <_vfiprintf_r+0x3b0>
 800776e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007772:	d003      	beq.n	800777c <_vfiprintf_r+0x3d0>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	9a02      	ldr	r2, [sp, #8]
 8007778:	801a      	strh	r2, [r3, #0]
 800777a:	e7ef      	b.n	800775c <_vfiprintf_r+0x3b0>
 800777c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007780:	d0f1      	beq.n	8007766 <_vfiprintf_r+0x3ba>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	9a02      	ldr	r2, [sp, #8]
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e7e8      	b.n	800775c <_vfiprintf_r+0x3b0>
 800778a:	f04a 0a10 	orr.w	sl, sl, #16
 800778e:	f01a 0320 	ands.w	r3, sl, #32
 8007792:	d01f      	beq.n	80077d4 <_vfiprintf_r+0x428>
 8007794:	3407      	adds	r4, #7
 8007796:	f024 0307 	bic.w	r3, r4, #7
 800779a:	469b      	mov	fp, r3
 800779c:	685d      	ldr	r5, [r3, #4]
 800779e:	f85b 4b08 	ldr.w	r4, [fp], #8
 80077a2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80077a6:	2300      	movs	r3, #0
 80077a8:	2200      	movs	r2, #0
 80077aa:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 80077ae:	9a00      	ldr	r2, [sp, #0]
 80077b0:	3201      	adds	r2, #1
 80077b2:	f000 8262 	beq.w	8007c7a <_vfiprintf_r+0x8ce>
 80077b6:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80077ba:	9204      	str	r2, [sp, #16]
 80077bc:	ea54 0205 	orrs.w	r2, r4, r5
 80077c0:	f040 8261 	bne.w	8007c86 <_vfiprintf_r+0x8da>
 80077c4:	9a00      	ldr	r2, [sp, #0]
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	f000 8199 	beq.w	8007afe <_vfiprintf_r+0x752>
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	f040 825d 	bne.w	8007c8c <_vfiprintf_r+0x8e0>
 80077d2:	e139      	b.n	8007a48 <_vfiprintf_r+0x69c>
 80077d4:	46a3      	mov	fp, r4
 80077d6:	f01a 0510 	ands.w	r5, sl, #16
 80077da:	f85b 4b04 	ldr.w	r4, [fp], #4
 80077de:	d001      	beq.n	80077e4 <_vfiprintf_r+0x438>
 80077e0:	461d      	mov	r5, r3
 80077e2:	e7de      	b.n	80077a2 <_vfiprintf_r+0x3f6>
 80077e4:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80077e8:	d001      	beq.n	80077ee <_vfiprintf_r+0x442>
 80077ea:	b2a4      	uxth	r4, r4
 80077ec:	e7d9      	b.n	80077a2 <_vfiprintf_r+0x3f6>
 80077ee:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80077f2:	d0d6      	beq.n	80077a2 <_vfiprintf_r+0x3f6>
 80077f4:	b2e4      	uxtb	r4, r4
 80077f6:	e7f3      	b.n	80077e0 <_vfiprintf_r+0x434>
 80077f8:	2330      	movs	r3, #48	; 0x30
 80077fa:	46a3      	mov	fp, r4
 80077fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8007800:	2378      	movs	r3, #120	; 0x78
 8007802:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8007806:	f85b 4b04 	ldr.w	r4, [fp], #4
 800780a:	4b03      	ldr	r3, [pc, #12]	; (8007818 <_vfiprintf_r+0x46c>)
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	2500      	movs	r5, #0
 8007810:	f04a 0a02 	orr.w	sl, sl, #2
 8007814:	2302      	movs	r3, #2
 8007816:	e7c7      	b.n	80077a8 <_vfiprintf_r+0x3fc>
 8007818:	080089d8 	.word	0x080089d8
 800781c:	9b00      	ldr	r3, [sp, #0]
 800781e:	46a3      	mov	fp, r4
 8007820:	2500      	movs	r5, #0
 8007822:	1c5c      	adds	r4, r3, #1
 8007824:	f85b 8b04 	ldr.w	r8, [fp], #4
 8007828:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800782c:	f000 80ce 	beq.w	80079cc <_vfiprintf_r+0x620>
 8007830:	461a      	mov	r2, r3
 8007832:	4629      	mov	r1, r5
 8007834:	4640      	mov	r0, r8
 8007836:	f7f8 fcdb 	bl	80001f0 <memchr>
 800783a:	2800      	cmp	r0, #0
 800783c:	f000 8174 	beq.w	8007b28 <_vfiprintf_r+0x77c>
 8007840:	eba0 0308 	sub.w	r3, r0, r8
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	9b00      	ldr	r3, [sp, #0]
 8007848:	42ab      	cmp	r3, r5
 800784a:	bfb8      	it	lt
 800784c:	462b      	movlt	r3, r5
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007854:	b113      	cbz	r3, 800785c <_vfiprintf_r+0x4b0>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	3301      	adds	r3, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	f01a 0302 	ands.w	r3, sl, #2
 8007860:	9308      	str	r3, [sp, #32]
 8007862:	bf1e      	ittt	ne
 8007864:	9b04      	ldrne	r3, [sp, #16]
 8007866:	3302      	addne	r3, #2
 8007868:	9304      	strne	r3, [sp, #16]
 800786a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800786e:	9309      	str	r3, [sp, #36]	; 0x24
 8007870:	d11f      	bne.n	80078b2 <_vfiprintf_r+0x506>
 8007872:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007876:	1a9c      	subs	r4, r3, r2
 8007878:	2c00      	cmp	r4, #0
 800787a:	dd1a      	ble.n	80078b2 <_vfiprintf_r+0x506>
 800787c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007880:	48aa      	ldr	r0, [pc, #680]	; (8007b2c <_vfiprintf_r+0x780>)
 8007882:	6030      	str	r0, [r6, #0]
 8007884:	2c10      	cmp	r4, #16
 8007886:	f103 0301 	add.w	r3, r3, #1
 800788a:	f106 0108 	add.w	r1, r6, #8
 800788e:	f300 8153 	bgt.w	8007b38 <_vfiprintf_r+0x78c>
 8007892:	6074      	str	r4, [r6, #4]
 8007894:	2b07      	cmp	r3, #7
 8007896:	4414      	add	r4, r2
 8007898:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800789c:	f340 815e 	ble.w	8007b5c <_vfiprintf_r+0x7b0>
 80078a0:	aa0c      	add	r2, sp, #48	; 0x30
 80078a2:	4639      	mov	r1, r7
 80078a4:	4648      	mov	r0, r9
 80078a6:	f7ff fd4f 	bl	8007348 <__sprint_r>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f040 81b7 	bne.w	8007c1e <_vfiprintf_r+0x872>
 80078b0:	ae0f      	add	r6, sp, #60	; 0x3c
 80078b2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80078b6:	b173      	cbz	r3, 80078d6 <_vfiprintf_r+0x52a>
 80078b8:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 80078bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078be:	6032      	str	r2, [r6, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	6072      	str	r2, [r6, #4]
 80078c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c6:	3301      	adds	r3, #1
 80078c8:	3201      	adds	r2, #1
 80078ca:	2b07      	cmp	r3, #7
 80078cc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80078d0:	f300 8146 	bgt.w	8007b60 <_vfiprintf_r+0x7b4>
 80078d4:	3608      	adds	r6, #8
 80078d6:	9b08      	ldr	r3, [sp, #32]
 80078d8:	b16b      	cbz	r3, 80078f6 <_vfiprintf_r+0x54a>
 80078da:	aa0b      	add	r2, sp, #44	; 0x2c
 80078dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078de:	6032      	str	r2, [r6, #0]
 80078e0:	2202      	movs	r2, #2
 80078e2:	6072      	str	r2, [r6, #4]
 80078e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078e6:	3301      	adds	r3, #1
 80078e8:	3202      	adds	r2, #2
 80078ea:	2b07      	cmp	r3, #7
 80078ec:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80078f0:	f300 813f 	bgt.w	8007b72 <_vfiprintf_r+0x7c6>
 80078f4:	3608      	adds	r6, #8
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d11f      	bne.n	800793c <_vfiprintf_r+0x590>
 80078fc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007900:	1a9c      	subs	r4, r3, r2
 8007902:	2c00      	cmp	r4, #0
 8007904:	dd1a      	ble.n	800793c <_vfiprintf_r+0x590>
 8007906:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800790a:	4889      	ldr	r0, [pc, #548]	; (8007b30 <_vfiprintf_r+0x784>)
 800790c:	6030      	str	r0, [r6, #0]
 800790e:	2c10      	cmp	r4, #16
 8007910:	f103 0301 	add.w	r3, r3, #1
 8007914:	f106 0108 	add.w	r1, r6, #8
 8007918:	f300 8134 	bgt.w	8007b84 <_vfiprintf_r+0x7d8>
 800791c:	6074      	str	r4, [r6, #4]
 800791e:	2b07      	cmp	r3, #7
 8007920:	4414      	add	r4, r2
 8007922:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8007926:	f340 813f 	ble.w	8007ba8 <_vfiprintf_r+0x7fc>
 800792a:	aa0c      	add	r2, sp, #48	; 0x30
 800792c:	4639      	mov	r1, r7
 800792e:	4648      	mov	r0, r9
 8007930:	f7ff fd0a 	bl	8007348 <__sprint_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 8172 	bne.w	8007c1e <_vfiprintf_r+0x872>
 800793a:	ae0f      	add	r6, sp, #60	; 0x3c
 800793c:	9b00      	ldr	r3, [sp, #0]
 800793e:	1aec      	subs	r4, r5, r3
 8007940:	2c00      	cmp	r4, #0
 8007942:	dd1a      	ble.n	800797a <_vfiprintf_r+0x5ce>
 8007944:	4d7a      	ldr	r5, [pc, #488]	; (8007b30 <_vfiprintf_r+0x784>)
 8007946:	6035      	str	r5, [r6, #0]
 8007948:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800794c:	2c10      	cmp	r4, #16
 800794e:	f103 0301 	add.w	r3, r3, #1
 8007952:	f106 0208 	add.w	r2, r6, #8
 8007956:	f300 8129 	bgt.w	8007bac <_vfiprintf_r+0x800>
 800795a:	6074      	str	r4, [r6, #4]
 800795c:	2b07      	cmp	r3, #7
 800795e:	440c      	add	r4, r1
 8007960:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8007964:	f340 8133 	ble.w	8007bce <_vfiprintf_r+0x822>
 8007968:	aa0c      	add	r2, sp, #48	; 0x30
 800796a:	4639      	mov	r1, r7
 800796c:	4648      	mov	r0, r9
 800796e:	f7ff fceb 	bl	8007348 <__sprint_r>
 8007972:	2800      	cmp	r0, #0
 8007974:	f040 8153 	bne.w	8007c1e <_vfiprintf_r+0x872>
 8007978:	ae0f      	add	r6, sp, #60	; 0x3c
 800797a:	9b00      	ldr	r3, [sp, #0]
 800797c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800797e:	6073      	str	r3, [r6, #4]
 8007980:	4418      	add	r0, r3
 8007982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007984:	f8c6 8000 	str.w	r8, [r6]
 8007988:	3301      	adds	r3, #1
 800798a:	2b07      	cmp	r3, #7
 800798c:	900e      	str	r0, [sp, #56]	; 0x38
 800798e:	930d      	str	r3, [sp, #52]	; 0x34
 8007990:	f300 811f 	bgt.w	8007bd2 <_vfiprintf_r+0x826>
 8007994:	f106 0308 	add.w	r3, r6, #8
 8007998:	f01a 0f04 	tst.w	sl, #4
 800799c:	f040 8121 	bne.w	8007be2 <_vfiprintf_r+0x836>
 80079a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079a4:	9904      	ldr	r1, [sp, #16]
 80079a6:	428a      	cmp	r2, r1
 80079a8:	bfac      	ite	ge
 80079aa:	189b      	addge	r3, r3, r2
 80079ac:	185b      	addlt	r3, r3, r1
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b2:	b13b      	cbz	r3, 80079c4 <_vfiprintf_r+0x618>
 80079b4:	aa0c      	add	r2, sp, #48	; 0x30
 80079b6:	4639      	mov	r1, r7
 80079b8:	4648      	mov	r0, r9
 80079ba:	f7ff fcc5 	bl	8007348 <__sprint_r>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f040 812d 	bne.w	8007c1e <_vfiprintf_r+0x872>
 80079c4:	2300      	movs	r3, #0
 80079c6:	930d      	str	r3, [sp, #52]	; 0x34
 80079c8:	ae0f      	add	r6, sp, #60	; 0x3c
 80079ca:	e6c7      	b.n	800775c <_vfiprintf_r+0x3b0>
 80079cc:	4640      	mov	r0, r8
 80079ce:	f7f8 fc07 	bl	80001e0 <strlen>
 80079d2:	9000      	str	r0, [sp, #0]
 80079d4:	e737      	b.n	8007846 <_vfiprintf_r+0x49a>
 80079d6:	f04a 0a10 	orr.w	sl, sl, #16
 80079da:	f01a 0320 	ands.w	r3, sl, #32
 80079de:	d008      	beq.n	80079f2 <_vfiprintf_r+0x646>
 80079e0:	3407      	adds	r4, #7
 80079e2:	f024 0307 	bic.w	r3, r4, #7
 80079e6:	469b      	mov	fp, r3
 80079e8:	685d      	ldr	r5, [r3, #4]
 80079ea:	f85b 4b08 	ldr.w	r4, [fp], #8
 80079ee:	2301      	movs	r3, #1
 80079f0:	e6da      	b.n	80077a8 <_vfiprintf_r+0x3fc>
 80079f2:	46a3      	mov	fp, r4
 80079f4:	f01a 0510 	ands.w	r5, sl, #16
 80079f8:	f85b 4b04 	ldr.w	r4, [fp], #4
 80079fc:	d001      	beq.n	8007a02 <_vfiprintf_r+0x656>
 80079fe:	461d      	mov	r5, r3
 8007a00:	e7f5      	b.n	80079ee <_vfiprintf_r+0x642>
 8007a02:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8007a06:	d001      	beq.n	8007a0c <_vfiprintf_r+0x660>
 8007a08:	b2a4      	uxth	r4, r4
 8007a0a:	e7f0      	b.n	80079ee <_vfiprintf_r+0x642>
 8007a0c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8007a10:	d0ed      	beq.n	80079ee <_vfiprintf_r+0x642>
 8007a12:	b2e4      	uxtb	r4, r4
 8007a14:	e7f3      	b.n	80079fe <_vfiprintf_r+0x652>
 8007a16:	4a47      	ldr	r2, [pc, #284]	; (8007b34 <_vfiprintf_r+0x788>)
 8007a18:	e5c5      	b.n	80075a6 <_vfiprintf_r+0x1fa>
 8007a1a:	46a3      	mov	fp, r4
 8007a1c:	f01a 0510 	ands.w	r5, sl, #16
 8007a20:	f85b 4b04 	ldr.w	r4, [fp], #4
 8007a24:	d001      	beq.n	8007a2a <_vfiprintf_r+0x67e>
 8007a26:	4615      	mov	r5, r2
 8007a28:	e5c9      	b.n	80075be <_vfiprintf_r+0x212>
 8007a2a:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8007a2e:	d001      	beq.n	8007a34 <_vfiprintf_r+0x688>
 8007a30:	b2a4      	uxth	r4, r4
 8007a32:	e5c4      	b.n	80075be <_vfiprintf_r+0x212>
 8007a34:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8007a38:	f43f adc1 	beq.w	80075be <_vfiprintf_r+0x212>
 8007a3c:	b2e4      	uxtb	r4, r4
 8007a3e:	e7f2      	b.n	8007a26 <_vfiprintf_r+0x67a>
 8007a40:	2c0a      	cmp	r4, #10
 8007a42:	f175 0300 	sbcs.w	r3, r5, #0
 8007a46:	d205      	bcs.n	8007a54 <_vfiprintf_r+0x6a8>
 8007a48:	3430      	adds	r4, #48	; 0x30
 8007a4a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8007a4e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8007a52:	e137      	b.n	8007cc4 <_vfiprintf_r+0x918>
 8007a54:	ab38      	add	r3, sp, #224	; 0xe0
 8007a56:	9308      	str	r3, [sp, #32]
 8007a58:	9b04      	ldr	r3, [sp, #16]
 8007a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5e:	f04f 0a00 	mov.w	sl, #0
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	220a      	movs	r2, #10
 8007a68:	f103 38ff 	add.w	r8, r3, #4294967295
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4629      	mov	r1, r5
 8007a72:	f7f9 f8a1 	bl	8000bb8 <__aeabi_uldivmod>
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	3230      	adds	r2, #48	; 0x30
 8007a7a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a80:	f10a 0a01 	add.w	sl, sl, #1
 8007a84:	b1db      	cbz	r3, 8007abe <_vfiprintf_r+0x712>
 8007a86:	9b06      	ldr	r3, [sp, #24]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	4553      	cmp	r3, sl
 8007a8c:	d117      	bne.n	8007abe <_vfiprintf_r+0x712>
 8007a8e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007a92:	d014      	beq.n	8007abe <_vfiprintf_r+0x712>
 8007a94:	2c0a      	cmp	r4, #10
 8007a96:	f175 0300 	sbcs.w	r3, r5, #0
 8007a9a:	d310      	bcc.n	8007abe <_vfiprintf_r+0x712>
 8007a9c:	9b07      	ldr	r3, [sp, #28]
 8007a9e:	eba8 0803 	sub.w	r8, r8, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	ee18 1a10 	vmov	r1, s16
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f7ff f933 	bl	8006d14 <strncpy>
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	b1a3      	cbz	r3, 8007ade <_vfiprintf_r+0x732>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	9306      	str	r3, [sp, #24]
 8007aba:	f04f 0a00 	mov.w	sl, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f7f9 f877 	bl	8000bb8 <__aeabi_uldivmod>
 8007aca:	2c0a      	cmp	r4, #10
 8007acc:	f175 0300 	sbcs.w	r3, r5, #0
 8007ad0:	f0c0 80f8 	bcc.w	8007cc4 <_vfiprintf_r+0x918>
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	f8cd 8020 	str.w	r8, [sp, #32]
 8007adc:	e7c2      	b.n	8007a64 <_vfiprintf_r+0x6b8>
 8007ade:	469a      	mov	sl, r3
 8007ae0:	e7ed      	b.n	8007abe <_vfiprintf_r+0x712>
 8007ae2:	f004 030f 	and.w	r3, r4, #15
 8007ae6:	9a05      	ldr	r2, [sp, #20]
 8007ae8:	0924      	lsrs	r4, r4, #4
 8007aea:	5cd3      	ldrb	r3, [r2, r3]
 8007aec:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007af0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8007af4:	092d      	lsrs	r5, r5, #4
 8007af6:	ea54 0305 	orrs.w	r3, r4, r5
 8007afa:	d1f2      	bne.n	8007ae2 <_vfiprintf_r+0x736>
 8007afc:	e0e2      	b.n	8007cc4 <_vfiprintf_r+0x918>
 8007afe:	b933      	cbnz	r3, 8007b0e <_vfiprintf_r+0x762>
 8007b00:	f01a 0f01 	tst.w	sl, #1
 8007b04:	d003      	beq.n	8007b0e <_vfiprintf_r+0x762>
 8007b06:	2330      	movs	r3, #48	; 0x30
 8007b08:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8007b0c:	e79f      	b.n	8007a4e <_vfiprintf_r+0x6a2>
 8007b0e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8007b12:	e0d7      	b.n	8007cc4 <_vfiprintf_r+0x918>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80a3 	beq.w	8007c60 <_vfiprintf_r+0x8b4>
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8007b20:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8007b24:	46a3      	mov	fp, r4
 8007b26:	e5da      	b.n	80076de <_vfiprintf_r+0x332>
 8007b28:	4605      	mov	r5, r0
 8007b2a:	e68c      	b.n	8007846 <_vfiprintf_r+0x49a>
 8007b2c:	08008c3a 	.word	0x08008c3a
 8007b30:	08008c4a 	.word	0x08008c4a
 8007b34:	080089e9 	.word	0x080089e9
 8007b38:	2010      	movs	r0, #16
 8007b3a:	4402      	add	r2, r0
 8007b3c:	2b07      	cmp	r3, #7
 8007b3e:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8007b42:	6070      	str	r0, [r6, #4]
 8007b44:	dd07      	ble.n	8007b56 <_vfiprintf_r+0x7aa>
 8007b46:	aa0c      	add	r2, sp, #48	; 0x30
 8007b48:	4639      	mov	r1, r7
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	f7ff fbfc 	bl	8007348 <__sprint_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d164      	bne.n	8007c1e <_vfiprintf_r+0x872>
 8007b54:	a90f      	add	r1, sp, #60	; 0x3c
 8007b56:	3c10      	subs	r4, #16
 8007b58:	460e      	mov	r6, r1
 8007b5a:	e68f      	b.n	800787c <_vfiprintf_r+0x4d0>
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	e6a8      	b.n	80078b2 <_vfiprintf_r+0x506>
 8007b60:	aa0c      	add	r2, sp, #48	; 0x30
 8007b62:	4639      	mov	r1, r7
 8007b64:	4648      	mov	r0, r9
 8007b66:	f7ff fbef 	bl	8007348 <__sprint_r>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d157      	bne.n	8007c1e <_vfiprintf_r+0x872>
 8007b6e:	ae0f      	add	r6, sp, #60	; 0x3c
 8007b70:	e6b1      	b.n	80078d6 <_vfiprintf_r+0x52a>
 8007b72:	aa0c      	add	r2, sp, #48	; 0x30
 8007b74:	4639      	mov	r1, r7
 8007b76:	4648      	mov	r0, r9
 8007b78:	f7ff fbe6 	bl	8007348 <__sprint_r>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d14e      	bne.n	8007c1e <_vfiprintf_r+0x872>
 8007b80:	ae0f      	add	r6, sp, #60	; 0x3c
 8007b82:	e6b8      	b.n	80078f6 <_vfiprintf_r+0x54a>
 8007b84:	2010      	movs	r0, #16
 8007b86:	4402      	add	r2, r0
 8007b88:	2b07      	cmp	r3, #7
 8007b8a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8007b8e:	6070      	str	r0, [r6, #4]
 8007b90:	dd07      	ble.n	8007ba2 <_vfiprintf_r+0x7f6>
 8007b92:	aa0c      	add	r2, sp, #48	; 0x30
 8007b94:	4639      	mov	r1, r7
 8007b96:	4648      	mov	r0, r9
 8007b98:	f7ff fbd6 	bl	8007348 <__sprint_r>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d13e      	bne.n	8007c1e <_vfiprintf_r+0x872>
 8007ba0:	a90f      	add	r1, sp, #60	; 0x3c
 8007ba2:	3c10      	subs	r4, #16
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	e6ae      	b.n	8007906 <_vfiprintf_r+0x55a>
 8007ba8:	460e      	mov	r6, r1
 8007baa:	e6c7      	b.n	800793c <_vfiprintf_r+0x590>
 8007bac:	2010      	movs	r0, #16
 8007bae:	4401      	add	r1, r0
 8007bb0:	2b07      	cmp	r3, #7
 8007bb2:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007bb6:	6070      	str	r0, [r6, #4]
 8007bb8:	dd06      	ble.n	8007bc8 <_vfiprintf_r+0x81c>
 8007bba:	aa0c      	add	r2, sp, #48	; 0x30
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4648      	mov	r0, r9
 8007bc0:	f7ff fbc2 	bl	8007348 <__sprint_r>
 8007bc4:	bb58      	cbnz	r0, 8007c1e <_vfiprintf_r+0x872>
 8007bc6:	aa0f      	add	r2, sp, #60	; 0x3c
 8007bc8:	3c10      	subs	r4, #16
 8007bca:	4616      	mov	r6, r2
 8007bcc:	e6bb      	b.n	8007946 <_vfiprintf_r+0x59a>
 8007bce:	4616      	mov	r6, r2
 8007bd0:	e6d3      	b.n	800797a <_vfiprintf_r+0x5ce>
 8007bd2:	aa0c      	add	r2, sp, #48	; 0x30
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4648      	mov	r0, r9
 8007bd8:	f7ff fbb6 	bl	8007348 <__sprint_r>
 8007bdc:	b9f8      	cbnz	r0, 8007c1e <_vfiprintf_r+0x872>
 8007bde:	ab0f      	add	r3, sp, #60	; 0x3c
 8007be0:	e6da      	b.n	8007998 <_vfiprintf_r+0x5ec>
 8007be2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8007be6:	1a54      	subs	r4, r2, r1
 8007be8:	2c00      	cmp	r4, #0
 8007bea:	f77f aed9 	ble.w	80079a0 <_vfiprintf_r+0x5f4>
 8007bee:	4d39      	ldr	r5, [pc, #228]	; (8007cd4 <_vfiprintf_r+0x928>)
 8007bf0:	2610      	movs	r6, #16
 8007bf2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8007bf6:	2c10      	cmp	r4, #16
 8007bf8:	f102 0201 	add.w	r2, r2, #1
 8007bfc:	601d      	str	r5, [r3, #0]
 8007bfe:	dc1d      	bgt.n	8007c3c <_vfiprintf_r+0x890>
 8007c00:	605c      	str	r4, [r3, #4]
 8007c02:	2a07      	cmp	r2, #7
 8007c04:	440c      	add	r4, r1
 8007c06:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8007c0a:	f77f aec9 	ble.w	80079a0 <_vfiprintf_r+0x5f4>
 8007c0e:	aa0c      	add	r2, sp, #48	; 0x30
 8007c10:	4639      	mov	r1, r7
 8007c12:	4648      	mov	r0, r9
 8007c14:	f7ff fb98 	bl	8007348 <__sprint_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f aec1 	beq.w	80079a0 <_vfiprintf_r+0x5f4>
 8007c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c20:	07d9      	lsls	r1, r3, #31
 8007c22:	d405      	bmi.n	8007c30 <_vfiprintf_r+0x884>
 8007c24:	89bb      	ldrh	r3, [r7, #12]
 8007c26:	059a      	lsls	r2, r3, #22
 8007c28:	d402      	bmi.n	8007c30 <_vfiprintf_r+0x884>
 8007c2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007c2c:	f7fe fa9d 	bl	800616a <__retarget_lock_release_recursive>
 8007c30:	89bb      	ldrh	r3, [r7, #12]
 8007c32:	065b      	lsls	r3, r3, #25
 8007c34:	f57f abed 	bpl.w	8007412 <_vfiprintf_r+0x66>
 8007c38:	f7ff bbe8 	b.w	800740c <_vfiprintf_r+0x60>
 8007c3c:	3110      	adds	r1, #16
 8007c3e:	2a07      	cmp	r2, #7
 8007c40:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8007c44:	605e      	str	r6, [r3, #4]
 8007c46:	dc02      	bgt.n	8007c4e <_vfiprintf_r+0x8a2>
 8007c48:	3308      	adds	r3, #8
 8007c4a:	3c10      	subs	r4, #16
 8007c4c:	e7d1      	b.n	8007bf2 <_vfiprintf_r+0x846>
 8007c4e:	aa0c      	add	r2, sp, #48	; 0x30
 8007c50:	4639      	mov	r1, r7
 8007c52:	4648      	mov	r0, r9
 8007c54:	f7ff fb78 	bl	8007348 <__sprint_r>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d1e0      	bne.n	8007c1e <_vfiprintf_r+0x872>
 8007c5c:	ab0f      	add	r3, sp, #60	; 0x3c
 8007c5e:	e7f4      	b.n	8007c4a <_vfiprintf_r+0x89e>
 8007c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c62:	b913      	cbnz	r3, 8007c6a <_vfiprintf_r+0x8be>
 8007c64:	2300      	movs	r3, #0
 8007c66:	930d      	str	r3, [sp, #52]	; 0x34
 8007c68:	e7d9      	b.n	8007c1e <_vfiprintf_r+0x872>
 8007c6a:	aa0c      	add	r2, sp, #48	; 0x30
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4648      	mov	r0, r9
 8007c70:	f7ff fb6a 	bl	8007348 <__sprint_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d0f5      	beq.n	8007c64 <_vfiprintf_r+0x8b8>
 8007c78:	e7d1      	b.n	8007c1e <_vfiprintf_r+0x872>
 8007c7a:	ea54 0205 	orrs.w	r2, r4, r5
 8007c7e:	f8cd a010 	str.w	sl, [sp, #16]
 8007c82:	f43f ada3 	beq.w	80077cc <_vfiprintf_r+0x420>
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f43f aeda 	beq.w	8007a40 <_vfiprintf_r+0x694>
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8007c92:	f43f af26 	beq.w	8007ae2 <_vfiprintf_r+0x736>
 8007c96:	f004 0307 	and.w	r3, r4, #7
 8007c9a:	08e4      	lsrs	r4, r4, #3
 8007c9c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8007ca0:	08ed      	lsrs	r5, r5, #3
 8007ca2:	3330      	adds	r3, #48	; 0x30
 8007ca4:	ea54 0105 	orrs.w	r1, r4, r5
 8007ca8:	4642      	mov	r2, r8
 8007caa:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007cae:	d1f2      	bne.n	8007c96 <_vfiprintf_r+0x8ea>
 8007cb0:	9904      	ldr	r1, [sp, #16]
 8007cb2:	07c8      	lsls	r0, r1, #31
 8007cb4:	d506      	bpl.n	8007cc4 <_vfiprintf_r+0x918>
 8007cb6:	2b30      	cmp	r3, #48	; 0x30
 8007cb8:	d004      	beq.n	8007cc4 <_vfiprintf_r+0x918>
 8007cba:	2330      	movs	r3, #48	; 0x30
 8007cbc:	f808 3c01 	strb.w	r3, [r8, #-1]
 8007cc0:	f1a2 0802 	sub.w	r8, r2, #2
 8007cc4:	ab38      	add	r3, sp, #224	; 0xe0
 8007cc6:	eba3 0308 	sub.w	r3, r3, r8
 8007cca:	9d00      	ldr	r5, [sp, #0]
 8007ccc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	e5b8      	b.n	8007846 <_vfiprintf_r+0x49a>
 8007cd4:	08008c3a 	.word	0x08008c3a

08007cd8 <__sbprintf>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	460c      	mov	r4, r1
 8007cdc:	8989      	ldrh	r1, [r1, #12]
 8007cde:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8007ce2:	f021 0102 	bic.w	r1, r1, #2
 8007ce6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007cea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007cec:	911b      	str	r1, [sp, #108]	; 0x6c
 8007cee:	89e1      	ldrh	r1, [r4, #14]
 8007cf0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007cf4:	69e1      	ldr	r1, [r4, #28]
 8007cf6:	9109      	str	r1, [sp, #36]	; 0x24
 8007cf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8007cfc:	a91c      	add	r1, sp, #112	; 0x70
 8007cfe:	9102      	str	r1, [sp, #8]
 8007d00:	9106      	str	r1, [sp, #24]
 8007d02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d06:	4606      	mov	r6, r0
 8007d08:	9104      	str	r1, [sp, #16]
 8007d0a:	9107      	str	r1, [sp, #28]
 8007d0c:	a818      	add	r0, sp, #96	; 0x60
 8007d0e:	2100      	movs	r1, #0
 8007d10:	e9cd 3200 	strd	r3, r2, [sp]
 8007d14:	9108      	str	r1, [sp, #32]
 8007d16:	f7fe fa25 	bl	8006164 <__retarget_lock_init_recursive>
 8007d1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d1e:	a902      	add	r1, sp, #8
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff fb43 	bl	80073ac <_vfiprintf_r>
 8007d26:	1e05      	subs	r5, r0, #0
 8007d28:	db07      	blt.n	8007d3a <__sbprintf+0x62>
 8007d2a:	a902      	add	r1, sp, #8
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 f90f 	bl	8007f50 <_fflush_r>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	bf18      	it	ne
 8007d36:	f04f 35ff 	movne.w	r5, #4294967295
 8007d3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007d3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007d40:	065b      	lsls	r3, r3, #25
 8007d42:	bf42      	ittt	mi
 8007d44:	89a3      	ldrhmi	r3, [r4, #12]
 8007d46:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8007d4a:	81a3      	strhmi	r3, [r4, #12]
 8007d4c:	f7fe fa0b 	bl	8006166 <__retarget_lock_close_recursive>
 8007d50:	4628      	mov	r0, r5
 8007d52:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8007d56:	bd70      	pop	{r4, r5, r6, pc}

08007d58 <__ascii_wctomb>:
 8007d58:	b149      	cbz	r1, 8007d6e <__ascii_wctomb+0x16>
 8007d5a:	2aff      	cmp	r2, #255	; 0xff
 8007d5c:	bf85      	ittet	hi
 8007d5e:	238a      	movhi	r3, #138	; 0x8a
 8007d60:	6003      	strhi	r3, [r0, #0]
 8007d62:	700a      	strbls	r2, [r1, #0]
 8007d64:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d68:	bf98      	it	ls
 8007d6a:	2001      	movls	r0, #1
 8007d6c:	4770      	bx	lr
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4770      	bx	lr
	...

08007d74 <__swsetup_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4b2a      	ldr	r3, [pc, #168]	; (8007e20 <__swsetup_r+0xac>)
 8007d78:	4605      	mov	r5, r0
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b118      	cbz	r0, 8007d88 <__swsetup_r+0x14>
 8007d80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d82:	b90b      	cbnz	r3, 8007d88 <__swsetup_r+0x14>
 8007d84:	f000 f950 	bl	8008028 <__sinit>
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d8e:	0718      	lsls	r0, r3, #28
 8007d90:	d422      	bmi.n	8007dd8 <__swsetup_r+0x64>
 8007d92:	06d9      	lsls	r1, r3, #27
 8007d94:	d407      	bmi.n	8007da6 <__swsetup_r+0x32>
 8007d96:	2309      	movs	r3, #9
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e034      	b.n	8007e10 <__swsetup_r+0x9c>
 8007da6:	0758      	lsls	r0, r3, #29
 8007da8:	d512      	bpl.n	8007dd0 <__swsetup_r+0x5c>
 8007daa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007dac:	b141      	cbz	r1, 8007dc0 <__swsetup_r+0x4c>
 8007dae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007db2:	4299      	cmp	r1, r3
 8007db4:	d002      	beq.n	8007dbc <__swsetup_r+0x48>
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7fe f910 	bl	8005fdc <_free_r>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	6063      	str	r3, [r4, #4]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	6023      	str	r3, [r4, #0]
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	f043 0308 	orr.w	r3, r3, #8
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	b94b      	cbnz	r3, 8007df0 <__swsetup_r+0x7c>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de6:	d003      	beq.n	8007df0 <__swsetup_r+0x7c>
 8007de8:	4621      	mov	r1, r4
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 fb46 	bl	800847c <__smakebuf_r>
 8007df0:	89a0      	ldrh	r0, [r4, #12]
 8007df2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007df6:	f010 0301 	ands.w	r3, r0, #1
 8007dfa:	d00a      	beq.n	8007e12 <__swsetup_r+0x9e>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60a3      	str	r3, [r4, #8]
 8007e00:	6963      	ldr	r3, [r4, #20]
 8007e02:	425b      	negs	r3, r3
 8007e04:	61a3      	str	r3, [r4, #24]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	b943      	cbnz	r3, 8007e1c <__swsetup_r+0xa8>
 8007e0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e0e:	d1c4      	bne.n	8007d9a <__swsetup_r+0x26>
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	0781      	lsls	r1, r0, #30
 8007e14:	bf58      	it	pl
 8007e16:	6963      	ldrpl	r3, [r4, #20]
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	e7f4      	b.n	8007e06 <__swsetup_r+0x92>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7f7      	b.n	8007e10 <__swsetup_r+0x9c>
 8007e20:	2000000c 	.word	0x2000000c

08007e24 <abort>:
 8007e24:	b508      	push	{r3, lr}
 8007e26:	2006      	movs	r0, #6
 8007e28:	f000 fb92 	bl	8008550 <raise>
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	f7f9 fbcd 	bl	80015cc <_exit>
	...

08007e34 <__sflush_r>:
 8007e34:	898b      	ldrh	r3, [r1, #12]
 8007e36:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3e:	4605      	mov	r5, r0
 8007e40:	0718      	lsls	r0, r3, #28
 8007e42:	460c      	mov	r4, r1
 8007e44:	d45f      	bmi.n	8007f06 <__sflush_r+0xd2>
 8007e46:	684b      	ldr	r3, [r1, #4]
 8007e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	818a      	strh	r2, [r1, #12]
 8007e50:	dc05      	bgt.n	8007e5e <__sflush_r+0x2a>
 8007e52:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dc02      	bgt.n	8007e5e <__sflush_r+0x2a>
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e60:	2e00      	cmp	r6, #0
 8007e62:	d0f9      	beq.n	8007e58 <__sflush_r+0x24>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e6a:	682f      	ldr	r7, [r5, #0]
 8007e6c:	602b      	str	r3, [r5, #0]
 8007e6e:	d036      	beq.n	8007ede <__sflush_r+0xaa>
 8007e70:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	075a      	lsls	r2, r3, #29
 8007e76:	d505      	bpl.n	8007e84 <__sflush_r+0x50>
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	1ac0      	subs	r0, r0, r3
 8007e7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e7e:	b10b      	cbz	r3, 8007e84 <__sflush_r+0x50>
 8007e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e82:	1ac0      	subs	r0, r0, r3
 8007e84:	2300      	movs	r3, #0
 8007e86:	4602      	mov	r2, r0
 8007e88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e8a:	69e1      	ldr	r1, [r4, #28]
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b0      	blx	r6
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	d106      	bne.n	8007ea4 <__sflush_r+0x70>
 8007e96:	6829      	ldr	r1, [r5, #0]
 8007e98:	291d      	cmp	r1, #29
 8007e9a:	d830      	bhi.n	8007efe <__sflush_r+0xca>
 8007e9c:	4a2b      	ldr	r2, [pc, #172]	; (8007f4c <__sflush_r+0x118>)
 8007e9e:	40ca      	lsrs	r2, r1
 8007ea0:	07d6      	lsls	r6, r2, #31
 8007ea2:	d52c      	bpl.n	8007efe <__sflush_r+0xca>
 8007ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ea8:	b21b      	sxth	r3, r3
 8007eaa:	2200      	movs	r2, #0
 8007eac:	6062      	str	r2, [r4, #4]
 8007eae:	04d9      	lsls	r1, r3, #19
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	d504      	bpl.n	8007ec2 <__sflush_r+0x8e>
 8007eb8:	1c42      	adds	r2, r0, #1
 8007eba:	d101      	bne.n	8007ec0 <__sflush_r+0x8c>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b903      	cbnz	r3, 8007ec2 <__sflush_r+0x8e>
 8007ec0:	6520      	str	r0, [r4, #80]	; 0x50
 8007ec2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007ec4:	602f      	str	r7, [r5, #0]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d0c6      	beq.n	8007e58 <__sflush_r+0x24>
 8007eca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	d002      	beq.n	8007ed8 <__sflush_r+0xa4>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7fe f882 	bl	8005fdc <_free_r>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	6320      	str	r0, [r4, #48]	; 0x30
 8007edc:	e7bd      	b.n	8007e5a <__sflush_r+0x26>
 8007ede:	69e1      	ldr	r1, [r4, #28]
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b0      	blx	r6
 8007ee6:	1c41      	adds	r1, r0, #1
 8007ee8:	d1c3      	bne.n	8007e72 <__sflush_r+0x3e>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0c0      	beq.n	8007e72 <__sflush_r+0x3e>
 8007ef0:	2b1d      	cmp	r3, #29
 8007ef2:	d001      	beq.n	8007ef8 <__sflush_r+0xc4>
 8007ef4:	2b16      	cmp	r3, #22
 8007ef6:	d101      	bne.n	8007efc <__sflush_r+0xc8>
 8007ef8:	602f      	str	r7, [r5, #0]
 8007efa:	e7ad      	b.n	8007e58 <__sflush_r+0x24>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	e7a9      	b.n	8007e5a <__sflush_r+0x26>
 8007f06:	690f      	ldr	r7, [r1, #16]
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	d0a5      	beq.n	8007e58 <__sflush_r+0x24>
 8007f0c:	079b      	lsls	r3, r3, #30
 8007f0e:	680e      	ldr	r6, [r1, #0]
 8007f10:	bf08      	it	eq
 8007f12:	694b      	ldreq	r3, [r1, #20]
 8007f14:	600f      	str	r7, [r1, #0]
 8007f16:	bf18      	it	ne
 8007f18:	2300      	movne	r3, #0
 8007f1a:	eba6 0807 	sub.w	r8, r6, r7
 8007f1e:	608b      	str	r3, [r1, #8]
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	dd98      	ble.n	8007e58 <__sflush_r+0x24>
 8007f26:	69e1      	ldr	r1, [r4, #28]
 8007f28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f2a:	4643      	mov	r3, r8
 8007f2c:	463a      	mov	r2, r7
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b0      	blx	r6
 8007f32:	2800      	cmp	r0, #0
 8007f34:	dc06      	bgt.n	8007f44 <__sflush_r+0x110>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f42:	e78a      	b.n	8007e5a <__sflush_r+0x26>
 8007f44:	4407      	add	r7, r0
 8007f46:	eba8 0800 	sub.w	r8, r8, r0
 8007f4a:	e7e9      	b.n	8007f20 <__sflush_r+0xec>
 8007f4c:	20400001 	.word	0x20400001

08007f50 <_fflush_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	460c      	mov	r4, r1
 8007f54:	4605      	mov	r5, r0
 8007f56:	b118      	cbz	r0, 8007f60 <_fflush_r+0x10>
 8007f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007f5a:	b90b      	cbnz	r3, 8007f60 <_fflush_r+0x10>
 8007f5c:	f000 f864 	bl	8008028 <__sinit>
 8007f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f64:	b1bb      	cbz	r3, 8007f96 <_fflush_r+0x46>
 8007f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d404      	bmi.n	8007f76 <_fflush_r+0x26>
 8007f6c:	0599      	lsls	r1, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_fflush_r+0x26>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f7fe f8f9 	bl	8006168 <__retarget_lock_acquire_recursive>
 8007f76:	4628      	mov	r0, r5
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f7ff ff5b 	bl	8007e34 <__sflush_r>
 8007f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f80:	07da      	lsls	r2, r3, #31
 8007f82:	4605      	mov	r5, r0
 8007f84:	d405      	bmi.n	8007f92 <_fflush_r+0x42>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_fflush_r+0x42>
 8007f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8e:	f7fe f8ec 	bl	800616a <__retarget_lock_release_recursive>
 8007f92:	4628      	mov	r0, r5
 8007f94:	bd38      	pop	{r3, r4, r5, pc}
 8007f96:	461d      	mov	r5, r3
 8007f98:	e7fb      	b.n	8007f92 <_fflush_r+0x42>
	...

08007f9c <std>:
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007faa:	6083      	str	r3, [r0, #8]
 8007fac:	8181      	strh	r1, [r0, #12]
 8007fae:	6643      	str	r3, [r0, #100]	; 0x64
 8007fb0:	81c2      	strh	r2, [r0, #14]
 8007fb2:	6183      	str	r3, [r0, #24]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	305c      	adds	r0, #92	; 0x5c
 8007fba:	f7fb ff15 	bl	8003de8 <memset>
 8007fbe:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <std+0x40>)
 8007fc0:	6223      	str	r3, [r4, #32]
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <std+0x44>)
 8007fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <std+0x48>)
 8007fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <std+0x4c>)
 8007fcc:	61e4      	str	r4, [r4, #28]
 8007fce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd8:	f7fe b8c4 	b.w	8006164 <__retarget_lock_init_recursive>
 8007fdc:	08008589 	.word	0x08008589
 8007fe0:	080085ab 	.word	0x080085ab
 8007fe4:	080085e3 	.word	0x080085e3
 8007fe8:	08008607 	.word	0x08008607

08007fec <_cleanup_r>:
 8007fec:	4901      	ldr	r1, [pc, #4]	; (8007ff4 <_cleanup_r+0x8>)
 8007fee:	f000 b9f9 	b.w	80083e4 <_fwalk_reent>
 8007ff2:	bf00      	nop
 8007ff4:	08008711 	.word	0x08008711

08007ff8 <__sfp_lock_acquire>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__sfp_lock_acquire+0x8>)
 8007ffa:	f7fe b8b5 	b.w	8006168 <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000a42 	.word	0x20000a42

08008004 <__sfp_lock_release>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__sfp_lock_release+0x8>)
 8008006:	f7fe b8b0 	b.w	800616a <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20000a42 	.word	0x20000a42

08008010 <__sinit_lock_acquire>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__sinit_lock_acquire+0x8>)
 8008012:	f7fe b8a9 	b.w	8006168 <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	20000a43 	.word	0x20000a43

0800801c <__sinit_lock_release>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__sinit_lock_release+0x8>)
 800801e:	f7fe b8a4 	b.w	800616a <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	20000a43 	.word	0x20000a43

08008028 <__sinit>:
 8008028:	b510      	push	{r4, lr}
 800802a:	4604      	mov	r4, r0
 800802c:	f7ff fff0 	bl	8008010 <__sinit_lock_acquire>
 8008030:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008032:	b11a      	cbz	r2, 800803c <__sinit+0x14>
 8008034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008038:	f7ff bff0 	b.w	800801c <__sinit_lock_release>
 800803c:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <__sinit+0x4c>)
 800803e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008040:	2303      	movs	r3, #3
 8008042:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8008046:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800804a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800804e:	6860      	ldr	r0, [r4, #4]
 8008050:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8008054:	2104      	movs	r1, #4
 8008056:	f7ff ffa1 	bl	8007f9c <std>
 800805a:	68a0      	ldr	r0, [r4, #8]
 800805c:	2201      	movs	r2, #1
 800805e:	2109      	movs	r1, #9
 8008060:	f7ff ff9c 	bl	8007f9c <std>
 8008064:	68e0      	ldr	r0, [r4, #12]
 8008066:	2202      	movs	r2, #2
 8008068:	2112      	movs	r1, #18
 800806a:	f7ff ff97 	bl	8007f9c <std>
 800806e:	2301      	movs	r3, #1
 8008070:	63a3      	str	r3, [r4, #56]	; 0x38
 8008072:	e7df      	b.n	8008034 <__sinit+0xc>
 8008074:	08007fed 	.word	0x08007fed

08008078 <__fputwc>:
 8008078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800807c:	4680      	mov	r8, r0
 800807e:	460e      	mov	r6, r1
 8008080:	4615      	mov	r5, r2
 8008082:	f7fe ff8b 	bl	8006f9c <__locale_mb_cur_max>
 8008086:	2801      	cmp	r0, #1
 8008088:	d11c      	bne.n	80080c4 <__fputwc+0x4c>
 800808a:	1e73      	subs	r3, r6, #1
 800808c:	2bfe      	cmp	r3, #254	; 0xfe
 800808e:	d819      	bhi.n	80080c4 <__fputwc+0x4c>
 8008090:	f88d 6004 	strb.w	r6, [sp, #4]
 8008094:	4604      	mov	r4, r0
 8008096:	2700      	movs	r7, #0
 8008098:	f10d 0904 	add.w	r9, sp, #4
 800809c:	42a7      	cmp	r7, r4
 800809e:	d020      	beq.n	80080e2 <__fputwc+0x6a>
 80080a0:	68ab      	ldr	r3, [r5, #8]
 80080a2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	60ab      	str	r3, [r5, #8]
 80080ac:	da04      	bge.n	80080b8 <__fputwc+0x40>
 80080ae:	69aa      	ldr	r2, [r5, #24]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	db1a      	blt.n	80080ea <__fputwc+0x72>
 80080b4:	290a      	cmp	r1, #10
 80080b6:	d018      	beq.n	80080ea <__fputwc+0x72>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	7019      	strb	r1, [r3, #0]
 80080c0:	3701      	adds	r7, #1
 80080c2:	e7eb      	b.n	800809c <__fputwc+0x24>
 80080c4:	a901      	add	r1, sp, #4
 80080c6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80080ca:	4632      	mov	r2, r6
 80080cc:	4640      	mov	r0, r8
 80080ce:	f000 fae7 	bl	80086a0 <_wcrtomb_r>
 80080d2:	1c41      	adds	r1, r0, #1
 80080d4:	4604      	mov	r4, r0
 80080d6:	d1de      	bne.n	8008096 <__fputwc+0x1e>
 80080d8:	89ab      	ldrh	r3, [r5, #12]
 80080da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080de:	81ab      	strh	r3, [r5, #12]
 80080e0:	4606      	mov	r6, r0
 80080e2:	4630      	mov	r0, r6
 80080e4:	b003      	add	sp, #12
 80080e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ea:	462a      	mov	r2, r5
 80080ec:	4640      	mov	r0, r8
 80080ee:	f000 fa8e 	bl	800860e <__swbuf_r>
 80080f2:	1c42      	adds	r2, r0, #1
 80080f4:	d1e4      	bne.n	80080c0 <__fputwc+0x48>
 80080f6:	4606      	mov	r6, r0
 80080f8:	e7f3      	b.n	80080e2 <__fputwc+0x6a>

080080fa <_fputwc_r>:
 80080fa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80080fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080fe:	4614      	mov	r4, r2
 8008100:	07da      	lsls	r2, r3, #31
 8008102:	4605      	mov	r5, r0
 8008104:	d407      	bmi.n	8008116 <_fputwc_r+0x1c>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	059b      	lsls	r3, r3, #22
 800810a:	d404      	bmi.n	8008116 <_fputwc_r+0x1c>
 800810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810e:	9101      	str	r1, [sp, #4]
 8008110:	f7fe f82a 	bl	8006168 <__retarget_lock_acquire_recursive>
 8008114:	9901      	ldr	r1, [sp, #4]
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	0498      	lsls	r0, r3, #18
 800811c:	d406      	bmi.n	800812c <_fputwc_r+0x32>
 800811e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800812a:	6663      	str	r3, [r4, #100]	; 0x64
 800812c:	4622      	mov	r2, r4
 800812e:	4628      	mov	r0, r5
 8008130:	f7ff ffa2 	bl	8008078 <__fputwc>
 8008134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	4605      	mov	r5, r0
 800813a:	d405      	bmi.n	8008148 <_fputwc_r+0x4e>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	059b      	lsls	r3, r3, #22
 8008140:	d402      	bmi.n	8008148 <_fputwc_r+0x4e>
 8008142:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008144:	f7fe f811 	bl	800616a <__retarget_lock_release_recursive>
 8008148:	4628      	mov	r0, r5
 800814a:	b003      	add	sp, #12
 800814c:	bd30      	pop	{r4, r5, pc}
	...

08008150 <__sfvwrite_r>:
 8008150:	6893      	ldr	r3, [r2, #8]
 8008152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008156:	4606      	mov	r6, r0
 8008158:	460c      	mov	r4, r1
 800815a:	4690      	mov	r8, r2
 800815c:	b91b      	cbnz	r3, 8008166 <__sfvwrite_r+0x16>
 800815e:	2000      	movs	r0, #0
 8008160:	b003      	add	sp, #12
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	898b      	ldrh	r3, [r1, #12]
 8008168:	0718      	lsls	r0, r3, #28
 800816a:	d550      	bpl.n	800820e <__sfvwrite_r+0xbe>
 800816c:	690b      	ldr	r3, [r1, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d04d      	beq.n	800820e <__sfvwrite_r+0xbe>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f8d8 7000 	ldr.w	r7, [r8]
 8008178:	f013 0902 	ands.w	r9, r3, #2
 800817c:	d16c      	bne.n	8008258 <__sfvwrite_r+0x108>
 800817e:	f013 0301 	ands.w	r3, r3, #1
 8008182:	f000 809c 	beq.w	80082be <__sfvwrite_r+0x16e>
 8008186:	4648      	mov	r0, r9
 8008188:	46ca      	mov	sl, r9
 800818a:	46cb      	mov	fp, r9
 800818c:	f1bb 0f00 	cmp.w	fp, #0
 8008190:	f000 8103 	beq.w	800839a <__sfvwrite_r+0x24a>
 8008194:	b950      	cbnz	r0, 80081ac <__sfvwrite_r+0x5c>
 8008196:	465a      	mov	r2, fp
 8008198:	210a      	movs	r1, #10
 800819a:	4650      	mov	r0, sl
 800819c:	f7f8 f828 	bl	80001f0 <memchr>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f000 80ff 	beq.w	80083a4 <__sfvwrite_r+0x254>
 80081a6:	3001      	adds	r0, #1
 80081a8:	eba0 090a 	sub.w	r9, r0, sl
 80081ac:	6820      	ldr	r0, [r4, #0]
 80081ae:	6921      	ldr	r1, [r4, #16]
 80081b0:	6963      	ldr	r3, [r4, #20]
 80081b2:	45d9      	cmp	r9, fp
 80081b4:	464a      	mov	r2, r9
 80081b6:	bf28      	it	cs
 80081b8:	465a      	movcs	r2, fp
 80081ba:	4288      	cmp	r0, r1
 80081bc:	f240 80f5 	bls.w	80083aa <__sfvwrite_r+0x25a>
 80081c0:	68a5      	ldr	r5, [r4, #8]
 80081c2:	441d      	add	r5, r3
 80081c4:	42aa      	cmp	r2, r5
 80081c6:	f340 80f0 	ble.w	80083aa <__sfvwrite_r+0x25a>
 80081ca:	4651      	mov	r1, sl
 80081cc:	462a      	mov	r2, r5
 80081ce:	f7fe fefd 	bl	8006fcc <memmove>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	442b      	add	r3, r5
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	4621      	mov	r1, r4
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff feb8 	bl	8007f50 <_fflush_r>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d167      	bne.n	80082b4 <__sfvwrite_r+0x164>
 80081e4:	ebb9 0905 	subs.w	r9, r9, r5
 80081e8:	f040 80f7 	bne.w	80083da <__sfvwrite_r+0x28a>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff feae 	bl	8007f50 <_fflush_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d15d      	bne.n	80082b4 <__sfvwrite_r+0x164>
 80081f8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80081fc:	44aa      	add	sl, r5
 80081fe:	ebab 0b05 	sub.w	fp, fp, r5
 8008202:	1b55      	subs	r5, r2, r5
 8008204:	f8c8 5008 	str.w	r5, [r8, #8]
 8008208:	2d00      	cmp	r5, #0
 800820a:	d1bf      	bne.n	800818c <__sfvwrite_r+0x3c>
 800820c:	e7a7      	b.n	800815e <__sfvwrite_r+0xe>
 800820e:	4621      	mov	r1, r4
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff fdaf 	bl	8007d74 <__swsetup_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	d0ab      	beq.n	8008172 <__sfvwrite_r+0x22>
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	e79f      	b.n	8008160 <__sfvwrite_r+0x10>
 8008220:	e9d7 b900 	ldrd	fp, r9, [r7]
 8008224:	3708      	adds	r7, #8
 8008226:	f1b9 0f00 	cmp.w	r9, #0
 800822a:	d0f9      	beq.n	8008220 <__sfvwrite_r+0xd0>
 800822c:	45d1      	cmp	r9, sl
 800822e:	464b      	mov	r3, r9
 8008230:	69e1      	ldr	r1, [r4, #28]
 8008232:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008234:	bf28      	it	cs
 8008236:	4653      	movcs	r3, sl
 8008238:	465a      	mov	r2, fp
 800823a:	4630      	mov	r0, r6
 800823c:	47a8      	blx	r5
 800823e:	2800      	cmp	r0, #0
 8008240:	dd38      	ble.n	80082b4 <__sfvwrite_r+0x164>
 8008242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008246:	4483      	add	fp, r0
 8008248:	eba9 0900 	sub.w	r9, r9, r0
 800824c:	1a18      	subs	r0, r3, r0
 800824e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008252:	2800      	cmp	r0, #0
 8008254:	d1e7      	bne.n	8008226 <__sfvwrite_r+0xd6>
 8008256:	e782      	b.n	800815e <__sfvwrite_r+0xe>
 8008258:	f04f 0b00 	mov.w	fp, #0
 800825c:	f8df a180 	ldr.w	sl, [pc, #384]	; 80083e0 <__sfvwrite_r+0x290>
 8008260:	46d9      	mov	r9, fp
 8008262:	e7e0      	b.n	8008226 <__sfvwrite_r+0xd6>
 8008264:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8008268:	3708      	adds	r7, #8
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	d0f9      	beq.n	8008264 <__sfvwrite_r+0x114>
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	68a2      	ldr	r2, [r4, #8]
 8008276:	0599      	lsls	r1, r3, #22
 8008278:	d563      	bpl.n	8008342 <__sfvwrite_r+0x1f2>
 800827a:	4552      	cmp	r2, sl
 800827c:	d836      	bhi.n	80082ec <__sfvwrite_r+0x19c>
 800827e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008282:	d033      	beq.n	80082ec <__sfvwrite_r+0x19c>
 8008284:	6921      	ldr	r1, [r4, #16]
 8008286:	6965      	ldr	r5, [r4, #20]
 8008288:	eba0 0b01 	sub.w	fp, r0, r1
 800828c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008294:	f10b 0201 	add.w	r2, fp, #1
 8008298:	106d      	asrs	r5, r5, #1
 800829a:	4452      	add	r2, sl
 800829c:	4295      	cmp	r5, r2
 800829e:	bf38      	it	cc
 80082a0:	4615      	movcc	r5, r2
 80082a2:	055b      	lsls	r3, r3, #21
 80082a4:	d53d      	bpl.n	8008322 <__sfvwrite_r+0x1d2>
 80082a6:	4629      	mov	r1, r5
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7fd ff5f 	bl	800616c <_malloc_r>
 80082ae:	b948      	cbnz	r0, 80082c4 <__sfvwrite_r+0x174>
 80082b0:	230c      	movs	r3, #12
 80082b2:	6033      	str	r3, [r6, #0]
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	e7ad      	b.n	800821a <__sfvwrite_r+0xca>
 80082be:	4699      	mov	r9, r3
 80082c0:	469a      	mov	sl, r3
 80082c2:	e7d2      	b.n	800826a <__sfvwrite_r+0x11a>
 80082c4:	465a      	mov	r2, fp
 80082c6:	6921      	ldr	r1, [r4, #16]
 80082c8:	9001      	str	r0, [sp, #4]
 80082ca:	f7fe f98b 	bl	80065e4 <memcpy>
 80082ce:	89a2      	ldrh	r2, [r4, #12]
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80082d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082da:	81a2      	strh	r2, [r4, #12]
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	6165      	str	r5, [r4, #20]
 80082e0:	445b      	add	r3, fp
 80082e2:	eba5 050b 	sub.w	r5, r5, fp
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	4652      	mov	r2, sl
 80082ea:	60a5      	str	r5, [r4, #8]
 80082ec:	4552      	cmp	r2, sl
 80082ee:	bf28      	it	cs
 80082f0:	4652      	movcs	r2, sl
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	9201      	str	r2, [sp, #4]
 80082f6:	4649      	mov	r1, r9
 80082f8:	f7fe fe68 	bl	8006fcc <memmove>
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	9a01      	ldr	r2, [sp, #4]
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	60a3      	str	r3, [r4, #8]
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	441a      	add	r2, r3
 8008308:	4655      	mov	r5, sl
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008310:	44a9      	add	r9, r5
 8008312:	ebaa 0a05 	sub.w	sl, sl, r5
 8008316:	1b45      	subs	r5, r0, r5
 8008318:	f8c8 5008 	str.w	r5, [r8, #8]
 800831c:	2d00      	cmp	r5, #0
 800831e:	d1a4      	bne.n	800826a <__sfvwrite_r+0x11a>
 8008320:	e71d      	b.n	800815e <__sfvwrite_r+0xe>
 8008322:	462a      	mov	r2, r5
 8008324:	4630      	mov	r0, r6
 8008326:	f7fe fe6b 	bl	8007000 <_realloc_r>
 800832a:	4603      	mov	r3, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d1d5      	bne.n	80082dc <__sfvwrite_r+0x18c>
 8008330:	6921      	ldr	r1, [r4, #16]
 8008332:	4630      	mov	r0, r6
 8008334:	f7fd fe52 	bl	8005fdc <_free_r>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	e7b6      	b.n	80082b0 <__sfvwrite_r+0x160>
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	4283      	cmp	r3, r0
 8008346:	d302      	bcc.n	800834e <__sfvwrite_r+0x1fe>
 8008348:	6961      	ldr	r1, [r4, #20]
 800834a:	4551      	cmp	r1, sl
 800834c:	d915      	bls.n	800837a <__sfvwrite_r+0x22a>
 800834e:	4552      	cmp	r2, sl
 8008350:	bf28      	it	cs
 8008352:	4652      	movcs	r2, sl
 8008354:	4649      	mov	r1, r9
 8008356:	4615      	mov	r5, r2
 8008358:	f7fe fe38 	bl	8006fcc <memmove>
 800835c:	68a3      	ldr	r3, [r4, #8]
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	1b5b      	subs	r3, r3, r5
 8008362:	442a      	add	r2, r5
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1cf      	bne.n	800830c <__sfvwrite_r+0x1bc>
 800836c:	4621      	mov	r1, r4
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff fdee 	bl	8007f50 <_fflush_r>
 8008374:	2800      	cmp	r0, #0
 8008376:	d0c9      	beq.n	800830c <__sfvwrite_r+0x1bc>
 8008378:	e79c      	b.n	80082b4 <__sfvwrite_r+0x164>
 800837a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800837e:	459a      	cmp	sl, r3
 8008380:	bf38      	it	cc
 8008382:	4653      	movcc	r3, sl
 8008384:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008386:	fb93 f3f1 	sdiv	r3, r3, r1
 800838a:	464a      	mov	r2, r9
 800838c:	434b      	muls	r3, r1
 800838e:	4630      	mov	r0, r6
 8008390:	69e1      	ldr	r1, [r4, #28]
 8008392:	47a8      	blx	r5
 8008394:	1e05      	subs	r5, r0, #0
 8008396:	dcb9      	bgt.n	800830c <__sfvwrite_r+0x1bc>
 8008398:	e78c      	b.n	80082b4 <__sfvwrite_r+0x164>
 800839a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800839e:	2000      	movs	r0, #0
 80083a0:	3708      	adds	r7, #8
 80083a2:	e6f3      	b.n	800818c <__sfvwrite_r+0x3c>
 80083a4:	f10b 0901 	add.w	r9, fp, #1
 80083a8:	e700      	b.n	80081ac <__sfvwrite_r+0x5c>
 80083aa:	4293      	cmp	r3, r2
 80083ac:	dc08      	bgt.n	80083c0 <__sfvwrite_r+0x270>
 80083ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80083b0:	69e1      	ldr	r1, [r4, #28]
 80083b2:	4652      	mov	r2, sl
 80083b4:	4630      	mov	r0, r6
 80083b6:	47a8      	blx	r5
 80083b8:	1e05      	subs	r5, r0, #0
 80083ba:	f73f af13 	bgt.w	80081e4 <__sfvwrite_r+0x94>
 80083be:	e779      	b.n	80082b4 <__sfvwrite_r+0x164>
 80083c0:	4651      	mov	r1, sl
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	f7fe fe02 	bl	8006fcc <memmove>
 80083c8:	9a01      	ldr	r2, [sp, #4]
 80083ca:	68a3      	ldr	r3, [r4, #8]
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	60a3      	str	r3, [r4, #8]
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	4413      	add	r3, r2
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	4615      	mov	r5, r2
 80083d8:	e704      	b.n	80081e4 <__sfvwrite_r+0x94>
 80083da:	2001      	movs	r0, #1
 80083dc:	e70c      	b.n	80081f8 <__sfvwrite_r+0xa8>
 80083de:	bf00      	nop
 80083e0:	7ffffc00 	.word	0x7ffffc00

080083e4 <_fwalk_reent>:
 80083e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	4606      	mov	r6, r0
 80083ea:	4688      	mov	r8, r1
 80083ec:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083f6:	f1b9 0901 	subs.w	r9, r9, #1
 80083fa:	d505      	bpl.n	8008408 <_fwalk_reent+0x24>
 80083fc:	6824      	ldr	r4, [r4, #0]
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d1f7      	bne.n	80083f2 <_fwalk_reent+0xe>
 8008402:	4638      	mov	r0, r7
 8008404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008408:	89ab      	ldrh	r3, [r5, #12]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d907      	bls.n	800841e <_fwalk_reent+0x3a>
 800840e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008412:	3301      	adds	r3, #1
 8008414:	d003      	beq.n	800841e <_fwalk_reent+0x3a>
 8008416:	4629      	mov	r1, r5
 8008418:	4630      	mov	r0, r6
 800841a:	47c0      	blx	r8
 800841c:	4307      	orrs	r7, r0
 800841e:	3568      	adds	r5, #104	; 0x68
 8008420:	e7e9      	b.n	80083f6 <_fwalk_reent+0x12>

08008422 <__swhatbuf_r>:
 8008422:	b570      	push	{r4, r5, r6, lr}
 8008424:	460e      	mov	r6, r1
 8008426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842a:	2900      	cmp	r1, #0
 800842c:	b096      	sub	sp, #88	; 0x58
 800842e:	4614      	mov	r4, r2
 8008430:	461d      	mov	r5, r3
 8008432:	da0a      	bge.n	800844a <__swhatbuf_r+0x28>
 8008434:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8008438:	2300      	movs	r3, #0
 800843a:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	d116      	bne.n	8008470 <__swhatbuf_r+0x4e>
 8008442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	e015      	b.n	8008476 <__swhatbuf_r+0x54>
 800844a:	466a      	mov	r2, sp
 800844c:	f000 f9b8 	bl	80087c0 <_fstat_r>
 8008450:	2800      	cmp	r0, #0
 8008452:	dbef      	blt.n	8008434 <__swhatbuf_r+0x12>
 8008454:	9a01      	ldr	r2, [sp, #4]
 8008456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800845a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800845e:	425a      	negs	r2, r3
 8008460:	415a      	adcs	r2, r3
 8008462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008466:	602a      	str	r2, [r5, #0]
 8008468:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	e002      	b.n	8008476 <__swhatbuf_r+0x54>
 8008470:	2240      	movs	r2, #64	; 0x40
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	b016      	add	sp, #88	; 0x58
 8008478:	bd70      	pop	{r4, r5, r6, pc}
	...

0800847c <__smakebuf_r>:
 800847c:	898b      	ldrh	r3, [r1, #12]
 800847e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008480:	079d      	lsls	r5, r3, #30
 8008482:	4606      	mov	r6, r0
 8008484:	460c      	mov	r4, r1
 8008486:	d507      	bpl.n	8008498 <__smakebuf_r+0x1c>
 8008488:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	2301      	movs	r3, #1
 8008492:	6163      	str	r3, [r4, #20]
 8008494:	b002      	add	sp, #8
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	ab01      	add	r3, sp, #4
 800849a:	466a      	mov	r2, sp
 800849c:	f7ff ffc1 	bl	8008422 <__swhatbuf_r>
 80084a0:	9900      	ldr	r1, [sp, #0]
 80084a2:	4605      	mov	r5, r0
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7fd fe61 	bl	800616c <_malloc_r>
 80084aa:	b948      	cbnz	r0, 80084c0 <__smakebuf_r+0x44>
 80084ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b0:	059a      	lsls	r2, r3, #22
 80084b2:	d4ef      	bmi.n	8008494 <__smakebuf_r+0x18>
 80084b4:	f023 0303 	bic.w	r3, r3, #3
 80084b8:	f043 0302 	orr.w	r3, r3, #2
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	e7e3      	b.n	8008488 <__smakebuf_r+0xc>
 80084c0:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <__smakebuf_r+0x7c>)
 80084c2:	63f3      	str	r3, [r6, #60]	; 0x3c
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	6020      	str	r0, [r4, #0]
 80084c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	6163      	str	r3, [r4, #20]
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	6120      	str	r0, [r4, #16]
 80084d6:	b15b      	cbz	r3, 80084f0 <__smakebuf_r+0x74>
 80084d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084dc:	4630      	mov	r0, r6
 80084de:	f000 f981 	bl	80087e4 <_isatty_r>
 80084e2:	b128      	cbz	r0, 80084f0 <__smakebuf_r+0x74>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f023 0303 	bic.w	r3, r3, #3
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	89a0      	ldrh	r0, [r4, #12]
 80084f2:	4305      	orrs	r5, r0
 80084f4:	81a5      	strh	r5, [r4, #12]
 80084f6:	e7cd      	b.n	8008494 <__smakebuf_r+0x18>
 80084f8:	08007fed 	.word	0x08007fed

080084fc <_raise_r>:
 80084fc:	291f      	cmp	r1, #31
 80084fe:	b538      	push	{r3, r4, r5, lr}
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	d904      	bls.n	8008510 <_raise_r+0x14>
 8008506:	2316      	movs	r3, #22
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	f04f 30ff 	mov.w	r0, #4294967295
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008514:	b112      	cbz	r2, 800851c <_raise_r+0x20>
 8008516:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800851a:	b94b      	cbnz	r3, 8008530 <_raise_r+0x34>
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f831 	bl	8008584 <_getpid_r>
 8008522:	462a      	mov	r2, r5
 8008524:	4601      	mov	r1, r0
 8008526:	4620      	mov	r0, r4
 8008528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800852c:	f000 b818 	b.w	8008560 <_kill_r>
 8008530:	2b01      	cmp	r3, #1
 8008532:	d00a      	beq.n	800854a <_raise_r+0x4e>
 8008534:	1c59      	adds	r1, r3, #1
 8008536:	d103      	bne.n	8008540 <_raise_r+0x44>
 8008538:	2316      	movs	r3, #22
 800853a:	6003      	str	r3, [r0, #0]
 800853c:	2001      	movs	r0, #1
 800853e:	e7e6      	b.n	800850e <_raise_r+0x12>
 8008540:	2400      	movs	r4, #0
 8008542:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008546:	4628      	mov	r0, r5
 8008548:	4798      	blx	r3
 800854a:	2000      	movs	r0, #0
 800854c:	e7df      	b.n	800850e <_raise_r+0x12>
	...

08008550 <raise>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <raise+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f7ff bfd1 	b.w	80084fc <_raise_r>
 800855a:	bf00      	nop
 800855c:	2000000c 	.word	0x2000000c

08008560 <_kill_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	; (8008580 <_kill_r+0x20>)
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	f7f9 f81d 	bl	80015ac <_kill>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	d102      	bne.n	800857c <_kill_r+0x1c>
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	b103      	cbz	r3, 800857c <_kill_r+0x1c>
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	bf00      	nop
 8008580:	20000a78 	.word	0x20000a78

08008584 <_getpid_r>:
 8008584:	f7f9 b80a 	b.w	800159c <_getpid>

08008588 <__sread>:
 8008588:	b510      	push	{r4, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	f000 f94a 	bl	8008828 <_read_r>
 8008594:	2800      	cmp	r0, #0
 8008596:	bfab      	itete	ge
 8008598:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800859a:	89a3      	ldrhlt	r3, [r4, #12]
 800859c:	181b      	addge	r3, r3, r0
 800859e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085a2:	bfac      	ite	ge
 80085a4:	6523      	strge	r3, [r4, #80]	; 0x50
 80085a6:	81a3      	strhlt	r3, [r4, #12]
 80085a8:	bd10      	pop	{r4, pc}

080085aa <__swrite>:
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	461f      	mov	r7, r3
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	05db      	lsls	r3, r3, #23
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4616      	mov	r6, r2
 80085ba:	d505      	bpl.n	80085c8 <__swrite+0x1e>
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2302      	movs	r3, #2
 80085c2:	2200      	movs	r2, #0
 80085c4:	f000 f91e 	bl	8008804 <_lseek_r>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085de:	f000 b875 	b.w	80086cc <_write_r>

080085e2 <__sseek>:
 80085e2:	b510      	push	{r4, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ea:	f000 f90b 	bl	8008804 <_lseek_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	bf15      	itete	ne
 80085f4:	6520      	strne	r0, [r4, #80]	; 0x50
 80085f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085fe:	81a3      	strheq	r3, [r4, #12]
 8008600:	bf18      	it	ne
 8008602:	81a3      	strhne	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__sclose>:
 8008606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860a:	f000 b871 	b.w	80086f0 <_close_r>

0800860e <__swbuf_r>:
 800860e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008610:	460e      	mov	r6, r1
 8008612:	4614      	mov	r4, r2
 8008614:	4605      	mov	r5, r0
 8008616:	b118      	cbz	r0, 8008620 <__swbuf_r+0x12>
 8008618:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800861a:	b90b      	cbnz	r3, 8008620 <__swbuf_r+0x12>
 800861c:	f7ff fd04 	bl	8008028 <__sinit>
 8008620:	69a3      	ldr	r3, [r4, #24]
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	0719      	lsls	r1, r3, #28
 8008628:	d529      	bpl.n	800867e <__swbuf_r+0x70>
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	b33b      	cbz	r3, 800867e <__swbuf_r+0x70>
 800862e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008632:	b2f6      	uxtb	r6, r6
 8008634:	049a      	lsls	r2, r3, #18
 8008636:	4637      	mov	r7, r6
 8008638:	d52a      	bpl.n	8008690 <__swbuf_r+0x82>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	6920      	ldr	r0, [r4, #16]
 800863e:	1a18      	subs	r0, r3, r0
 8008640:	6963      	ldr	r3, [r4, #20]
 8008642:	4283      	cmp	r3, r0
 8008644:	dc04      	bgt.n	8008650 <__swbuf_r+0x42>
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f7ff fc81 	bl	8007f50 <_fflush_r>
 800864e:	b9e0      	cbnz	r0, 800868a <__swbuf_r+0x7c>
 8008650:	68a3      	ldr	r3, [r4, #8]
 8008652:	3b01      	subs	r3, #1
 8008654:	60a3      	str	r3, [r4, #8]
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	701e      	strb	r6, [r3, #0]
 800865e:	6962      	ldr	r2, [r4, #20]
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	429a      	cmp	r2, r3
 8008664:	d004      	beq.n	8008670 <__swbuf_r+0x62>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	07db      	lsls	r3, r3, #31
 800866a:	d506      	bpl.n	800867a <__swbuf_r+0x6c>
 800866c:	2e0a      	cmp	r6, #10
 800866e:	d104      	bne.n	800867a <__swbuf_r+0x6c>
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f7ff fc6c 	bl	8007f50 <_fflush_r>
 8008678:	b938      	cbnz	r0, 800868a <__swbuf_r+0x7c>
 800867a:	4638      	mov	r0, r7
 800867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f7ff fb77 	bl	8007d74 <__swsetup_r>
 8008686:	2800      	cmp	r0, #0
 8008688:	d0d1      	beq.n	800862e <__swbuf_r+0x20>
 800868a:	f04f 37ff 	mov.w	r7, #4294967295
 800868e:	e7f4      	b.n	800867a <__swbuf_r+0x6c>
 8008690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800869c:	6663      	str	r3, [r4, #100]	; 0x64
 800869e:	e7cc      	b.n	800863a <__swbuf_r+0x2c>

080086a0 <_wcrtomb_r>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	4c09      	ldr	r4, [pc, #36]	; (80086c8 <_wcrtomb_r+0x28>)
 80086a4:	b085      	sub	sp, #20
 80086a6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 80086aa:	4605      	mov	r5, r0
 80086ac:	461e      	mov	r6, r3
 80086ae:	b909      	cbnz	r1, 80086b4 <_wcrtomb_r+0x14>
 80086b0:	460a      	mov	r2, r1
 80086b2:	a901      	add	r1, sp, #4
 80086b4:	47b8      	blx	r7
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	bf01      	itttt	eq
 80086ba:	2300      	moveq	r3, #0
 80086bc:	6033      	streq	r3, [r6, #0]
 80086be:	238a      	moveq	r3, #138	; 0x8a
 80086c0:	602b      	streq	r3, [r5, #0]
 80086c2:	b005      	add	sp, #20
 80086c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c6:	bf00      	nop
 80086c8:	2000084c 	.word	0x2000084c

080086cc <_write_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d07      	ldr	r5, [pc, #28]	; (80086ec <_write_r+0x20>)
 80086d0:	4604      	mov	r4, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	4611      	mov	r1, r2
 80086d6:	2200      	movs	r2, #0
 80086d8:	602a      	str	r2, [r5, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	f7f8 ff9d 	bl	800161a <_write>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_write_r+0x1e>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_write_r+0x1e>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000a78 	.word	0x20000a78

080086f0 <_close_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_close_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f8 ffa9 	bl	8001652 <_close>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_close_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_close_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	20000a78 	.word	0x20000a78

08008710 <_fclose_r>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4606      	mov	r6, r0
 8008714:	460c      	mov	r4, r1
 8008716:	b911      	cbnz	r1, 800871e <_fclose_r+0xe>
 8008718:	2500      	movs	r5, #0
 800871a:	4628      	mov	r0, r5
 800871c:	bd70      	pop	{r4, r5, r6, pc}
 800871e:	b118      	cbz	r0, 8008728 <_fclose_r+0x18>
 8008720:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008722:	b90b      	cbnz	r3, 8008728 <_fclose_r+0x18>
 8008724:	f7ff fc80 	bl	8008028 <__sinit>
 8008728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800872a:	07d8      	lsls	r0, r3, #31
 800872c:	d405      	bmi.n	800873a <_fclose_r+0x2a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	0599      	lsls	r1, r3, #22
 8008732:	d402      	bmi.n	800873a <_fclose_r+0x2a>
 8008734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008736:	f7fd fd17 	bl	8006168 <__retarget_lock_acquire_recursive>
 800873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873e:	b93b      	cbnz	r3, 8008750 <_fclose_r+0x40>
 8008740:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008742:	f015 0501 	ands.w	r5, r5, #1
 8008746:	d1e7      	bne.n	8008718 <_fclose_r+0x8>
 8008748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874a:	f7fd fd0e 	bl	800616a <__retarget_lock_release_recursive>
 800874e:	e7e4      	b.n	800871a <_fclose_r+0xa>
 8008750:	4621      	mov	r1, r4
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff fb6e 	bl	8007e34 <__sflush_r>
 8008758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800875a:	4605      	mov	r5, r0
 800875c:	b133      	cbz	r3, 800876c <_fclose_r+0x5c>
 800875e:	69e1      	ldr	r1, [r4, #28]
 8008760:	4630      	mov	r0, r6
 8008762:	4798      	blx	r3
 8008764:	2800      	cmp	r0, #0
 8008766:	bfb8      	it	lt
 8008768:	f04f 35ff 	movlt.w	r5, #4294967295
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	061a      	lsls	r2, r3, #24
 8008770:	d503      	bpl.n	800877a <_fclose_r+0x6a>
 8008772:	6921      	ldr	r1, [r4, #16]
 8008774:	4630      	mov	r0, r6
 8008776:	f7fd fc31 	bl	8005fdc <_free_r>
 800877a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800877c:	b141      	cbz	r1, 8008790 <_fclose_r+0x80>
 800877e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008782:	4299      	cmp	r1, r3
 8008784:	d002      	beq.n	800878c <_fclose_r+0x7c>
 8008786:	4630      	mov	r0, r6
 8008788:	f7fd fc28 	bl	8005fdc <_free_r>
 800878c:	2300      	movs	r3, #0
 800878e:	6323      	str	r3, [r4, #48]	; 0x30
 8008790:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008792:	b121      	cbz	r1, 800879e <_fclose_r+0x8e>
 8008794:	4630      	mov	r0, r6
 8008796:	f7fd fc21 	bl	8005fdc <_free_r>
 800879a:	2300      	movs	r3, #0
 800879c:	6463      	str	r3, [r4, #68]	; 0x44
 800879e:	f7ff fc2b 	bl	8007ff8 <__sfp_lock_acquire>
 80087a2:	2300      	movs	r3, #0
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a8:	07db      	lsls	r3, r3, #31
 80087aa:	d402      	bmi.n	80087b2 <_fclose_r+0xa2>
 80087ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ae:	f7fd fcdc 	bl	800616a <__retarget_lock_release_recursive>
 80087b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b4:	f7fd fcd7 	bl	8006166 <__retarget_lock_close_recursive>
 80087b8:	f7ff fc24 	bl	8008004 <__sfp_lock_release>
 80087bc:	e7ad      	b.n	800871a <_fclose_r+0xa>
	...

080087c0 <_fstat_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	; (80087e0 <_fstat_r+0x20>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	4611      	mov	r1, r2
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	f7f8 ff4c 	bl	800166a <_fstat>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d102      	bne.n	80087dc <_fstat_r+0x1c>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	b103      	cbz	r3, 80087dc <_fstat_r+0x1c>
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	bf00      	nop
 80087e0:	20000a78 	.word	0x20000a78

080087e4 <_isatty_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_isatty_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f8 ff4b 	bl	800168a <_isatty>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_isatty_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_isatty_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000a78 	.word	0x20000a78

08008804 <_lseek_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_lseek_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f8 ff44 	bl	80016a0 <_lseek>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_lseek_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_lseek_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000a78 	.word	0x20000a78

08008828 <_read_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	; (8008848 <_read_r+0x20>)
 800882c:	4604      	mov	r4, r0
 800882e:	4608      	mov	r0, r1
 8008830:	4611      	mov	r1, r2
 8008832:	2200      	movs	r2, #0
 8008834:	602a      	str	r2, [r5, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f7f8 fed2 	bl	80015e0 <_read>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_read_r+0x1e>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_read_r+0x1e>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	20000a78 	.word	0x20000a78

0800884c <_init>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	bf00      	nop
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr

08008858 <_fini>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr
